# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi hidden-definitions

# typed: autogenerated

class Ability
  include ::CanCan::Ability
  def initialize(user); end
end

class Ability
end

class AbstractController::DoubleRenderError
  DEFAULT_MESSAGE = ::T.let(nil, ::T.untyped)
end

module AbstractController::Rendering
  DEFAULT_PROTECTED_INSTANCE_VARIABLES = ::T.let(nil, ::T.untyped)
end

module ActionCable
  INTERNAL = ::T.let(nil, ::T.untyped)
end

class ActionCable::Connection::ClientSocket
  CLOSED = ::T.let(nil, ::T.untyped)
  CLOSING = ::T.let(nil, ::T.untyped)
  CONNECTING = ::T.let(nil, ::T.untyped)
  OPEN = ::T.let(nil, ::T.untyped)
end

class ActionCable::Connection::WebSocket
  def alive?(); end

  def close(); end

  def initialize(env, event_target, event_loop, protocols: T.unsafe(nil)); end

  def possible?(); end

  def protocol(); end

  def rack_response(); end

  def transmit(data); end

  def websocket(); end
end

class ActionCable::Connection::WebSocket
end

class ActionCable::RemoteConnections
  def initialize(server); end

  def server(); end

  def where(identifier); end
end

class ActionCable::RemoteConnections::RemoteConnection
  include ::ActionCable::Connection::InternalChannel
  include ::ActionCable::Connection::Identification
  def disconnect(); end

  def identifiers(); end

  def identifiers=(val); end

  def identifiers?(); end

  def initialize(server, ids); end

  def server(); end
end

class ActionCable::RemoteConnections::RemoteConnection::InvalidIdentifiersError
end

class ActionCable::RemoteConnections::RemoteConnection::InvalidIdentifiersError
end

class ActionCable::RemoteConnections::RemoteConnection
  extend ::ActionCable::Connection::Identification::ClassMethods
  def self.identifiers(); end

  def self.identifiers=(val); end

  def self.identifiers?(); end
end

class ActionCable::RemoteConnections
end

module ActionCable::Server::Connections
  BEAT_INTERVAL = ::T.let(nil, ::T.untyped)
end

module ActionCable::SubscriptionAdapter
end

class ActionCable::SubscriptionAdapter::Base
  def broadcast(channel, payload); end

  def initialize(server); end

  def logger(); end

  def server(); end

  def shutdown(); end

  def subscribe(channel, message_callback, success_callback=T.unsafe(nil)); end

  def unsubscribe(channel, message_callback); end
end

class ActionCable::SubscriptionAdapter::Base
end

module ActionCable::SubscriptionAdapter::ChannelPrefix
  def broadcast(channel, payload); end

  def subscribe(channel, callback, success_callback=T.unsafe(nil)); end

  def unsubscribe(channel, callback); end
end

module ActionCable::SubscriptionAdapter::ChannelPrefix
end

class ActionCable::SubscriptionAdapter::SubscriberMap
  def add_channel(channel, on_success); end

  def add_subscriber(channel, subscriber, on_success); end

  def broadcast(channel, message); end

  def invoke_callback(callback, message); end

  def remove_channel(channel); end

  def remove_subscriber(channel, subscriber); end
end

class ActionCable::SubscriptionAdapter::SubscriberMap
end

module ActionCable::SubscriptionAdapter
  extend ::ActiveSupport::Autoload
end

module ActionCable::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

class ActionController::API
  include ::ActionController::RespondWith
  include ::Devise::Controllers::Helpers
  include ::Devise::Controllers::SignInOut
  include ::Devise::Controllers::StoreLocation
  include ::Devise::Controllers::UrlHelpers
  def mimes_for_respond_to(); end

  def mimes_for_respond_to=(val); end

  def mimes_for_respond_to?(); end

  def responder(); end

  def responder=(val); end

  def responder?(); end
  MODULES = ::T.let(nil, ::T.untyped)
end

class ActionController::API
  extend ::ActionController::RespondWith::ClassMethods
  def self.mimes_for_respond_to(); end

  def self.mimes_for_respond_to=(val); end

  def self.mimes_for_respond_to?(); end

  def self.responder(); end

  def self.responder=(val); end

  def self.responder?(); end
end

class ActionController::Base
  include ::ActionController::RespondWith
  include ::CanCan::ControllerAdditions
  include ::Devise::Controllers::Helpers
  include ::Devise::Controllers::SignInOut
  include ::Devise::Controllers::StoreLocation
  include ::Devise::Controllers::UrlHelpers
  def mimes_for_respond_to(); end

  def mimes_for_respond_to=(val); end

  def mimes_for_respond_to?(); end

  def responder(); end

  def responder=(val); end

  def responder?(); end
  MODULES = ::T.let(nil, ::T.untyped)
  PROTECTED_IVARS = ::T.let(nil, ::T.untyped)
end

class ActionController::Base
  extend ::Responders::ControllerMethod
  extend ::ActionController::RespondWith::ClassMethods
  def self.inherit_resources(); end

  def self.mimes_for_respond_to(); end

  def self.mimes_for_respond_to=(val); end

  def self.mimes_for_respond_to?(); end

  def self.responder(); end

  def self.responder=(val); end

  def self.responder?(); end
end

module ActionController::DataStreaming
  DEFAULT_SEND_FILE_DISPOSITION = ::T.let(nil, ::T.untyped)
  DEFAULT_SEND_FILE_TYPE = ::T.let(nil, ::T.untyped)
end

module ActionController::ForceSSL
  ACTION_OPTIONS = ::T.let(nil, ::T.untyped)
  REDIRECT_OPTIONS = ::T.let(nil, ::T.untyped)
  URL_OPTIONS = ::T.let(nil, ::T.untyped)
end

module ActionController::HttpAuthentication::Token
  AUTHN_PAIR_DELIMITERS = ::T.let(nil, ::T.untyped)
  TOKEN_KEY = ::T.let(nil, ::T.untyped)
  TOKEN_REGEX = ::T.let(nil, ::T.untyped)
end

module ActionController::Live
  include ::Raven::Rails::Overrides::StreamingReporter
end

class ActionController::Live::SSE
  WHITELISTED_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActionController::LogSubscriber
  def exist_fragment?(event); end

  def expire_fragment(event); end

  def expire_page(event); end

  def halted_callback(event); end

  def process_action(event); end

  def read_fragment(event); end

  def redirect_to(event); end

  def send_data(event); end

  def send_file(event); end

  def start_processing(event); end

  def unpermitted_parameters(event); end

  def write_fragment(event); end

  def write_page(event); end
  INTERNAL_PARAMS = ::T.let(nil, ::T.untyped)
end

class ActionController::MiddlewareStack
  EXCLUDE = ::T.let(nil, ::T.untyped)
  INCLUDE = ::T.let(nil, ::T.untyped)
  NULL = ::T.let(nil, ::T.untyped)
end

class ActionController::Parameters
  EMPTY_ARRAY = ::T.let(nil, ::T.untyped)
  EMPTY_HASH = ::T.let(nil, ::T.untyped)
  PERMITTED_SCALAR_TYPES = ::T.let(nil, ::T.untyped)
end

module ActionController::ParamsWrapper
  EXCLUDE_PARAMETERS = ::T.let(nil, ::T.untyped)
end

class ActionController::Renderer
  DEFAULTS = ::T.let(nil, ::T.untyped)
  IDENTITY = ::T.let(nil, ::T.untyped)
  RACK_KEY_TRANSLATION = ::T.let(nil, ::T.untyped)
  RACK_VALUE_TRANSLATION = ::T.let(nil, ::T.untyped)
end

module ActionController::Renderers
  RENDERERS = ::T.let(nil, ::T.untyped)
end

module ActionController::Rendering
  RENDER_FORMATS_IN_PRIORITY = ::T.let(nil, ::T.untyped)
end

module ActionController::RequestForgeryProtection
  AUTHENTICITY_TOKEN_LENGTH = ::T.let(nil, ::T.untyped)
  NULL_ORIGIN_MESSAGE = ::T.let(nil, ::T.untyped)
end

module ActionController::RespondWith
  def collect_mimes_from_class_level(); end

  def respond_with(*resources, &block); end

  def verify_request_format!(); end

  def verify_requested_format!(); end
end

module ActionController::RespondWith::ClassMethods
  def clear_respond_to(); end

  def respond_to(*mimes); end
end

module ActionController::RespondWith::ClassMethods
end

module ActionController::RespondWith
  extend ::ActiveSupport::Concern
end

class ActionController::Responder
  def api_behavior(); end

  def api_location(); end

  def controller(); end

  def default_action(); end

  def default_render(); end

  def delete?(*args, &block); end

  def display(resource, given_options=T.unsafe(nil)); end

  def display_errors(); end

  def format(); end

  def get?(*args, &block); end

  def has_errors?(); end

  def has_renderer?(); end

  def has_view_rendering?(); end

  def head(*args, &block); end

  def initialize(controller, resources, options=T.unsafe(nil)); end

  def json_resource_errors(); end

  def navigation_behavior(error); end

  def navigation_location(); end

  def options(); end

  def patch?(*args, &block); end

  def post?(*args, &block); end

  def put?(*args, &block); end

  def redirect_to(*args, &block); end

  def render(*args, &block); end

  def rendering_options(); end

  def request(); end

  def resource(); end

  def resource_errors(); end

  def resource_location(); end

  def resources(); end

  def respond(); end

  def response_overridden?(); end

  def to_format(); end

  def to_html(); end

  def to_js(); end
  DEFAULT_ACTIONS_FOR_VERBS = ::T.let(nil, ::T.untyped)
end

class ActionController::Responder
  def self.call(*args); end
end

class ActionController::SessionOverflowError
  DEFAULT_MESSAGE = ::T.let(nil, ::T.untyped)
end

class ActionController::TestRequest
  DEFAULT_ENV = ::T.let(nil, ::T.untyped)
  ENCODER = ::T.let(nil, ::T.untyped)
end

class ActionController::TestSession
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::AssertionResponse
  def code(); end

  def code_and_name(); end

  def initialize(code_or_name); end

  def name(); end
  GENERIC_RESPONSE_CODES = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::AssertionResponse
end

module ActionDispatch::Assertions::ResponseAssertions
  RESPONSE_PREDICATES = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::ContentSecurityPolicy::Middleware
  CONTENT_TYPE = ::T.let(nil, ::T.untyped)
  POLICY = ::T.let(nil, ::T.untyped)
  POLICY_REPORT_ONLY = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::ContentSecurityPolicy::Request
  NONCE = ::T.let(nil, ::T.untyped)
  NONCE_GENERATOR = ::T.let(nil, ::T.untyped)
  POLICY = ::T.let(nil, ::T.untyped)
  POLICY_REPORT_ONLY = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Cookies
  AUTHENTICATED_ENCRYPTED_COOKIE_SALT = ::T.let(nil, ::T.untyped)
  COOKIES_DIGEST = ::T.let(nil, ::T.untyped)
  COOKIES_ROTATIONS = ::T.let(nil, ::T.untyped)
  COOKIES_SERIALIZER = ::T.let(nil, ::T.untyped)
  ENCRYPTED_COOKIE_CIPHER = ::T.let(nil, ::T.untyped)
  ENCRYPTED_COOKIE_SALT = ::T.let(nil, ::T.untyped)
  ENCRYPTED_SIGNED_COOKIE_SALT = ::T.let(nil, ::T.untyped)
  GENERATOR_KEY = ::T.let(nil, ::T.untyped)
  HTTP_HEADER = ::T.let(nil, ::T.untyped)
  MAX_COOKIE_SIZE = ::T.let(nil, ::T.untyped)
  SECRET_KEY_BASE = ::T.let(nil, ::T.untyped)
  SECRET_TOKEN = ::T.let(nil, ::T.untyped)
  SIGNED_COOKIE_DIGEST = ::T.let(nil, ::T.untyped)
  SIGNED_COOKIE_SALT = ::T.let(nil, ::T.untyped)
  USE_AUTHENTICATED_COOKIE_ENCRYPTION = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Cookies::CookieJar
  include ::ActionDispatch::Cookies::ChainedCookieJars
  DOMAIN_REGEXP = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Cookies::SerializedCookieJars
  MARSHAL_SIGNATURE = ::T.let(nil, ::T.untyped)
end

ActionDispatch::Cookies::SerializedCookieJars::SERIALIZER = ActiveSupport::MessageEncryptor::NullSerializer

class ActionDispatch::DebugExceptions
  include ::Raven::Rails::Overrides::DebugExceptionsCatcher
  RESCUES_TEMPLATE_PATH = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::DebugLocks
  def call(env); end

  def initialize(app, path=T.unsafe(nil)); end
end

class ActionDispatch::DebugLocks
end

class ActionDispatch::Flash
  KEY = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Http::Cache::Request
  HTTP_IF_MODIFIED_SINCE = ::T.let(nil, ::T.untyped)
  HTTP_IF_NONE_MATCH = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Http::Cache::Response
  DATE = ::T.let(nil, ::T.untyped)
  DEFAULT_CACHE_CONTROL = ::T.let(nil, ::T.untyped)
  LAST_MODIFIED = ::T.let(nil, ::T.untyped)
  MUST_REVALIDATE = ::T.let(nil, ::T.untyped)
  NO_CACHE = ::T.let(nil, ::T.untyped)
  PRIVATE = ::T.let(nil, ::T.untyped)
  PUBLIC = ::T.let(nil, ::T.untyped)
  SPECIAL_KEYS = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Http::FilterParameters
  ENV_MATCH = ::T.let(nil, ::T.untyped)
  KV_RE = ::T.let(nil, ::T.untyped)
  NULL_ENV_FILTER = ::T.let(nil, ::T.untyped)
  NULL_PARAM_FILTER = ::T.let(nil, ::T.untyped)
  PAIR_RE = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Http::FilterRedirect
  FILTERED = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Http::Headers
  CGI_VARIABLES = ::T.let(nil, ::T.untyped)
  DEFAULT = ::T.let(nil, ::T.untyped)
  HTTP_HEADER = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Http::MimeNegotiation
  BROWSER_LIKE_ACCEPTS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Http::ParameterFilter
  FILTERED = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Http::Parameters
  DEFAULT_PARSERS = ::T.let(nil, ::T.untyped)
  PARAMETERS_KEY = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Http::URL
  HOST_REGEXP = ::T.let(nil, ::T.untyped)
  IP_HOST_REGEXP = ::T.let(nil, ::T.untyped)
  PROTOCOL_REGEXP = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Integration::Runner
  APP_SESSIONS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Integration::Session
  include ::ActionDispatch::Assertions
  include ::ActionDispatch::Assertions::ResponseAssertions
  include ::ActionDispatch::Assertions::RoutingAssertions
  include ::ActionDispatch::Integration::RequestHelpers
  DEFAULT_HOST = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Format
  ESCAPE_PATH = ::T.let(nil, ::T.untyped)
  ESCAPE_SEGMENT = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Journey::Formatter::RegexCaseComparator
  DEFAULT_INPUT = ::T.let(nil, ::T.untyped)
  DEFAULT_REGEX = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::GTG::Builder
  DUMMY = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Nodes::Symbol
  DEFAULT_EXP = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Parser
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Journey::Route::VerbMatchers
  VERBS = ::T.let(nil, ::T.untyped)
  VERB_TO_CLASS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Router::Utils
  ENCODER = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Router::Utils::UriEncoder
  ALPHA = ::T.let(nil, ::T.untyped)
  DEC2HEX = ::T.let(nil, ::T.untyped)
  DIGIT = ::T.let(nil, ::T.untyped)
  EMPTY = ::T.let(nil, ::T.untyped)
  ENCODE = ::T.let(nil, ::T.untyped)
  ESCAPED = ::T.let(nil, ::T.untyped)
  FRAGMENT = ::T.let(nil, ::T.untyped)
  PATH = ::T.let(nil, ::T.untyped)
  SEGMENT = ::T.let(nil, ::T.untyped)
  SUB_DELIMS = ::T.let(nil, ::T.untyped)
  UNRESERVED = ::T.let(nil, ::T.untyped)
  US_ASCII = ::T.let(nil, ::T.untyped)
  UTF_8 = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Visitors::Dot
  INSTANCE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Visitors::Each
  INSTANCE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Visitors::FunctionalVisitor
  DISPATCH_CACHE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Visitors::String
  INSTANCE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Visitors::Visitor
  DISPATCH_CACHE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::RemoteIp
  TRUSTED_PROXIES = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Request
  include ::ActionDispatch::Flash::RequestMethods
  ACTION_DISPATCH_REQUEST_ID = ::T.let(nil, ::T.untyped)
  ENV_METHODS = ::T.let(nil, ::T.untyped)
  HTTP_METHODS = ::T.let(nil, ::T.untyped)
  HTTP_METHOD_LOOKUP = ::T.let(nil, ::T.untyped)
  LOCALHOST = ::T.let(nil, ::T.untyped)
  RFC2518 = ::T.let(nil, ::T.untyped)
  RFC2616 = ::T.let(nil, ::T.untyped)
  RFC3253 = ::T.let(nil, ::T.untyped)
  RFC3648 = ::T.let(nil, ::T.untyped)
  RFC3744 = ::T.let(nil, ::T.untyped)
  RFC4791 = ::T.let(nil, ::T.untyped)
  RFC5323 = ::T.let(nil, ::T.untyped)
  RFC5789 = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::RequestId
  X_REQUEST_ID = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Response
  CONTENT_TYPE = ::T.let(nil, ::T.untyped)
  LOCATION = ::T.let(nil, ::T.untyped)
  NO_CONTENT_CODES = ::T.let(nil, ::T.untyped)
  NullContentTypeHeader = ::T.let(nil, ::T.untyped)
  SET_COOKIE = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Routing
  HTTP_METHODS = ::T.let(nil, ::T.untyped)
  SEPARATORS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::Mapper
  def as(scope); end

  def authenticate(scope=T.unsafe(nil), block=T.unsafe(nil)); end

  def authenticated(scope=T.unsafe(nil), block=T.unsafe(nil)); end

  def constraints_for(method_to_apply, scope=T.unsafe(nil), block=T.unsafe(nil)); end

  def devise_confirmation(mapping, controllers); end

  def devise_for(*resources); end

  def devise_omniauth_callback(mapping, controllers); end

  def devise_password(mapping, controllers); end

  def devise_registration(mapping, controllers); end

  def devise_scope(scope); end

  def devise_session(mapping, controllers); end

  def devise_unlock(mapping, controllers); end

  def raise_no_devise_method_error!(klass); end

  def raise_no_secret_key(); end

  def set_omniauth_path_prefix!(path_prefix); end

  def unauthenticated(scope=T.unsafe(nil)); end

  def with_devise_exclusive_scope(new_path, new_as, options); end
  URL_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::Mapper::Constraints
  CALL = ::T.let(nil, ::T.untyped)
  SERVE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::Mapper::Mapping
  ANCHOR_CHARACTERS_REGEX = ::T.let(nil, ::T.untyped)
  JOINED_SEPARATORS = ::T.let(nil, ::T.untyped)
  OPTIONAL_FORMAT_REGEX = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Routing::Mapper::Resources
  CANONICAL_ACTIONS = ::T.let(nil, ::T.untyped)
  RESOURCE_OPTIONS = ::T.let(nil, ::T.untyped)
  VALID_ON_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::Mapper::Scope
  NULL = ::T.let(nil, ::T.untyped)
  OPTIONS = ::T.let(nil, ::T.untyped)
  RESOURCE_METHOD_SCOPES = ::T.let(nil, ::T.untyped)
  RESOURCE_SCOPES = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Routing::Mapper::Scoping
  POISON = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::PathRedirect
  URL_PARTS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::RouteSet
  include ::Devise::RouteSet
  DEFAULT_CONFIG = ::T.let(nil, ::T.untyped)
  PATH = ::T.let(nil, ::T.untyped)
  RESERVED_OPTIONS = ::T.let(nil, ::T.untyped)
  UNKNOWN = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::RouteSet::Generator
  PARAMETERIZE = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Routing::RouteSet::MountedHelpers
  def _main_app(); end

  def main_app(); end
end

class ActionDispatch::Routing::RouteWrapper
  include ::Sprockets::Rails::RouteWrapper
  def assets_prefix(); end

  def assets_prefix=(val); end

  def assets_prefix?(); end
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::RouteWrapper
  def self.assets_prefix(); end

  def self.assets_prefix=(val); end

  def self.assets_prefix?(); end
end

class ActionDispatch::Routing::RoutesProxy
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes
  def _routes(); end

  def default_url_options(); end

  def default_url_options=(val); end

  def default_url_options?(); end

  def initialize(routes, scope, helpers, script_namer=T.unsafe(nil)); end

  def routes(); end

  def routes=(routes); end

  def scope(); end

  def scope=(scope); end
end

class ActionDispatch::Routing::RoutesProxy
  def self.default_url_options(); end

  def self.default_url_options=(val); end

  def self.default_url_options?(); end
end

class ActionDispatch::SSL
  def call(env); end

  def initialize(app, redirect: T.unsafe(nil), hsts: T.unsafe(nil), secure_cookies: T.unsafe(nil)); end
  HSTS_EXPIRES_IN = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::SSL
  def self.default_hsts_options(); end
end

class ActionDispatch::Session::CacheStore
  def delete_session(env, sid, options); end

  def write_session(env, sid, session, options); end
end

class ActionDispatch::Session::CacheStore
end

class ActionDispatch::Session::CookieStore::SessionId
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Session::MemCacheStore
  include ::ActionDispatch::Session::Compatibility
  include ::ActionDispatch::Session::StaleSessionCheck
  include ::ActionDispatch::Session::SessionObject
end

class ActionDispatch::Session::MemCacheStore
end

class ActionDispatch::ShowExceptions
  FAILSAFE_RESPONSE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::TestRequest
  DEFAULT_ENV = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::TestResponse
  def error?(); end

  def initialize(*_); end

  def missing?(); end

  def parsed_body(); end

  def success?(); end
end

class ActionDispatch::TestResponse
  def self.from_response(response); end
end

class ActionMailer::Base
  PROTECTED_IVARS = ::T.let(nil, ::T.untyped)
end

class ActionMailer::Base::LateAttachmentsProxy
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class ActionMailer::InlinePreviewInterceptor
  PATTERN = ::T.let(nil, ::T.untyped)
end

class ActionMailer::LogSubscriber
  def deliver(event); end

  def process(event); end

  def receive(event); end
end

class ActionMailer::MessageDelivery
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class ActionMailer::Parameterized::MessageDelivery
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

module ActionMailer::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

module ActionPack::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

module ActionView
  ENCODING_FLAG = ::T.let(nil, ::T.untyped)
end

class ActionView::Base
  include ::ActionView::Context
  include ::ActionView::CompiledTemplates
  include ::ERB::Util
  include ::Kaminari::Helpers::HelperMethods
  include ::Kaminari::Helpers::UrlHelper
  include ::Devise::Controllers::UrlHelpers
  include ::Formtastic::Helpers::FormHelper
  include ::Sprockets::Rails::Helper
  include ::Sprockets::Rails::Utils
  def assets_environment(); end

  def assets_environment=(val); end

  def assets_environment?(); end

  def assets_manifest(); end

  def assets_manifest=(val); end

  def assets_manifest?(); end

  def assets_precompile(); end

  def assets_precompile=(val); end

  def assets_precompile?(); end

  def assets_prefix(); end

  def assets_prefix=(val); end

  def assets_prefix?(); end

  def check_precompiled_asset(); end

  def check_precompiled_asset=(val); end

  def check_precompiled_asset?(); end

  def debug_assets(); end

  def debug_assets=(val); end

  def debug_assets?(); end

  def digest_assets(); end

  def digest_assets=(val); end

  def digest_assets?(); end

  def precompiled_asset_checker(); end

  def precompiled_asset_checker=(val); end

  def precompiled_asset_checker?(); end

  def resolve_assets_with(); end

  def resolve_assets_with=(val); end

  def resolve_assets_with?(); end

  def unknown_asset_fallback(); end

  def unknown_asset_fallback=(val); end

  def unknown_asset_fallback?(); end
end

class ActionView::Base
  def self.assets_environment(); end

  def self.assets_environment=(val); end

  def self.assets_environment?(); end

  def self.assets_manifest(); end

  def self.assets_manifest=(val); end

  def self.assets_manifest?(); end

  def self.assets_precompile(); end

  def self.assets_precompile=(val); end

  def self.assets_precompile?(); end

  def self.assets_prefix(); end

  def self.assets_prefix=(val); end

  def self.assets_prefix?(); end

  def self.check_precompiled_asset(); end

  def self.check_precompiled_asset=(val); end

  def self.check_precompiled_asset?(); end

  def self.debug_assets(); end

  def self.debug_assets=(val); end

  def self.debug_assets?(); end

  def self.digest_assets(); end

  def self.digest_assets=(val); end

  def self.digest_assets?(); end

  def self.precompiled_asset_checker(); end

  def self.precompiled_asset_checker=(val); end

  def self.precompiled_asset_checker?(); end

  def self.resolve_assets_with(); end

  def self.resolve_assets_with=(val); end

  def self.resolve_assets_with?(); end

  def self.unknown_asset_fallback(); end

  def self.unknown_asset_fallback=(val); end

  def self.unknown_asset_fallback?(); end
end

class ActionView::DependencyTracker::ERBTracker
  EXPLICIT_DEPENDENCY = ::T.let(nil, ::T.untyped)
  IDENTIFIER = ::T.let(nil, ::T.untyped)
  LAYOUT_DEPENDENCY = ::T.let(nil, ::T.untyped)
  LAYOUT_HASH_KEY = ::T.let(nil, ::T.untyped)
  PARTIAL_HASH_KEY = ::T.let(nil, ::T.untyped)
  RENDER_ARGUMENTS = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  VARIABLE_OR_METHOD_CHAIN = ::T.let(nil, ::T.untyped)
end

module ActionView::Helpers::AssetUrlHelper
  ASSET_EXTENSIONS = ::T.let(nil, ::T.untyped)
  ASSET_PUBLIC_DIRECTORIES = ::T.let(nil, ::T.untyped)
  URI_REGEXP = ::T.let(nil, ::T.untyped)
end

module ActionView::Helpers::ControllerHelper
  CONTROLLER_DELEGATES = ::T.let(nil, ::T.untyped)
end

module ActionView::Helpers::DateHelper
  MINUTES_IN_QUARTER_YEAR = ::T.let(nil, ::T.untyped)
  MINUTES_IN_THREE_QUARTERS_YEAR = ::T.let(nil, ::T.untyped)
  MINUTES_IN_YEAR = ::T.let(nil, ::T.untyped)
end

module ActionView::Helpers::JavaScriptHelper
  JS_ESCAPE_MAP = ::T.let(nil, ::T.untyped)
end

module ActionView::Helpers::TagHelper
  BOOLEAN_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  PRE_CONTENT_STRINGS = ::T.let(nil, ::T.untyped)
  TAG_PREFIXES = ::T.let(nil, ::T.untyped)
end

module ActionView::Helpers::UrlHelper
  BUTTON_TAG_METHOD_VERBS = ::T.let(nil, ::T.untyped)
  STRINGIFIED_COMMON_METHODS = ::T.let(nil, ::T.untyped)
end

class ActionView::LogSubscriber
  include ::Kaminari::ActionViewExtension::LogSubscriberSilencer
  def render_collection(event); end

  def render_template(event); end
  EMPTY = ::T.let(nil, ::T.untyped)
  VIEWS_PATTERN = ::T.let(nil, ::T.untyped)
end

module ActionView::LookupContext::Accessors
  DEFAULT_PROCS = ::T.let(nil, ::T.untyped)
end

class ActionView::OutputBuffer
  def append=(value); end

  def initialize(*_); end

  def safe_append=(value); end

  def safe_expr_append=(val); end
end

class ActionView::OutputBuffer
end

class ActionView::OutputFlow
  def append(key, value); end

  def append!(key, value); end

  def content(); end

  def get(key); end

  def set(key, value); end
end

class ActionView::OutputFlow
end

class ActionView::PartialRenderer
  IDENTIFIER_ERROR_MESSAGE = ::T.let(nil, ::T.untyped)
  OPTION_AS_ERROR_MESSAGE = ::T.let(nil, ::T.untyped)
  PREFIXED_PARTIAL_NAMES = ::T.let(nil, ::T.untyped)
end

class ActionView::PathResolver
  DEFAULT_PATTERN = ::T.let(nil, ::T.untyped)
  EXTENSIONS = ::T.let(nil, ::T.untyped)
end

module ActionView::RecordIdentifier
  JOIN = ::T.let(nil, ::T.untyped)
  NEW = ::T.let(nil, ::T.untyped)
end

class ActionView::Renderer
  def cache_hits(); end

  def initialize(lookup_context); end

  def lookup_context(); end

  def lookup_context=(lookup_context); end

  def render(context, options); end

  def render_body(context, options); end

  def render_partial(context, options, &block); end

  def render_template(context, options); end
end

class ActionView::Renderer
end

class ActionView::Resolver::Cache
  KEY_BLOCK = ::T.let(nil, ::T.untyped)
  NAME_BLOCK = ::T.let(nil, ::T.untyped)
  NO_TEMPLATES = ::T.let(nil, ::T.untyped)
  PARTIAL_BLOCK = ::T.let(nil, ::T.untyped)
  PREFIX_BLOCK = ::T.let(nil, ::T.untyped)
end

class ActionView::StreamingBuffer
  def <<(value); end

  def append=(value); end

  def concat(value); end

  def html_safe(); end

  def initialize(block); end

  def safe_append=(value); end

  def safe_concat(value); end
end

class ActionView::StreamingBuffer
end

class ActionView::StreamingFlow
  def initialize(view, fiber); end
end

class ActionView::StreamingFlow
end

class ActionView::StreamingTemplateRenderer::Body
  include ::Raven::Rails::Overrides::StreamingReporter
end

class ActionView::Template
  Finalizer = ::T.let(nil, ::T.untyped)
end

class ActionView::Template::Error
  SOURCE_CODE_RADIUS = ::T.let(nil, ::T.untyped)
end

class ActionView::Template::HTML
  def formats(); end

  def identifier(); end

  def initialize(string, type=T.unsafe(nil)); end

  def render(*args); end

  def to_str(); end

  def type(); end

  def type=(type); end
end

class ActionView::Template::HTML
end

class ActionView::Template::Handlers::ERB
  ENCODING_TAG = ::T.let(nil, ::T.untyped)
end

class ActionView::Template::Handlers::ERB::Erubi
  BLOCK_EXPR = ::T.let(nil, ::T.untyped)
end

class ActionView::Template::Text
  def formats(); end

  def identifier(); end

  def initialize(string); end

  def render(*args); end

  def to_str(); end

  def type(); end

  def type=(type); end
end

class ActionView::Template::Text
end

class ActionView::Template::Types::Type
  SET = ::T.let(nil, ::T.untyped)
end

class ActionView::TestCase
  include ::Rails::Dom::Testing::Assertions
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions::CountDescribable
  include ::ActionDispatch::Assertions
  include ::ActionDispatch::Assertions::ResponseAssertions
  include ::ActionDispatch::Assertions::RoutingAssertions
  include ::AbstractController::Helpers
  include ::ActionView::Helpers::AssetTagHelper
  include ::ActionView::Helpers::UrlHelper
  include ::ActionView::Helpers::FormTagHelper
  include ::ActionView::Helpers::FormHelper
  include ::ActionView::Helpers::TranslationHelper
  include ::ActionView::Helpers
  include ::ActiveSupport::Benchmarkable
  include ::ActionView::Helpers::ActiveModelHelper
  include ::ActionView::Helpers::AssetUrlHelper
  include ::ActionView::Helpers::AtomFeedHelper
  include ::ActionView::Helpers::CacheHelper
  include ::ActionView::Helpers::ControllerHelper
  include ::ActionView::Helpers::CspHelper
  include ::ActionView::Helpers::CsrfHelper
  include ::ActionView::Helpers::DateHelper
  include ::ActionView::Helpers::DebugHelper
  include ::ActionView::Helpers::FormOptionsHelper
  include ::ActionView::Helpers::SanitizeHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::TextHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::JavaScriptHelper
  include ::ActionView::Helpers::NumberHelper
  include ::ActionView::Helpers::RecordTagHelper
  include ::ActionView::Helpers::RenderingHelper
  include ::ActiveSupport::Testing::ConstantLookup
  include ::ActionView::TestCase::Behavior
  include ::ActionDispatch::TestProcess
  include ::ActionDispatch::TestProcess::FixtureFile
  include ::ActionController::TemplateAssertions
  include ::ActionView::Context
  include ::ActionView::CompiledTemplates
  include ::ActionView::RecordIdentifier
  include ::ActionView::ModelNaming
  include ::ActionView::RoutingUrlFor
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes
  def _helper_methods(); end

  def _helper_methods=(val); end

  def _helper_methods?(); end

  def _helpers(); end

  def _helpers=(val); end

  def _helpers?(); end

  def debug_missing_translation(); end

  def debug_missing_translation=(obj); end
end

module ActionView::TestCase::Behavior
  include ::ActionDispatch::TestProcess
  include ::ActionDispatch::TestProcess::FixtureFile
  include ::ActionController::TemplateAssertions
  include ::ActionView::Context
  include ::ActionView::CompiledTemplates
  include ::ActionView::RecordIdentifier
  include ::ActionView::ModelNaming
  include ::ActionView::RoutingUrlFor
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes
  def _routes(); end

  def config(); end

  def controller(); end

  def controller=(controller); end

  def lookup_context(*args, &block); end

  def output_buffer(); end

  def output_buffer=(output_buffer); end

  def render(options=T.unsafe(nil), local_assigns=T.unsafe(nil), &block); end

  def rendered(); end

  def rendered=(rendered); end

  def rendered_views(); end

  def setup_with_controller(); end
  INTERNAL_IVARS = ::T.let(nil, ::T.untyped)
end

module ActionView::TestCase::Behavior::ClassMethods
  def determine_default_helper_class(name); end

  def helper_class(); end

  def helper_class=(helper_class); end

  def helper_method(*methods); end

  def new(*_); end

  def tests(helper_class); end
end

module ActionView::TestCase::Behavior::ClassMethods
end

module ActionView::TestCase::Behavior::Locals
  def render(options=T.unsafe(nil), local_assigns=T.unsafe(nil)); end

  def rendered_views(); end

  def rendered_views=(rendered_views); end
end

module ActionView::TestCase::Behavior::Locals
end

class ActionView::TestCase::Behavior::RenderedViewsCollection
  def add(view, locals); end

  def locals_for(view); end

  def rendered_views(); end

  def view_rendered?(view, expected_locals); end
end

class ActionView::TestCase::Behavior::RenderedViewsCollection
end

module ActionView::TestCase::Behavior
  extend ::ActiveSupport::Concern
end

class ActionView::TestCase::TestController
  include ::ActionDispatch::TestProcess
  include ::ActionDispatch::TestProcess::FixtureFile
  def controller_path=(path); end

  def initialize(); end

  def params=(params); end
end

class ActionView::TestCase::TestController
  def self.controller_path=(controller_path); end
end

class ActionView::TestCase
  extend ::AbstractController::Helpers::ClassMethods
  extend ::ActionView::TestCase::Behavior::ClassMethods
  def self._helper_methods(); end

  def self._helper_methods=(val); end

  def self._helper_methods?(); end

  def self._helpers(); end

  def self._helpers=(val); end

  def self._helpers?(); end

  def self.debug_missing_translation(); end

  def self.debug_missing_translation=(obj); end
end

module ActionView::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

module ActiveAdmin
  DEFAULT_MENU = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class ActiveAdmin::AbstractViewFactory
  def [](key); end

  def []=(key, value); end

  def default_for(key); end

  def register(view_hash); end
end

class ActiveAdmin::AbstractViewFactory
  def self.add_writer(name); end

  def self.register(view_hash); end
end

class ActiveAdmin::AccessDenied
  def action(); end

  def initialize(user, action, subject=T.unsafe(nil)); end

  def subject(); end

  def user(); end
end

class ActiveAdmin::AccessDenied
end

class ActiveAdmin::ActionItem
  include ::ActiveAdmin::OptionalDisplay
  def block(); end

  def block=(block); end

  def html_class(); end

  def initialize(name, options=T.unsafe(nil), &block); end

  def name(); end

  def name=(name); end

  def priority(); end
end

class ActiveAdmin::ActionItem
end

class ActiveAdmin::Application
  include ::ActiveAdmin::AssetRegistration
  def after_action(*args, &block); end

  def append_after_action(*args, &block); end

  def append_around_action(*args, &block); end

  def append_before_action(*args, &block); end

  def around_action(*args, &block); end

  def before_action(*args, &block); end

  def controllers_for_filters(); end

  def files(); end

  def load(file); end

  def load!(); end

  def loaded?(); end

  def method_missing(method, *args); end

  def namespace(name); end

  def namespace_settings(); end

  def namespaces(); end

  def prepare!(); end

  def prepend_after_action(*args, &block); end

  def prepend_around_action(*args, &block); end

  def prepend_before_action(*args, &block); end

  def register(resource, options=T.unsafe(nil), &block); end

  def register_page(name, options=T.unsafe(nil), &block); end

  def routes(rails_router); end

  def settings(); end

  def setup!(); end

  def skip_after_action(*args, &block); end

  def skip_around_action(*args, &block); end

  def skip_before_action(*args, &block); end

  def unload!(); end
  AfterLoadEvent = ::T.let(nil, ::T.untyped)
  BeforeLoadEvent = ::T.let(nil, ::T.untyped)
end

class ActiveAdmin::Application
  def self.inheritable_setting(name, default); end

  def self.setting(name, default); end
end

class ActiveAdmin::ApplicationSettings
  def app_path(); end

  def app_path=(val); end

  def app_path?(); end

  def default_namespace(); end

  def default_namespace=(val); end

  def default_namespace?(); end

  def disable_streaming_in(); end

  def disable_streaming_in=(val); end

  def disable_streaming_in?(); end

  def display_name_methods(); end

  def display_name_methods=(val); end

  def display_name_methods?(); end

  def filter_attributes(); end

  def filter_attributes=(val); end

  def filter_attributes?(); end

  def load_paths(); end

  def load_paths=(val); end

  def load_paths?(); end

  def localize_format(); end

  def localize_format=(val); end

  def localize_format?(); end
end

class ActiveAdmin::ApplicationSettings
  def self.app_path(); end

  def self.app_path=(val); end

  def self.app_path?(); end

  def self.default_namespace(); end

  def self.default_namespace=(val); end

  def self.default_namespace?(); end

  def self.disable_streaming_in(); end

  def self.disable_streaming_in=(val); end

  def self.disable_streaming_in?(); end

  def self.display_name_methods(); end

  def self.display_name_methods=(val); end

  def self.display_name_methods?(); end

  def self.filter_attributes(); end

  def self.filter_attributes=(val); end

  def self.filter_attributes?(); end

  def self.load_paths(); end

  def self.load_paths=(val); end

  def self.load_paths?(); end

  def self.localize_format(); end

  def self.localize_format=(val); end

  def self.localize_format?(); end
end

module ActiveAdmin::AssetRegistration
  def clear_javascripts!(); end

  def clear_stylesheets!(); end

  def javascripts(); end

  def register_javascript(name); end

  def register_stylesheet(path, options=T.unsafe(nil)); end

  def stylesheets(); end
end

module ActiveAdmin::AssetRegistration
end

ActiveAdmin::Auth = ActiveAdmin::Authorization

module ActiveAdmin::Authorization
  CREATE = ::T.let(nil, ::T.untyped)
  DESTROY = ::T.let(nil, ::T.untyped)
  READ = ::T.let(nil, ::T.untyped)
  UPDATE = ::T.let(nil, ::T.untyped)
end

module ActiveAdmin::Authorization
end

class ActiveAdmin::AuthorizationAdapter
  def authorized?(action, subject=T.unsafe(nil)); end

  def initialize(resource, user); end

  def resource(); end

  def scope_collection(collection, action=T.unsafe(nil)); end

  def user(); end
end

class ActiveAdmin::AuthorizationAdapter::NormalizedMatcher
  def ===(other); end

  def initialize(klass); end
end

class ActiveAdmin::AuthorizationAdapter::NormalizedMatcher
end

class ActiveAdmin::AuthorizationAdapter
end

class ActiveAdmin::BaseController
  include ::ActiveAdmin::BaseController::Authorization
  include ::ActiveAdmin::BaseController::Menu
  def _collection_params(*given_args); end

  def _edit_resource_params(*given_args); end

  def _new_resource_params(*given_args); end

  def _resource_params(*given_args); end

  def collection_path(*given_args); end

  def collection_url(*given_args); end

  def edit_resource_path(*given_args); end

  def edit_resource_url(*given_args); end

  def new_resource_path(*given_args); end

  def new_resource_url(*given_args); end

  def resource_path(*given_args); end

  def resource_url(*given_args); end
  ACTIVE_ADMIN_ACTIONS = ::T.let(nil, ::T.untyped)
end

module ActiveAdmin::BaseController::Authorization
  def action_to_permission(action); end

  def active_admin_authorization(); end

  def active_admin_authorization_adapter(); end

  def authorize!(action, subject=T.unsafe(nil)); end

  def authorize_resource!(resource); end

  def authorized?(action, subject=T.unsafe(nil)); end

  def dispatch_active_admin_access_denied(exception); end

  def redirect_backwards_or_to_root(); end

  def rescue_active_admin_access_denied(exception); end
  ACTIONS_DICTIONARY = ::T.let(nil, ::T.untyped)
end

module ActiveAdmin::BaseController::Authorization
  extend ::ActiveSupport::Concern
end

module ActiveAdmin::BaseController::Menu
  def current_menu(); end

  def set_current_tab(); end
end

module ActiveAdmin::BaseController::Menu
  extend ::ActiveSupport::Concern
end

class ActiveAdmin::BaseController
  def self.active_admin_config(); end

  def self.active_admin_config=(active_admin_config); end
end

class ActiveAdmin::BatchAction
  include ::Comparable
  def block(); end

  def confirm(); end

  def display_if_block(); end

  def initialize(sym, title, options=T.unsafe(nil), &block); end

  def inputs(); end

  def priority(); end

  def sym(); end

  def title(); end
  DEFAULT_CONFIRM_MESSAGE = ::T.let(nil, ::T.untyped)
end

class ActiveAdmin::BatchAction
end

module ActiveAdmin::BatchActions
end

class ActiveAdmin::BatchActions::BatchActionForm
  def build(options=T.unsafe(nil), &block); end

  def prefix_html(); end
end

class ActiveAdmin::BatchActions::BatchActionForm
end

class ActiveAdmin::BatchActions::BatchActionSelector
  def build(batch_actions); end
end

class ActiveAdmin::BatchActions::BatchActionSelector
end

module ActiveAdmin::BatchActions::Controller
  def action_present?(); end

  def batch_action(); end

  def batch_action_collection(only=T.unsafe(nil)); end

  def current_batch_action(); end
  COLLECTION_APPLIES = ::T.let(nil, ::T.untyped)
end

module ActiveAdmin::BatchActions::Controller
end

module ActiveAdmin::BatchActions::ResourceExtension
  def add_batch_action(sym, title, options=T.unsafe(nil), &block); end

  def batch_actions(); end

  def batch_actions=(bool); end

  def batch_actions_enabled?(); end

  def clear_batch_actions!(); end

  def initialize(*_); end

  def remove_batch_action(sym); end
end

module ActiveAdmin::BatchActions::ResourceExtension
end

class ActiveAdmin::BatchActions::ResourceSelectionCell
  def build(resource); end
end

class ActiveAdmin::BatchActions::ResourceSelectionCell
end

class ActiveAdmin::BatchActions::ResourceSelectionToggleCell
  def build(label_text=T.unsafe(nil)); end
end

class ActiveAdmin::BatchActions::ResourceSelectionToggleCell
end

class ActiveAdmin::BatchActions::ResourceSelectionTogglePanel
  def build(); end
end

class ActiveAdmin::BatchActions::ResourceSelectionTogglePanel
end

module ActiveAdmin::BatchActions
end

class ActiveAdmin::CSVBuilder
  def build(controller, csv); end

  def build_row(resource, columns, options); end

  def column(name, options=T.unsafe(nil), &block); end

  def columns(); end

  def encode(content, options); end

  def exec_columns(view_context=T.unsafe(nil)); end

  def initialize(options=T.unsafe(nil), &block); end

  def method_missing(method, *args, &block); end

  def options(); end

  def view_context(); end
  COLUMN_TRANSITIVE_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActiveAdmin::CSVBuilder::Column
  def data(); end

  def humanize_name(name, resource, humanize_name_option); end

  def initialize(name, resource=T.unsafe(nil), options=T.unsafe(nil), block=T.unsafe(nil)); end

  def name(); end

  def options(); end
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActiveAdmin::CSVBuilder::Column
end

class ActiveAdmin::CSVBuilder
  def self.default_for_resource(resource); end
end

module ActiveAdmin::Callbacks
end

module ActiveAdmin::Callbacks::ClassMethods
end

module ActiveAdmin::Callbacks::ClassMethods
end

module ActiveAdmin::Callbacks
  extend ::ActiveSupport::Concern
end

class ActiveAdmin::CanCanAdapter
  def cancan_ability(); end
end

class ActiveAdmin::CanCanAdapter
end

class ActiveAdmin::Comment
  include ::Kaminari::ActiveRecordModelExtension
  include ::Kaminari::ConfigurationMethods
  def autosave_associated_records_for_author(*args); end

  def autosave_associated_records_for_resource(*args); end

  def belongs_to_counter_cache_after_update(reflection); end

  def set_resource_type(); end
end

class ActiveAdmin::Comment::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::ActiveAdmin::Comment::GeneratedRelationMethods
end

class ActiveAdmin::Comment::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::ActiveAdmin::Comment::GeneratedRelationMethods
end

class ActiveAdmin::Comment::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::ActiveAdmin::Comment::GeneratedRelationMethods
end

module ActiveAdmin::Comment::GeneratedAssociationMethods
  def reload_author(); end

  def reload_resource(); end
end

module ActiveAdmin::Comment::GeneratedRelationMethods
end

module ActiveAdmin::Comment::GeneratedRelationMethods
end

class ActiveAdmin::Comment
  extend ::Kaminari::ConfigurationMethods::ClassMethods
  def self.find_for_resource_in_namespace(resource, namespace); end

  def self.page(num=T.unsafe(nil)); end

  def self.resource_type(resource); end
end

module ActiveAdmin::Comments
end

module ActiveAdmin::Comments::NamespaceHelper
  def comments?(); end
end

module ActiveAdmin::Comments::NamespaceHelper
end

module ActiveAdmin::Comments::ResourceHelper
  def comments?(); end
end

module ActiveAdmin::Comments::ResourceHelper
  extend ::ActiveSupport::Concern
end

module ActiveAdmin::Comments::ShowPageHelper
  def active_admin_comments(*args, &block); end

  def default_main_content(); end
end

module ActiveAdmin::Comments::ShowPageHelper
end

module ActiveAdmin::Comments::Views
end

class ActiveAdmin::Comments::Views::Comments
  def build(resource); end

  def build_comment(comment); end

  def build_comment_form(); end

  def build_comments(); end

  def build_empty_message(); end

  def comment_form_url(); end

  def comments_url(*args); end

  def resource(); end

  def resource=(resource); end

  def title(); end
end

class ActiveAdmin::Comments::Views::Comments
end

module ActiveAdmin::Comments::Views
end

module ActiveAdmin::Comments
end

class ActiveAdmin::Component
end

class ActiveAdmin::Component
end

class ActiveAdmin::ControllerAction
  def http_verb(); end

  def initialize(name, options=T.unsafe(nil)); end

  def name(); end
end

class ActiveAdmin::ControllerAction
end

class ActiveAdmin::DSL
  def action_item(name, options=T.unsafe(nil), &block); end

  def batch_action(title, options=T.unsafe(nil), &block); end

  def breadcrumb(&block); end

  def config(); end

  def controller(&block); end

  def include(mod); end

  def initialize(config); end

  def menu(options=T.unsafe(nil)); end

  def navigation_menu(menu_name=T.unsafe(nil), &block); end

  def run_registration_block(&block); end

  def sidebar(name, options=T.unsafe(nil), &block); end
end

class ActiveAdmin::DSL
end

class ActiveAdmin::DatabaseHitDuringLoad
  def initialize(exception); end
end

class ActiveAdmin::DatabaseHitDuringLoad
  def self.capture(); end

  def self.database_error_classes(); end
end

module ActiveAdmin::Dependency
end

class ActiveAdmin::Dependency::Matcher
  include ::Comparable
  def initialize(name); end

  def match!(*reqs); end

  def match?(*reqs); end

  def name(); end

  def spec(); end

  def spec!(); end
end

class ActiveAdmin::Dependency::Matcher
end

module ActiveAdmin::Dependency::Requirements
  DEVISE = ::T.let(nil, ::T.untyped)
end

module ActiveAdmin::Dependency::Requirements
end

module ActiveAdmin::Dependency
  def self.[](name); end

  def self.method_missing(name, *args); end

  def self.supports_zeitwerk?(); end
end

class ActiveAdmin::DependencyError
end

class ActiveAdmin::DependencyError
end

module ActiveAdmin::Deprecation
end

module ActiveAdmin::Deprecation
  def self.warn(message, callstack=T.unsafe(nil)); end
end

module ActiveAdmin::Devise
end

class ActiveAdmin::Devise::ConfirmationsController
  include ::ActiveAdmin::Devise::Controller
end

class ActiveAdmin::Devise::ConfirmationsController
end

module ActiveAdmin::Devise::Controller
  def root_path(); end
end

module ActiveAdmin::Devise::Controller
  extend ::ActiveSupport::Concern
end

class ActiveAdmin::Devise::PasswordsController
  include ::ActiveAdmin::Devise::Controller
end

class ActiveAdmin::Devise::PasswordsController
end

class ActiveAdmin::Devise::RegistrationsController
  include ::ActiveAdmin::Devise::Controller
end

class ActiveAdmin::Devise::RegistrationsController
end

class ActiveAdmin::Devise::SessionsController
  include ::ActiveAdmin::Devise::Controller
end

class ActiveAdmin::Devise::SessionsController
end

class ActiveAdmin::Devise::UnlocksController
  include ::ActiveAdmin::Devise::Controller
end

class ActiveAdmin::Devise::UnlocksController
end

module ActiveAdmin::Devise
  def self.config(); end

  def self.controllers(); end

  def self.controllers_for_filters(); end
end

class ActiveAdmin::DynamicSetting
  def initialize(setting); end

  def value(*_args); end
end

class ActiveAdmin::DynamicSetting
  def self.build(setting, type); end

  def self.klass(type); end
end

class ActiveAdmin::DynamicSettingsNode
end

class ActiveAdmin::DynamicSettingsNode
  def self.add_reader(name); end

  def self.add_writer(name, type); end

  def self.register(name, value, type=T.unsafe(nil)); end
end

class ActiveAdmin::Engine
end

class ActiveAdmin::Engine
end

class ActiveAdmin::Error
end

class ActiveAdmin::Error
end

class ActiveAdmin::ErrorLoading
  def find_cause(folder, backtrace); end
end

class ActiveAdmin::ErrorLoading
end

module ActiveAdmin::Filters
end

class ActiveAdmin::Filters::Active
  def filters(); end

  def filters=(filters); end

  def initialize(resource, search); end

  def resource(); end

  def resource=(resource); end
end

class ActiveAdmin::Filters::Active
end

class ActiveAdmin::Filters::ActiveFilter
  include ::ActiveAdmin::ViewHelpers
  include ::ActiveAdmin::ViewHelpers::ActiveAdminApplicationHelper
  include ::ActiveAdmin::ViewHelpers::AutoLinkHelper
  include ::ActiveAdmin::ViewHelpers::BreadcrumbHelper
  include ::ActiveAdmin::ViewHelpers::DisplayHelper
  include ::MethodOrProcHelper
  include ::ActiveAdmin::ViewHelpers::SidebarHelper
  include ::ActiveAdmin::ViewHelpers::FormHelper
  include ::ActiveAdmin::ViewHelpers::TitleHelper
  include ::ActiveAdmin::ViewHelpers::ViewFactoryHelper
  include ::ActiveAdmin::ViewHelpers::FlashHelper
  include ::ActiveAdmin::ViewHelpers::ScopeNameHelper
  include ::ActiveAdmin::Filters::ViewHelper
  def condition(); end

  def html_options(); end

  def initialize(resource, condition); end

  def label(); end

  def predicate_name(); end

  def related_class(); end

  def resource(); end

  def values(); end
end

class ActiveAdmin::Filters::ActiveFilter
end

class ActiveAdmin::Filters::ActiveSidebar
  def initialize(); end

  def sidebar_options(); end
end

class ActiveAdmin::Filters::ActiveSidebar
end

module ActiveAdmin::Filters::DSL
  def filter(attribute, options=T.unsafe(nil)); end

  def preserve_default_filters!(); end

  def remove_filter(*attributes); end
end

module ActiveAdmin::Filters::DSL
end

class ActiveAdmin::Filters::Disabled
  def initialize(); end
end

class ActiveAdmin::Filters::Disabled
end

class ActiveAdmin::Filters::FormBuilder
  include ::ActiveAdmin::Filters::FormtasticAddons
  def filter(method, options=T.unsafe(nil)); end
end

class ActiveAdmin::Filters::FormBuilder
end

module ActiveAdmin::Filters::FormtasticAddons
  def column(); end

  def column_for(method); end

  def has_predicate?(); end

  def humanized_method_name(); end

  def klass(); end

  def polymorphic_foreign_type?(method); end

  def ransacker?(); end

  def reflection_for(method); end

  def scope?(); end

  def searchable_has_many_through?(); end

  def seems_searchable?(); end
end

module ActiveAdmin::Filters::FormtasticAddons
end

module ActiveAdmin::Filters::ResourceExtension
  def add_filter(attribute, options=T.unsafe(nil)); end

  def current_filters=(bool); end

  def current_filters_enabled?(); end

  def filters(); end

  def filters=(bool); end

  def filters_enabled?(); end

  def initialize(*_); end

  def preserve_default_filters!(); end

  def preserve_default_filters?(); end

  def remove_filter(*attributes); end

  def reset_filters!(); end
end

module ActiveAdmin::Filters::ResourceExtension
end

module ActiveAdmin::Filters::ViewHelper
  def active_admin_filters_form_for(search, filters, options=T.unsafe(nil)); end
end

module ActiveAdmin::Filters::ViewHelper
end

module ActiveAdmin::Filters
end

class ActiveAdmin::FormBuilder
  def already_in_an_inputs_block(); end

  def already_in_an_inputs_block=(already_in_an_inputs_block); end

  def cancel_link(url=T.unsafe(nil), html_options=T.unsafe(nil), li_attrs=T.unsafe(nil)); end

  def has_many(assoc, options=T.unsafe(nil), &block); end
end

class ActiveAdmin::FormBuilder
end

class ActiveAdmin::GeneratorError
end

class ActiveAdmin::GeneratorError
end

class ActiveAdmin::HasManyBuilder
  def allow_destroy?(form_object); end

  def assoc(); end

  def assoc_klass(); end

  def content_has_many(&block); end

  def default_heading(); end

  def destroy_option(); end

  def extract_custom_settings!(options); end

  def has_many_actions(form_builder, contents); end

  def heading(); end

  def initialize(has_many_form, assoc, options); end

  def js_for_has_many(class_string, &form_block); end

  def new_record(); end

  def options(); end

  def render(&block); end

  def render_has_many_form(form_builder, parent, &block); end

  def sortable_column(); end

  def sortable_start(); end

  def sorted_children(column); end

  def without_wrapper(); end

  def wrap_div_or_li(html); end
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class ActiveAdmin::HasManyBuilder
end

module ActiveAdmin::Helpers
end

module ActiveAdmin::Helpers::Collection
  def collection_is_empty?(c=T.unsafe(nil)); end

  def collection_size(c=T.unsafe(nil)); end
end

module ActiveAdmin::Helpers::Collection
end

module ActiveAdmin::Helpers::I18n
  PLURAL_MANY_COUNT = ::T.let(nil, ::T.untyped)
end

module ActiveAdmin::Helpers::I18n
end

module ActiveAdmin::Helpers::Routes
end

module ActiveAdmin::Helpers::Routes::UrlHelpers
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes
  def _routes(); end

  def admin_comment_path(*args); end

  def admin_comment_url(*args); end

  def admin_comments_path(*args); end

  def admin_comments_url(*args); end

  def admin_dashboard_path(*args); end

  def admin_dashboard_url(*args); end

  def admin_purchased_recipe_path(*args); end

  def admin_purchased_recipe_url(*args); end

  def admin_purchased_recipes_path(*args); end

  def admin_purchased_recipes_url(*args); end

  def admin_root_path(*args); end

  def admin_root_url(*args); end

  def api_ingredients_path(*args); end

  def api_ingredients_url(*args); end

  def api_recipes_path(*args); end

  def api_recipes_url(*args); end

  def batch_action_admin_purchased_recipes_path(*args); end

  def batch_action_admin_purchased_recipes_url(*args); end

  def cancel_user_registration_path(*args); end

  def cancel_user_registration_url(*args); end

  def default_url_options=(obj); end

  def destroy_user_session_path(*args); end

  def destroy_user_session_url(*args); end

  def edit_admin_purchased_recipe_path(*args); end

  def edit_admin_purchased_recipe_url(*args); end

  def edit_user_password_path(*args); end

  def edit_user_password_url(*args); end

  def edit_user_registration_path(*args); end

  def edit_user_registration_url(*args); end

  def new_admin_purchased_recipe_path(*args); end

  def new_admin_purchased_recipe_url(*args); end

  def new_user_password_path(*args); end

  def new_user_password_url(*args); end

  def new_user_registration_path(*args); end

  def new_user_registration_url(*args); end

  def new_user_session_path(*args); end

  def new_user_session_url(*args); end

  def new_user_unlock_path(*args); end

  def new_user_unlock_url(*args); end

  def rails_info_path(*args); end

  def rails_info_properties_path(*args); end

  def rails_info_properties_url(*args); end

  def rails_info_routes_path(*args); end

  def rails_info_routes_url(*args); end

  def rails_info_url(*args); end

  def rails_mailers_path(*args); end

  def rails_mailers_url(*args); end

  def root_path(*args); end

  def root_url(*args); end

  def user_password_path(*args); end

  def user_password_url(*args); end

  def user_registration_path(*args); end

  def user_registration_url(*args); end

  def user_session_path(*args); end

  def user_session_url(*args); end

  def user_unlock_path(*args); end

  def user_unlock_url(*args); end
end

module ActiveAdmin::Helpers::Routes::UrlHelpers
  def self._routes(); end

  def self.default_url_options=(obj); end
end

module ActiveAdmin::Helpers::Routes
  extend ::ActiveAdmin::Helpers::Routes::UrlHelpers
  extend ::ActionDispatch::Routing::UrlFor
  extend ::ActionDispatch::Routing::PolymorphicRoutes
  def self.default_url_options(); end
end

module ActiveAdmin::Helpers
end

module ActiveAdmin::Inputs
end

class ActiveAdmin::Inputs::DatepickerInput
end

class ActiveAdmin::Inputs::DatepickerInput
end

module ActiveAdmin::Inputs::Filters
end

module ActiveAdmin::Inputs::Filters::Base
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  include ::ActiveAdmin::Filters::FormtasticAddons
  def collection_from_options(); end

  def input_wrapping(&block); end

  def label_from_options(); end

  def required?(); end

  def wrapper_html_options(); end
end

module ActiveAdmin::Inputs::Filters::Base::SearchMethodSelect
  def current_filter(); end

  def filter_options(); end

  def filters(); end

  def input_html(); end

  def select_html(); end

  def to_html(); end

  def wrapper_html_options(); end
end

module ActiveAdmin::Inputs::Filters::Base::SearchMethodSelect::ClassMethods
  def filter(*filters); end

  def filters(); end
end

module ActiveAdmin::Inputs::Filters::Base::SearchMethodSelect::ClassMethods
end

module ActiveAdmin::Inputs::Filters::Base::SearchMethodSelect
  def self.included(base); end
end

module ActiveAdmin::Inputs::Filters::Base
  extend ::ActiveSupport::Autoload
end

class ActiveAdmin::Inputs::Filters::BooleanInput
  include ::ActiveAdmin::Inputs::Filters::Base
  include ::ActiveAdmin::Filters::FormtasticAddons
end

class ActiveAdmin::Inputs::Filters::BooleanInput
end

class ActiveAdmin::Inputs::Filters::CheckBoxesInput
  include ::ActiveAdmin::Inputs::Filters::Base
  include ::ActiveAdmin::Filters::FormtasticAddons
  def searchable_method_name(); end
end

class ActiveAdmin::Inputs::Filters::CheckBoxesInput
end

class ActiveAdmin::Inputs::Filters::DatePickerInput
  include ::ActiveAdmin::Inputs::Filters::Base
  include ::ActiveAdmin::Filters::FormtasticAddons
end

class ActiveAdmin::Inputs::Filters::DatePickerInput
end

class ActiveAdmin::Inputs::Filters::DateRangeInput
  include ::ActiveAdmin::Inputs::Filters::Base
  include ::ActiveAdmin::Filters::FormtasticAddons
  def gt_input_name(); end

  def gt_input_placeholder(); end

  def input_html_options_for(input_name, placeholder); end

  def lt_input_name(); end

  def lt_input_placeholder(); end
end

class ActiveAdmin::Inputs::Filters::DateRangeInput
end

class ActiveAdmin::Inputs::Filters::NumericInput
  include ::ActiveAdmin::Inputs::Filters::Base
  include ::ActiveAdmin::Filters::FormtasticAddons
  include ::ActiveAdmin::Inputs::Filters::Base::SearchMethodSelect
end

class ActiveAdmin::Inputs::Filters::NumericInput
  extend ::ActiveAdmin::Inputs::Filters::Base::SearchMethodSelect::ClassMethods
end

class ActiveAdmin::Inputs::Filters::SelectInput
  include ::ActiveAdmin::Inputs::Filters::Base
  include ::ActiveAdmin::Filters::FormtasticAddons
  def pluck_column(); end

  def reflection_searchable?(); end

  def searchable_method_name(); end
end

class ActiveAdmin::Inputs::Filters::SelectInput
end

class ActiveAdmin::Inputs::Filters::StringInput
  include ::ActiveAdmin::Inputs::Filters::Base
  include ::ActiveAdmin::Filters::FormtasticAddons
  include ::ActiveAdmin::Inputs::Filters::Base::SearchMethodSelect
end

class ActiveAdmin::Inputs::Filters::StringInput
  extend ::ActiveAdmin::Inputs::Filters::Base::SearchMethodSelect::ClassMethods
end

class ActiveAdmin::Inputs::Filters::TextInput
  include ::ActiveAdmin::Inputs::Filters::Base
  include ::ActiveAdmin::Filters::FormtasticAddons
  include ::ActiveAdmin::Inputs::Filters::Base::SearchMethodSelect
end

class ActiveAdmin::Inputs::Filters::TextInput
  extend ::ActiveAdmin::Inputs::Filters::Base::SearchMethodSelect::ClassMethods
end

module ActiveAdmin::Inputs::Filters
  extend ::ActiveSupport::Autoload
end

module ActiveAdmin::Inputs
  extend ::ActiveSupport::Autoload
end

module ActiveAdmin::Localizers
end

class ActiveAdmin::Localizers::ResourceLocalizer
  def array_to_key(*arr); end

  def initialize(model_name, model=T.unsafe(nil)); end

  def t(key, options=T.unsafe(nil)); end

  def translate(key, options=T.unsafe(nil)); end
end

class ActiveAdmin::Localizers::ResourceLocalizer
  def self.from_resource(resource_config); end

  def self.t(key, options); end

  def self.translate(key, options); end
end

module ActiveAdmin::Localizers
  def self.resource(active_admin_config); end
end

class ActiveAdmin::Menu
  include ::ActiveAdmin::Menu::MenuNode
end

module ActiveAdmin::Menu::MenuNode
  def [](id); end

  def []=(id, child); end

  def add(options); end

  def children(); end

  def current?(item); end

  def include?(item); end

  def initialize(); end

  def items(); end
end

module ActiveAdmin::Menu::MenuNode
end

class ActiveAdmin::Menu
end

class ActiveAdmin::MenuCollection
  def add(menu_name, menu_item_options=T.unsafe(nil)); end

  def before_build(&block); end

  def clear!(); end

  def exists?(menu_name); end

  def fetch(menu_name); end

  def menu(menu_name); end

  def on_build(&block); end
end

class ActiveAdmin::MenuCollection
end

class ActiveAdmin::MenuItem
  include ::ActiveAdmin::Menu::MenuNode
  def html_options(); end

  def id(); end

  def initialize(options=T.unsafe(nil)); end

  def label(); end

  def parent(); end

  def priority(); end

  def should_display(); end

  def url(); end
end

class ActiveAdmin::MenuItem
end

class ActiveAdmin::Model
  def initialize(resource, record); end

  def to_model(); end
end

class ActiveAdmin::Model
end

class ActiveAdmin::Namespace
  include ::ActiveAdmin::Comments::NamespaceHelper
  def add_current_user_to_menu(menu, priority=T.unsafe(nil), html_options=T.unsafe(nil)); end

  def add_logout_button_to_menu(menu, priority=T.unsafe(nil), html_options=T.unsafe(nil)); end

  def application(); end

  def build_default_utility_nav(); end

  def build_menu(name=T.unsafe(nil)); end

  def build_menu_collection(); end

  def build_page(name, options); end

  def fetch_menu(name); end

  def find_or_build_resource(resource_class, options); end

  def initialize(application, name); end

  def menus(); end

  def method_missing(method, *args); end

  def module_name(); end

  def name(); end

  def parse_page_registration_block(config, &block); end

  def parse_registration_block(config, &block); end

  def register(resource_class, options=T.unsafe(nil), &block); end

  def register_module(); end

  def register_page(name, options=T.unsafe(nil), &block); end

  def register_page_controller(config); end

  def register_resource_controller(config); end

  def reset_menu!(); end

  def resource_for(klass); end

  def resources(); end

  def root?(); end

  def route_prefix(); end

  def settings(); end

  def unload!(); end

  def unload_resources!(); end
  RegisterEvent = ::T.let(nil, ::T.untyped)
end

class ActiveAdmin::Namespace::Store
  include ::Enumerable
  def [](*args, &block); end

  def []=(*args, &block); end

  def each(&block); end

  def empty?(*args, &block); end

  def names(); end
end

class ActiveAdmin::Namespace::Store
end

class ActiveAdmin::Namespace
  def self.setting(name, default); end
end

class ActiveAdmin::NamespaceSettings
  def authentication_method_setting(); end

  def authentication_method_setting=(val); end

  def authentication_method_setting?(); end

  def authorization_adapter_setting(); end

  def authorization_adapter_setting=(val); end

  def authorization_adapter_setting?(); end

  def batch_actions_setting(); end

  def batch_actions_setting=(val); end

  def batch_actions_setting?(); end

  def breadcrumb_setting(); end

  def breadcrumb_setting=(val); end

  def breadcrumb_setting?(); end

  def cancan_ability_class_setting(); end

  def cancan_ability_class_setting=(val); end

  def cancan_ability_class_setting?(); end

  def comments_menu_setting(); end

  def comments_menu_setting=(val); end

  def comments_menu_setting?(); end

  def comments_order_setting(); end

  def comments_order_setting=(val); end

  def comments_order_setting?(); end

  def comments_registration_name_setting(); end

  def comments_registration_name_setting=(val); end

  def comments_registration_name_setting?(); end

  def comments_setting(); end

  def comments_setting=(val); end

  def comments_setting?(); end

  def create_another_setting(); end

  def create_another_setting=(val); end

  def create_another_setting?(); end

  def csv_options_setting(); end

  def csv_options_setting=(val); end

  def csv_options_setting?(); end

  def current_filters_setting(); end

  def current_filters_setting=(val); end

  def current_filters_setting?(); end

  def current_user_method_setting(); end

  def current_user_method_setting=(val); end

  def current_user_method_setting?(); end

  def default_per_page_setting(); end

  def default_per_page_setting=(val); end

  def default_per_page_setting?(); end

  def download_links_setting(); end

  def download_links_setting=(val); end

  def download_links_setting?(); end

  def favicon_setting(); end

  def favicon_setting=(val); end

  def favicon_setting?(); end

  def filter_columns_for_large_association_setting(); end

  def filter_columns_for_large_association_setting=(val); end

  def filter_columns_for_large_association_setting?(); end

  def filter_method_for_large_association_setting(); end

  def filter_method_for_large_association_setting=(val); end

  def filter_method_for_large_association_setting?(); end

  def filters_setting(); end

  def filters_setting=(val); end

  def filters_setting?(); end

  def flash_keys_to_except_setting(); end

  def flash_keys_to_except_setting=(val); end

  def flash_keys_to_except_setting?(); end

  def footer_setting(); end

  def footer_setting=(val); end

  def footer_setting?(); end

  def head_setting(); end

  def head_setting=(val); end

  def head_setting?(); end

  def include_default_association_filters_setting(); end

  def include_default_association_filters_setting=(val); end

  def include_default_association_filters_setting?(); end

  def logout_link_method_setting(); end

  def logout_link_method_setting=(val); end

  def logout_link_method_setting?(); end

  def logout_link_path_setting(); end

  def logout_link_path_setting=(val); end

  def logout_link_path_setting?(); end

  def max_per_page_setting(); end

  def max_per_page_setting=(val); end

  def max_per_page_setting?(); end

  def maximum_association_filter_arity_setting(); end

  def maximum_association_filter_arity_setting=(val); end

  def maximum_association_filter_arity_setting?(); end

  def meta_tags_for_logged_out_pages_setting(); end

  def meta_tags_for_logged_out_pages_setting=(val); end

  def meta_tags_for_logged_out_pages_setting?(); end

  def meta_tags_setting(); end

  def meta_tags_setting=(val); end

  def meta_tags_setting?(); end

  def on_unauthorized_access_setting(); end

  def on_unauthorized_access_setting=(val); end

  def on_unauthorized_access_setting?(); end

  def order_clause_setting(); end

  def order_clause_setting=(val); end

  def order_clause_setting?(); end

  def permitted_params_setting(); end

  def permitted_params_setting=(val); end

  def permitted_params_setting?(); end

  def pundit_default_policy_setting(); end

  def pundit_default_policy_setting=(val); end

  def pundit_default_policy_setting?(); end

  def pundit_policy_namespace_setting(); end

  def pundit_policy_namespace_setting=(val); end

  def pundit_policy_namespace_setting?(); end

  def root_to_options_setting(); end

  def root_to_options_setting=(val); end

  def root_to_options_setting?(); end

  def root_to_setting(); end

  def root_to_setting=(val); end

  def root_to_setting?(); end

  def route_options_setting(); end

  def route_options_setting=(val); end

  def route_options_setting?(); end

  def scopes_show_count_setting(); end

  def scopes_show_count_setting=(val); end

  def scopes_show_count_setting?(); end

  def site_title_image_setting(); end

  def site_title_image_setting=(val); end

  def site_title_image_setting?(); end

  def site_title_link_setting(); end

  def site_title_link_setting=(val); end

  def site_title_link_setting?(); end

  def site_title_setting(); end

  def site_title_setting=(val); end

  def site_title_setting?(); end

  def unsupported_browser_matcher_setting(); end

  def unsupported_browser_matcher_setting=(val); end

  def unsupported_browser_matcher_setting?(); end

  def use_webpacker_setting(); end

  def use_webpacker_setting=(val); end

  def use_webpacker_setting?(); end

  def view_factory_setting(); end

  def view_factory_setting=(val); end

  def view_factory_setting?(); end
end

class ActiveAdmin::NamespaceSettings
  def self.authentication_method(*args); end

  def self.authentication_method=(value); end

  def self.authentication_method_setting(); end

  def self.authentication_method_setting=(val); end

  def self.authentication_method_setting?(); end

  def self.authorization_adapter(*args); end

  def self.authorization_adapter=(value); end

  def self.authorization_adapter_setting(); end

  def self.authorization_adapter_setting=(val); end

  def self.authorization_adapter_setting?(); end

  def self.batch_actions(*args); end

  def self.batch_actions=(value); end

  def self.batch_actions_setting(); end

  def self.batch_actions_setting=(val); end

  def self.batch_actions_setting?(); end

  def self.breadcrumb(*args); end

  def self.breadcrumb=(value); end

  def self.breadcrumb_setting(); end

  def self.breadcrumb_setting=(val); end

  def self.breadcrumb_setting?(); end

  def self.cancan_ability_class(*args); end

  def self.cancan_ability_class=(value); end

  def self.cancan_ability_class_setting(); end

  def self.cancan_ability_class_setting=(val); end

  def self.cancan_ability_class_setting?(); end

  def self.comments(*args); end

  def self.comments=(value); end

  def self.comments_menu(*args); end

  def self.comments_menu=(value); end

  def self.comments_menu_setting(); end

  def self.comments_menu_setting=(val); end

  def self.comments_menu_setting?(); end

  def self.comments_order(*args); end

  def self.comments_order=(value); end

  def self.comments_order_setting(); end

  def self.comments_order_setting=(val); end

  def self.comments_order_setting?(); end

  def self.comments_registration_name(*args); end

  def self.comments_registration_name=(value); end

  def self.comments_registration_name_setting(); end

  def self.comments_registration_name_setting=(val); end

  def self.comments_registration_name_setting?(); end

  def self.comments_setting(); end

  def self.comments_setting=(val); end

  def self.comments_setting?(); end

  def self.create_another(*args); end

  def self.create_another=(value); end

  def self.create_another_setting(); end

  def self.create_another_setting=(val); end

  def self.create_another_setting?(); end

  def self.csv_options(*args); end

  def self.csv_options=(value); end

  def self.csv_options_setting(); end

  def self.csv_options_setting=(val); end

  def self.csv_options_setting?(); end

  def self.current_filters(*args); end

  def self.current_filters=(value); end

  def self.current_filters_setting(); end

  def self.current_filters_setting=(val); end

  def self.current_filters_setting?(); end

  def self.current_user_method(*args); end

  def self.current_user_method=(value); end

  def self.current_user_method_setting(); end

  def self.current_user_method_setting=(val); end

  def self.current_user_method_setting?(); end

  def self.default_per_page(*args); end

  def self.default_per_page=(value); end

  def self.default_per_page_setting(); end

  def self.default_per_page_setting=(val); end

  def self.default_per_page_setting?(); end

  def self.download_links(*args); end

  def self.download_links=(value); end

  def self.download_links_setting(); end

  def self.download_links_setting=(val); end

  def self.download_links_setting?(); end

  def self.favicon(*args); end

  def self.favicon=(value); end

  def self.favicon_setting(); end

  def self.favicon_setting=(val); end

  def self.favicon_setting?(); end

  def self.filter_columns_for_large_association(*args); end

  def self.filter_columns_for_large_association=(value); end

  def self.filter_columns_for_large_association_setting(); end

  def self.filter_columns_for_large_association_setting=(val); end

  def self.filter_columns_for_large_association_setting?(); end

  def self.filter_method_for_large_association(*args); end

  def self.filter_method_for_large_association=(value); end

  def self.filter_method_for_large_association_setting(); end

  def self.filter_method_for_large_association_setting=(val); end

  def self.filter_method_for_large_association_setting?(); end

  def self.filters(*args); end

  def self.filters=(value); end

  def self.filters_setting(); end

  def self.filters_setting=(val); end

  def self.filters_setting?(); end

  def self.flash_keys_to_except(*args); end

  def self.flash_keys_to_except=(value); end

  def self.flash_keys_to_except_setting(); end

  def self.flash_keys_to_except_setting=(val); end

  def self.flash_keys_to_except_setting?(); end

  def self.footer(*args); end

  def self.footer=(value); end

  def self.footer_setting(); end

  def self.footer_setting=(val); end

  def self.footer_setting?(); end

  def self.head(*args); end

  def self.head=(value); end

  def self.head_setting(); end

  def self.head_setting=(val); end

  def self.head_setting?(); end

  def self.include_default_association_filters(*args); end

  def self.include_default_association_filters=(value); end

  def self.include_default_association_filters_setting(); end

  def self.include_default_association_filters_setting=(val); end

  def self.include_default_association_filters_setting?(); end

  def self.logout_link_method(*args); end

  def self.logout_link_method=(value); end

  def self.logout_link_method_setting(); end

  def self.logout_link_method_setting=(val); end

  def self.logout_link_method_setting?(); end

  def self.logout_link_path(*args); end

  def self.logout_link_path=(value); end

  def self.logout_link_path_setting(); end

  def self.logout_link_path_setting=(val); end

  def self.logout_link_path_setting?(); end

  def self.max_per_page(*args); end

  def self.max_per_page=(value); end

  def self.max_per_page_setting(); end

  def self.max_per_page_setting=(val); end

  def self.max_per_page_setting?(); end

  def self.maximum_association_filter_arity(*args); end

  def self.maximum_association_filter_arity=(value); end

  def self.maximum_association_filter_arity_setting(); end

  def self.maximum_association_filter_arity_setting=(val); end

  def self.maximum_association_filter_arity_setting?(); end

  def self.meta_tags(*args); end

  def self.meta_tags=(value); end

  def self.meta_tags_for_logged_out_pages(*args); end

  def self.meta_tags_for_logged_out_pages=(value); end

  def self.meta_tags_for_logged_out_pages_setting(); end

  def self.meta_tags_for_logged_out_pages_setting=(val); end

  def self.meta_tags_for_logged_out_pages_setting?(); end

  def self.meta_tags_setting(); end

  def self.meta_tags_setting=(val); end

  def self.meta_tags_setting?(); end

  def self.on_unauthorized_access(*args); end

  def self.on_unauthorized_access=(value); end

  def self.on_unauthorized_access_setting(); end

  def self.on_unauthorized_access_setting=(val); end

  def self.on_unauthorized_access_setting?(); end

  def self.order_clause(*args); end

  def self.order_clause=(value); end

  def self.order_clause_setting(); end

  def self.order_clause_setting=(val); end

  def self.order_clause_setting?(); end

  def self.permitted_params(*args); end

  def self.permitted_params=(value); end

  def self.permitted_params_setting(); end

  def self.permitted_params_setting=(val); end

  def self.permitted_params_setting?(); end

  def self.pundit_default_policy(*args); end

  def self.pundit_default_policy=(value); end

  def self.pundit_default_policy_setting(); end

  def self.pundit_default_policy_setting=(val); end

  def self.pundit_default_policy_setting?(); end

  def self.pundit_policy_namespace(*args); end

  def self.pundit_policy_namespace=(value); end

  def self.pundit_policy_namespace_setting(); end

  def self.pundit_policy_namespace_setting=(val); end

  def self.pundit_policy_namespace_setting?(); end

  def self.root_to(*args); end

  def self.root_to=(value); end

  def self.root_to_options(*args); end

  def self.root_to_options=(value); end

  def self.root_to_options_setting(); end

  def self.root_to_options_setting=(val); end

  def self.root_to_options_setting?(); end

  def self.root_to_setting(); end

  def self.root_to_setting=(val); end

  def self.root_to_setting?(); end

  def self.route_options(*args); end

  def self.route_options=(value); end

  def self.route_options_setting(); end

  def self.route_options_setting=(val); end

  def self.route_options_setting?(); end

  def self.scopes_show_count(*args); end

  def self.scopes_show_count=(value); end

  def self.scopes_show_count_setting(); end

  def self.scopes_show_count_setting=(val); end

  def self.scopes_show_count_setting?(); end

  def self.site_title(*args); end

  def self.site_title=(value); end

  def self.site_title_image(*args); end

  def self.site_title_image=(value); end

  def self.site_title_image_setting(); end

  def self.site_title_image_setting=(val); end

  def self.site_title_image_setting?(); end

  def self.site_title_link(*args); end

  def self.site_title_link=(value); end

  def self.site_title_link_setting(); end

  def self.site_title_link_setting=(val); end

  def self.site_title_link_setting?(); end

  def self.site_title_setting(); end

  def self.site_title_setting=(val); end

  def self.site_title_setting?(); end

  def self.unsupported_browser_matcher(*args); end

  def self.unsupported_browser_matcher=(value); end

  def self.unsupported_browser_matcher_setting(); end

  def self.unsupported_browser_matcher_setting=(val); end

  def self.unsupported_browser_matcher_setting?(); end

  def self.use_webpacker(*args); end

  def self.use_webpacker=(value); end

  def self.use_webpacker_setting(); end

  def self.use_webpacker_setting=(val); end

  def self.use_webpacker_setting?(); end

  def self.view_factory(*args); end

  def self.view_factory=(value); end

  def self.view_factory_setting(); end

  def self.view_factory_setting=(val); end

  def self.view_factory_setting?(); end
end

class ActiveAdmin::NoMenuError
end

class ActiveAdmin::NoMenuError
end

module ActiveAdmin::OptionalDisplay
  def display_on?(action, render_context=T.unsafe(nil)); end
end

module ActiveAdmin::OptionalDisplay
end

class ActiveAdmin::OrderClause
  def active_admin_config(); end

  def apply(chain); end

  def custom_sql(); end

  def field(); end

  def initialize(active_admin_config, clause); end

  def order(); end

  def sql(); end

  def table(); end

  def table_column(); end

  def to_sql(); end

  def valid?(); end
end

class ActiveAdmin::OrderClause
end

class ActiveAdmin::Page
  include ::ActiveAdmin::Page::Base
  include ::ActiveAdmin::Resource::Controllers
  include ::ActiveAdmin::Resource::PagePresenters
  include ::ActiveAdmin::Resource::Sidebars
  include ::ActiveAdmin::Resource::ActionItems
  include ::ActiveAdmin::Resource::Menu
  include ::ActiveAdmin::Resource::Naming
  include ::ActiveAdmin::Resource::Routes
  def add_default_sidebar_sections(); end

  def belongs_to(target, options=T.unsafe(nil)); end

  def belongs_to?(); end

  def belongs_to_config(); end

  def breadcrumb(); end

  def breadcrumb=(breadcrumb); end

  def camelized_resource_name(); end

  def clear_page_actions!(); end

  def name(); end

  def namespace(); end

  def namespace_name(); end

  def order_clause(); end

  def page_actions(); end

  def plural_resource_label(); end

  def underscored_resource_name(); end
end

module ActiveAdmin::Page::Base
  def initialize(namespace, name, options); end
end

module ActiveAdmin::Page::Base
end

class ActiveAdmin::Page
end

class ActiveAdmin::PageController
  def clear_page_actions!(); end
  ACTIVE_ADMIN_ACTIONS = ::T.let(nil, ::T.untyped)
end

class ActiveAdmin::PageController
end

class ActiveAdmin::PageDSL
  def belongs_to(target, options=T.unsafe(nil)); end

  def content(options=T.unsafe(nil), &block); end

  def page_action(name, options=T.unsafe(nil), &block); end
end

class ActiveAdmin::PageDSL
end

class ActiveAdmin::PagePresenter
  def [](key); end

  def block(); end

  def fetch(*args, &block); end

  def has_key?(*args, &block); end

  def initialize(options=T.unsafe(nil), &block); end

  def options(); end
end

class ActiveAdmin::PagePresenter
end

class ActiveAdmin::PunditAdapter
  def format_action(action, subject); end

  def retrieve_policy(subject); end
end

class ActiveAdmin::PunditAdapter
end

class ActiveAdmin::Resource
  include ::MethodOrProcHelper
  include ::ActiveAdmin::Resource::Base
  include ::ActiveAdmin::Resource::ActionItems
  include ::ActiveAdmin::Authorization
  include ::ActiveAdmin::Resource::Controllers
  include ::ActiveAdmin::Resource::Menu
  include ::ActiveAdmin::Resource::Naming
  include ::ActiveAdmin::Resource::PagePresenters
  include ::ActiveAdmin::Resource::Pagination
  include ::ActiveAdmin::Resource::Scopes
  include ::ActiveAdmin::Resource::Includes
  include ::ActiveAdmin::Resource::ScopeTo
  include ::ActiveAdmin::Resource::Sidebars
  include ::ActiveAdmin::Resource::Routes
  include ::ActiveAdmin::Resource::Ordering
  include ::ActiveAdmin::Resource::Attributes
  include ::ActiveAdmin::Filters::ResourceExtension
  include ::ActiveAdmin::Comments::ResourceHelper
  include ::ActiveAdmin::BatchActions::ResourceExtension
  def association_columns(); end

  def belongs_to(target, options=T.unsafe(nil)); end

  def belongs_to?(); end

  def belongs_to_config(); end

  def belongs_to_param(); end

  def breadcrumb(); end

  def breadcrumb=(breadcrumb); end

  def clear_collection_actions!(); end

  def clear_member_actions!(); end

  def collection_actions(); end

  def comments(); end

  def comments=(comments); end

  def content_columns(); end

  def create_another(); end

  def create_another=(create_another); end

  def csv_builder(); end

  def csv_builder=(csv_builder); end

  def decorator_class(); end

  def decorator_class_name(); end

  def decorator_class_name=(decorator_class_name); end

  def defined_actions(); end

  def dsl(); end

  def dsl=(dsl); end

  def find_resource(id); end

  def member_actions(); end

  def namespace(); end

  def order_clause(); end

  def order_clause=(order_clause); end

  def resource_attributes(); end

  def resource_class(); end

  def resource_class_name(); end

  def resource_column_names(); end

  def resource_columns(); end

  def resource_name_extension(); end

  def resource_quoted_column_name(column); end

  def resource_table_name(); end

  def sort_order(); end

  def sort_order=(sort_order); end
  RegisterEvent = ::T.let(nil, ::T.untyped)
end

module ActiveAdmin::Resource::ActionItems
  def action_items(); end

  def action_items?(); end

  def action_items_for(action, render_context=T.unsafe(nil)); end

  def add_action_item(name, options=T.unsafe(nil), &block); end

  def clear_action_items!(); end

  def initialize(*args); end

  def remove_action_item(name); end
end

module ActiveAdmin::Resource::ActionItems
end

module ActiveAdmin::Resource::Attributes
  def counter_cache_col?(c); end

  def default_attributes(); end

  def filtered_col?(c); end

  def foreign_methods(); end

  def method_for_column(c); end

  def primary_col?(c); end

  def reject_col?(c); end

  def sti_col?(c); end
end

module ActiveAdmin::Resource::Attributes
end

module ActiveAdmin::Resource::Base
  def initialize(namespace, resource_class, options=T.unsafe(nil)); end
end

module ActiveAdmin::Resource::Base
end

class ActiveAdmin::Resource::BelongsTo
  def initialize(owner, target_name, options=T.unsafe(nil)); end

  def namespace(); end

  def optional?(); end

  def owner(); end

  def required?(); end

  def resource(); end

  def target(); end

  def target_name(); end
end

class ActiveAdmin::Resource::BelongsTo::TargetNotFound
  def initialize(key, namespace); end
end

class ActiveAdmin::Resource::BelongsTo::TargetNotFound
end

class ActiveAdmin::Resource::BelongsTo
end

module ActiveAdmin::Resource::Controllers
  def controller(); end

  def controller_name(); end

  def resources_configuration(*args, &block); end
end

module ActiveAdmin::Resource::Controllers
end

module ActiveAdmin::Resource::Includes
  def includes(); end
end

module ActiveAdmin::Resource::Includes
end

module ActiveAdmin::Resource::Menu
  def add_to_menu(menu_collection); end

  def default_menu_options(); end

  def include_in_menu?(); end

  def menu_item(); end

  def menu_item_options(); end

  def menu_item_options=(options); end

  def navigation_menu(); end

  def navigation_menu_name(); end

  def navigation_menu_name=(menu_name); end
end

module ActiveAdmin::Resource::Menu
end

class ActiveAdmin::Resource::Name
  def eql?(other); end

  def hash(*args, &block); end

  def initialize(klass, name=T.unsafe(nil)); end

  def translate(options=T.unsafe(nil)); end
end

class ActiveAdmin::Resource::Name
end

module ActiveAdmin::Resource::Naming
  def param_key(); end

  def plural_resource_label(options=T.unsafe(nil)); end

  def resource_label(); end

  def resource_name(); end
end

module ActiveAdmin::Resource::Naming
end

module ActiveAdmin::Resource::Ordering
  def ordering(); end
end

module ActiveAdmin::Resource::Ordering
end

module ActiveAdmin::Resource::PagePresenters
  def default_index_class(); end

  def find_index_class(symbol_or_class); end

  def get_page_presenter(action, type=T.unsafe(nil)); end

  def page_presenters(); end

  def set_index_presenter(index_as, page_presenter); end

  def set_page_presenter(action, page_presenter); end
end

module ActiveAdmin::Resource::PagePresenters
end

module ActiveAdmin::Resource::Pagination
  def initialize(*args); end

  def max_per_page(); end

  def max_per_page=(max_per_page); end

  def paginate(); end

  def paginate=(paginate); end

  def per_page(); end

  def per_page=(per_page); end
end

module ActiveAdmin::Resource::Pagination
end

module ActiveAdmin::Resource::Routes
  def route_batch_action_path(params=T.unsafe(nil), additional_params=T.unsafe(nil)); end

  def route_builder(); end

  def route_collection_path(params=T.unsafe(nil), additional_params=T.unsafe(nil)); end

  def route_edit_instance_path(resource, additional_params=T.unsafe(nil)); end

  def route_instance_path(resource, additional_params=T.unsafe(nil)); end

  def route_member_action_path(action, resource, additional_params=T.unsafe(nil)); end

  def route_prefix(); end

  def route_uncountable?(); end
end

module ActiveAdmin::Resource::Routes
end

module ActiveAdmin::Resource::ScopeTo
  def scope_to(*args, &block); end

  def scope_to?(context=T.unsafe(nil)); end

  def scope_to_association_method(); end

  def scope_to_config(); end

  def scope_to_method(); end
end

module ActiveAdmin::Resource::ScopeTo
end

module ActiveAdmin::Resource::Scopes
  def default_scope(context=T.unsafe(nil)); end

  def get_scope_by_id(id); end

  def scope(*args, &block); end

  def scopes(); end
end

module ActiveAdmin::Resource::Scopes
end

module ActiveAdmin::Resource::Sidebars
  def clear_sidebar_sections!(); end

  def sidebar_sections(); end

  def sidebar_sections?(); end

  def sidebar_sections_for(action, render_context=T.unsafe(nil)); end
end

module ActiveAdmin::Resource::Sidebars
end

class ActiveAdmin::Resource
end

class ActiveAdmin::ResourceCollection
  include ::Enumerable
  def [](obj); end

  def add(resource); end

  def each(&block); end

  def empty?(*args, &block); end

  def has_key?(*args, &block); end

  def keys(*args, &block); end

  def size(*args, &block); end

  def values(*args, &block); end
end

class ActiveAdmin::ResourceCollection::ConfigMismatch
  def initialize(existing, given); end
end

class ActiveAdmin::ResourceCollection::ConfigMismatch
end

class ActiveAdmin::ResourceCollection::IncorrectClass
  def initialize(existing, given); end
end

class ActiveAdmin::ResourceCollection::IncorrectClass
end

class ActiveAdmin::ResourceCollection
  extend ::Forwardable
end

class ActiveAdmin::ResourceController
  include ::ActiveAdmin::ResourceController::ActionBuilder
  include ::ActiveAdmin::ResourceController::Decorators
  include ::ActiveAdmin::ResourceController::DataAccess
  include ::ActiveAdmin::Callbacks
  include ::ActiveAdmin::ScopeChain
  include ::ActiveAdmin::ResourceController::PolymorphicRoutes
  include ::ActiveAdmin::ResourceController::Scoping
  include ::ActiveAdmin::ResourceController::Streaming
  include ::ActiveAdmin::ResourceController::Sidebars
  include ::ActiveAdmin::ViewHelpers::DownloadFormatLinksHelper
  include ::ActiveAdmin::BatchActions::Controller
end

module ActiveAdmin::ResourceController::ActionBuilder
end

module ActiveAdmin::ResourceController::ActionBuilder::ClassMethods
  def clear_collection_actions!(); end

  def clear_member_actions!(); end
end

module ActiveAdmin::ResourceController::ActionBuilder::ClassMethods
end

module ActiveAdmin::ResourceController::ActionBuilder
  extend ::ActiveSupport::Concern
end

module ActiveAdmin::ResourceController::DataAccess
  def apply_authorization_scope(collection); end

  def apply_decorations(resource); end

  def apply_filtering(chain); end

  def apply_includes(chain); end

  def apply_pagination(chain); end

  def apply_scoping(chain); end

  def apply_sorting(chain); end

  def assign_attributes(resource, attributes); end

  def build_new_resource(); end

  def build_resource(); end

  def collection(); end

  def collection_applies(options=T.unsafe(nil)); end

  def collection_before_scope(); end

  def configured_per_page(); end

  def create_resource(object); end

  def current_scope(); end

  def destroy_resource(object); end

  def dynamic_per_page(); end

  def find_collection(options=T.unsafe(nil)); end

  def find_resource(); end

  def per_page(); end

  def resource(); end

  def save_resource(object); end

  def scoped_collection(); end

  def smart_resource_url(); end

  def update_resource(object, attributes); end
  COLLECTION_APPLIES = ::T.let(nil, ::T.untyped)
end

module ActiveAdmin::ResourceController::DataAccess
  def self.included(base); end
end

module ActiveAdmin::ResourceController::Decorators
  def apply_collection_decorator(collection); end

  def apply_decorator(resource); end
end

class ActiveAdmin::ResourceController::Decorators::Wrapper
end

class ActiveAdmin::ResourceController::Decorators::Wrapper
  def self.draper_collection_decorator(); end

  def self.draper_collection_decorator?(decorator); end

  def self.find_collection_decorator(decorator); end

  def self.wrap(decorator); end

  def self.wrap!(parent, name); end
end

module ActiveAdmin::ResourceController::Decorators
  def self.undecorate(resource); end
end

module ActiveAdmin::ResourceController::PolymorphicRoutes
  def polymorphic_path(record_or_hash_or_array, options=T.unsafe(nil)); end

  def polymorphic_url(record_or_hash_or_array, options=T.unsafe(nil)); end
end

module ActiveAdmin::ResourceController::PolymorphicRoutes
end

module ActiveAdmin::ResourceController::ResourceClassMethods
  def override_resource_class_methods!(); end
end

module ActiveAdmin::ResourceController::ResourceClassMethods
end

module ActiveAdmin::ResourceController::Scoping
  def begin_of_association_chain(); end

  def method_for_association_chain(); end
end

module ActiveAdmin::ResourceController::Scoping
  extend ::ActiveSupport::Concern
end

module ActiveAdmin::ResourceController::Sidebars
  def skip_sidebar!(); end

  def skip_sidebar?(); end
end

module ActiveAdmin::ResourceController::Sidebars
end

module ActiveAdmin::ResourceController::Streaming
  def csv_filename(); end

  def index(); end

  def stream_csv(); end

  def stream_resource(&block); end
end

module ActiveAdmin::ResourceController::Streaming
end

class ActiveAdmin::ResourceController
  extend ::ActiveAdmin::ResourceController::ActionBuilder::ClassMethods
  extend ::ActiveAdmin::Callbacks::ClassMethods
  extend ::ActiveAdmin::ResourceController::ResourceClassMethods
  def self.active_admin_config=(config); end

  def self.after_build(method=T.unsafe(nil), &block); end

  def self.after_create(method=T.unsafe(nil), &block); end

  def self.after_destroy(method=T.unsafe(nil), &block); end

  def self.after_save(method=T.unsafe(nil), &block); end

  def self.after_update(method=T.unsafe(nil), &block); end

  def self.before_build(method=T.unsafe(nil), &block); end

  def self.before_create(method=T.unsafe(nil), &block); end

  def self.before_destroy(method=T.unsafe(nil), &block); end

  def self.before_save(method=T.unsafe(nil), &block); end

  def self.before_update(method=T.unsafe(nil), &block); end
end

class ActiveAdmin::ResourceDSL
  include ::ActiveAdmin::Filters::DSL
  def actions(*args, &block); end

  def after_build(*args, &block); end

  def after_create(*args, &block); end

  def after_destroy(*args, &block); end

  def after_save(*args, &block); end

  def after_update(*args, &block); end

  def before_build(*args, &block); end

  def before_create(*args, &block); end

  def before_destroy(*args, &block); end

  def before_save(*args, &block); end

  def before_update(*args, &block); end
end

class ActiveAdmin::ResourceDSL
end

class ActiveAdmin::Router
  def apply(); end

  def initialize(router:, namespaces:); end

  def namespaces(); end

  def router(); end
end

class ActiveAdmin::Router
end

class ActiveAdmin::Scope
  def default_block(); end

  def display_if_block(); end

  def group(); end

  def id(); end

  def initialize(name, method=T.unsafe(nil), options=T.unsafe(nil), &block); end

  def name(); end

  def scope_block(); end

  def scope_method(); end

  def show_count(); end
end

class ActiveAdmin::Scope
end

module ActiveAdmin::ScopeChain
end

module ActiveAdmin::ScopeChain
end

class ActiveAdmin::SettingsNode
end

class ActiveAdmin::SettingsNode
  def self.build(superclass=T.unsafe(nil)); end

  def self.register(name, value); end
end

class ActiveAdmin::SidebarSection
  include ::ActiveAdmin::OptionalDisplay
  def block(); end

  def block=(block); end

  def custom_class(); end

  def id(); end

  def initialize(name, options=T.unsafe(nil), &block); end

  def name(); end

  def name=(name); end

  def options(); end

  def options=(options); end

  def partial_name(); end

  def priority(); end

  def title(); end
end

class ActiveAdmin::SidebarSection
end

class ActiveAdmin::StringSymbolOrProcSetting
  def value(context=T.unsafe(nil)); end
end

class ActiveAdmin::StringSymbolOrProcSetting
end

class ActiveAdmin::ViewFactory
  def action_items(); end

  def action_items=(val); end

  def action_items?(); end

  def batch_action_selector(); end

  def batch_action_selector=(val); end

  def batch_action_selector?(); end

  def blank_slate(); end

  def blank_slate=(val); end

  def blank_slate?(); end

  def edit_page(); end

  def edit_page=(val); end

  def edit_page?(); end

  def footer(); end

  def footer=(val); end

  def footer?(); end

  def global_navigation(); end

  def global_navigation=(val); end

  def global_navigation?(); end

  def header(); end

  def header=(val); end

  def header?(); end

  def index_page(); end

  def index_page=(val); end

  def index_page?(); end

  def index_scopes(); end

  def index_scopes=(val); end

  def index_scopes?(); end

  def layout(); end

  def layout=(val); end

  def layout?(); end

  def new_page(); end

  def new_page=(val); end

  def new_page?(); end

  def page(); end

  def page=(val); end

  def page?(); end

  def show_page(); end

  def show_page=(val); end

  def show_page?(); end

  def site_title(); end

  def site_title=(val); end

  def site_title?(); end

  def title_bar(); end

  def title_bar=(val); end

  def title_bar?(); end

  def unsupported_browser(); end

  def unsupported_browser=(val); end

  def unsupported_browser?(); end

  def utility_navigation(); end

  def utility_navigation=(val); end

  def utility_navigation?(); end
end

class ActiveAdmin::ViewFactory
  def self.action_items(); end

  def self.action_items=(value); end

  def self.action_items?(); end

  def self.batch_action_selector(); end

  def self.batch_action_selector=(value); end

  def self.batch_action_selector?(); end

  def self.blank_slate(); end

  def self.blank_slate=(value); end

  def self.blank_slate?(); end

  def self.edit_page(); end

  def self.edit_page=(value); end

  def self.edit_page?(); end

  def self.footer(); end

  def self.footer=(value); end

  def self.footer?(); end

  def self.global_navigation(); end

  def self.global_navigation=(value); end

  def self.global_navigation?(); end

  def self.header(); end

  def self.header=(value); end

  def self.header?(); end

  def self.index_page(); end

  def self.index_page=(value); end

  def self.index_page?(); end

  def self.index_scopes(); end

  def self.index_scopes=(value); end

  def self.index_scopes?(); end

  def self.layout(); end

  def self.layout=(value); end

  def self.layout?(); end

  def self.new_page(); end

  def self.new_page=(value); end

  def self.new_page?(); end

  def self.page(); end

  def self.page=(value); end

  def self.page?(); end

  def self.show_page(); end

  def self.show_page=(value); end

  def self.show_page?(); end

  def self.site_title(); end

  def self.site_title=(value); end

  def self.site_title?(); end

  def self.title_bar(); end

  def self.title_bar=(value); end

  def self.title_bar?(); end

  def self.unsupported_browser(); end

  def self.unsupported_browser=(value); end

  def self.unsupported_browser?(); end

  def self.utility_navigation(); end

  def self.utility_navigation=(value); end

  def self.utility_navigation?(); end
end

module ActiveAdmin::ViewHelpers
  include ::ActiveAdmin::ViewHelpers::ActiveAdminApplicationHelper
  include ::ActiveAdmin::ViewHelpers::AutoLinkHelper
  include ::ActiveAdmin::ViewHelpers::BreadcrumbHelper
  include ::ActiveAdmin::ViewHelpers::DisplayHelper
  include ::MethodOrProcHelper
  include ::ActiveAdmin::ViewHelpers::SidebarHelper
  include ::ActiveAdmin::ViewHelpers::FormHelper
  include ::ActiveAdmin::ViewHelpers::TitleHelper
  include ::ActiveAdmin::ViewHelpers::ViewFactoryHelper
  include ::ActiveAdmin::ViewHelpers::FlashHelper
  include ::ActiveAdmin::ViewHelpers::ScopeNameHelper
  include ::ActiveAdmin::Filters::ViewHelper
end

module ActiveAdmin::ViewHelpers::ActiveAdminApplicationHelper
  def active_admin_application(); end
end

module ActiveAdmin::ViewHelpers::ActiveAdminApplicationHelper
end

module ActiveAdmin::ViewHelpers::AutoLinkHelper
  def active_admin_resource_for(klass); end

  def auto_link(resource, content=T.unsafe(nil)); end

  def auto_url_for(resource); end
end

module ActiveAdmin::ViewHelpers::AutoLinkHelper
end

module ActiveAdmin::ViewHelpers::BreadcrumbHelper
  def breadcrumb_links(path=T.unsafe(nil)); end
end

module ActiveAdmin::ViewHelpers::BreadcrumbHelper
end

module ActiveAdmin::ViewHelpers::DisplayHelper
  def association_methods_for(resource); end

  def boolean_attr?(resource, attr, value); end

  def display_name(resource); end

  def display_name_method_for(resource); end

  def find_value(resource, attr); end

  def format_attribute(resource, attr); end

  def format_collection(collection); end

  def pretty_format(object); end
  DISPLAY_NAME_FALLBACK = ::T.let(nil, ::T.untyped)
end

module ActiveAdmin::ViewHelpers::DisplayHelper
end

module ActiveAdmin::ViewHelpers::DownloadFormatLinksHelper
end

module ActiveAdmin::ViewHelpers::DownloadFormatLinksHelper
  def self.included(base); end
end

module ActiveAdmin::ViewHelpers::FlashHelper
  def flash_messages(); end
end

module ActiveAdmin::ViewHelpers::FlashHelper
end

module ActiveAdmin::ViewHelpers::FormHelper
  def active_admin_form_for(resource, options=T.unsafe(nil), &block); end

  def fields_for_params(params, options=T.unsafe(nil)); end

  def hidden_field_tags_for(params, options=T.unsafe(nil)); end
end

module ActiveAdmin::ViewHelpers::FormHelper
end

module ActiveAdmin::ViewHelpers::ScopeNameHelper
  def scope_name(scope); end
end

module ActiveAdmin::ViewHelpers::ScopeNameHelper
end

module ActiveAdmin::ViewHelpers::SidebarHelper
  def skip_sidebar!(); end

  def skip_sidebar?(); end
end

module ActiveAdmin::ViewHelpers::SidebarHelper
end

module ActiveAdmin::ViewHelpers::TitleHelper
  def title(_title); end
end

module ActiveAdmin::ViewHelpers::TitleHelper
end

module ActiveAdmin::ViewHelpers::ViewFactoryHelper
  def view_factory(); end
end

module ActiveAdmin::ViewHelpers::ViewFactoryHelper
end

module ActiveAdmin::ViewHelpers
end

module ActiveAdmin::Views
end

class ActiveAdmin::Views::ActionItems
  def build(action_items); end
end

class ActiveAdmin::Views::ActionItems
end

class ActiveAdmin::Views::ActiveAdminForm
  def actions(*args, &block); end

  def add_create_another_checkbox(); end

  def build(resource, options=T.unsafe(nil), &block); end

  def commit_action_with_cancel_link(); end

  def form_buffers(); end

  def has_many(*args, &block); end

  def input(*args); end

  def inputs(*args, &block); end

  def multipart?(); end

  def object(); end
end

class ActiveAdmin::Views::ActiveAdminForm
end

class ActiveAdmin::Views::AttributesTable
  def build(obj, *attrs); end

  def build_colgroups(); end

  def content_for(record, attr); end

  def empty_value(); end

  def header_content_for(attr); end

  def row(*args, &block); end

  def rows(*attrs); end

  def single_record?(); end
end

class ActiveAdmin::Views::AttributesTable
end

class ActiveAdmin::Views::BlankSlate
  def build(content); end
end

class ActiveAdmin::Views::BlankSlate
end

class ActiveAdmin::Views::Column
  def build(options=T.unsafe(nil)); end

  def max_width(); end

  def max_width=(max_width); end

  def min_width(); end

  def min_width=(min_width); end

  def set_column_styles(column_width, margin_width, is_last_column=T.unsafe(nil)); end

  def span_size(); end

  def span_size=(span_size); end
end

class ActiveAdmin::Views::Column
end

class ActiveAdmin::Views::Columns
  def add_child(*_); end

  def calculate_columns!(); end

  def column(*args, &block); end

  def columns(); end

  def columns_span_count(); end

  def margin_size(); end
end

class ActiveAdmin::Views::Columns
end

class ActiveAdmin::Views::DropdownMenu
  def build(name, options=T.unsafe(nil)); end

  def item(*args); end
end

class ActiveAdmin::Views::DropdownMenu
end

class ActiveAdmin::Views::Footer
  def build(namespace); end
end

class ActiveAdmin::Views::Footer
end

class ActiveAdmin::Views::FormtasticProxy
  def split_string_on(string, match); end
end

class ActiveAdmin::Views::FormtasticProxy
end

class ActiveAdmin::Views::HasManyProxy
  def build(form_builder, *args, &block); end
end

class ActiveAdmin::Views::HasManyProxy
end

class ActiveAdmin::Views::Header
  def build(namespace, menu); end
end

class ActiveAdmin::Views::Header
end

class ActiveAdmin::Views::IndexAsBlock
  def build(page_presenter, collection); end
end

class ActiveAdmin::Views::IndexAsBlock
  def self.index_name(); end
end

class ActiveAdmin::Views::IndexAsBlog
  def body(method=T.unsafe(nil), &block); end

  def build(page_presenter, collection); end

  def title(method=T.unsafe(nil), &block); end
end

class ActiveAdmin::Views::IndexAsBlog
  def self.index_name(); end
end

class ActiveAdmin::Views::IndexAsGrid
  def build(page_presenter, collection); end

  def build_empty_cell(); end

  def build_item(item); end

  def build_row(group); end

  def build_table(); end

  def default_number_of_columns(); end

  def number_of_columns(); end
end

class ActiveAdmin::Views::IndexAsGrid
  def self.index_name(); end
end

class ActiveAdmin::Views::IndexAsTable
  def build(page_presenter, collection); end

  def default_table(); end
end

class ActiveAdmin::Views::IndexAsTable::IndexTableFor
  def actions(options=T.unsafe(nil), &block); end

  def default_actions(); end

  def id_column(); end

  def index_column(start_value=T.unsafe(nil)); end

  def selectable_column(); end
end

class ActiveAdmin::Views::IndexAsTable::IndexTableFor::TableActions
  def item(*args); end
end

class ActiveAdmin::Views::IndexAsTable::IndexTableFor::TableActions
end

class ActiveAdmin::Views::IndexAsTable::IndexTableFor
end

class ActiveAdmin::Views::IndexAsTable
  def self.index_name(); end
end

class ActiveAdmin::Views::IndexList
  include ::ActiveAdmin::Helpers::Collection
  def build(index_classes); end

  def build_index_list(index_class); end

  def classes_for_index(index_class); end

  def current_filter_search_empty?(); end

  def current_index?(index_class); end
end

class ActiveAdmin::Views::IndexList
end

class ActiveAdmin::Views::Menu
  def build(menu, options=T.unsafe(nil)); end

  def menu(); end
end

class ActiveAdmin::Views::Menu
end

class ActiveAdmin::Views::MenuItem
  def build(item, options=T.unsafe(nil)); end

  def label(); end

  def priority(); end

  def url(); end

  def visible?(); end
end

class ActiveAdmin::Views::MenuItem
end

module ActiveAdmin::Views::Pages
end

class ActiveAdmin::Views::Pages::Base
  def active_admin_config(*args, &block); end

  def controller(*args, &block); end

  def html_title(*args, &block); end

  def main_content(); end

  def params(*args, &block); end

  def title(); end
end

class ActiveAdmin::Views::Pages::Base
end

class ActiveAdmin::Views::Pages::Form
  def form_presenter(); end
end

class ActiveAdmin::Views::Pages::Form
end

class ActiveAdmin::Views::Pages::Index
  include ::ActiveAdmin::Helpers::Collection
  include ::ActiveAdmin::ViewHelpers::DownloadFormatLinksHelper
  def any_table_tools?(); end

  def build_batch_actions_selector(); end

  def build_collection(); end

  def build_index_list(); end

  def build_scopes(); end

  def build_table_tools(); end

  def config(); end

  def find_index_renderer_class(klass); end

  def items_in_collection?(); end

  def render_blank_slate(); end

  def render_empty_results(); end

  def render_index(); end

  def wrap_with_batch_action_form(&block); end
end

class ActiveAdmin::Views::Pages::Index
end

class ActiveAdmin::Views::Pages::Layout
end

class ActiveAdmin::Views::Pages::Layout
end

class ActiveAdmin::Views::Pages::Page
  def page_presenter(); end
end

class ActiveAdmin::Views::Pages::Page
end

class ActiveAdmin::Views::Pages::Show
  include ::ActiveAdmin::Views::Pages::Show::DefaultMainContent
  include ::ActiveAdmin::Comments::ShowPageHelper
  def attributes_table(*args, &block); end

  def config(); end

  def default_title(); end
end

module ActiveAdmin::Views::Pages::Show::DefaultMainContent
  def default_attribute_table_rows(); end

  def default_main_content(&block); end
end

module ActiveAdmin::Views::Pages::Show::DefaultMainContent
end

class ActiveAdmin::Views::Pages::Show
end

module ActiveAdmin::Views::Pages
end

class ActiveAdmin::Views::PaginatedCollection
  include ::ActiveAdmin::Helpers::Collection
  include ::ActiveAdmin::ViewHelpers::DownloadFormatLinksHelper
  def add_child(*args, &block); end

  def build(collection, options=T.unsafe(nil)); end

  def build_pagination(); end

  def build_pagination_with_formats(options); end

  def build_per_page_select(); end

  def collection(); end

  def page_entries_info(options=T.unsafe(nil)); end
end

class ActiveAdmin::Views::PaginatedCollection
end

class ActiveAdmin::Views::Panel
  def build(title, attributes=T.unsafe(nil)); end

  def header_action(*args); end
end

class ActiveAdmin::Views::Panel
end

class ActiveAdmin::Views::Scopes
  include ::ActiveAdmin::ScopeChain
  include ::ActiveAdmin::Helpers::Collection
  def build(scopes, options=T.unsafe(nil)); end

  def build_scope(scope, options); end

  def classes_for_scope(scope); end

  def current_scope?(scope); end

  def get_scope_count(scope); end

  def group_class(group); end
end

class ActiveAdmin::Views::Scopes
end

class ActiveAdmin::Views::SemanticActionsProxy
  def build(form_builder, *args, &block); end
end

class ActiveAdmin::Views::SemanticActionsProxy
end

class ActiveAdmin::Views::SemanticInputsProxy
  def build(form_builder, *args, &block); end
end

class ActiveAdmin::Views::SemanticInputsProxy
end

class ActiveAdmin::Views::Sidebar
  def build(sections, attributes=T.unsafe(nil)); end
end

class ActiveAdmin::Views::Sidebar
end

class ActiveAdmin::Views::SidebarSection
  def attributes_table(*args, &block); end

  def build(section); end

  def build_sidebar_content(); end
end

class ActiveAdmin::Views::SidebarSection
end

class ActiveAdmin::Views::SiteTitle
  def build(namespace); end

  def site_title_image(); end

  def site_title_link?(); end
end

class ActiveAdmin::Views::SiteTitle
end

class ActiveAdmin::Views::StatusTag
  def build(status, options=T.unsafe(nil)); end

  def convert_to_boolean_status(status); end

  def status_to_class(status); end
end

class ActiveAdmin::Views::StatusTag
end

class ActiveAdmin::Views::TabbedNavigation
end

class ActiveAdmin::Views::TabbedNavigation
end

class ActiveAdmin::Views::TableFor
  def build(obj, *attrs); end

  def build_table(); end

  def build_table_body(); end

  def build_table_cell(col, resource); end

  def build_table_head(); end

  def build_table_header(col); end

  def column(*args, &block); end

  def columns(*attrs); end

  def current_sort(); end

  def default_options(); end

  def order_for_sort_key(sort_key); end

  def sortable?(); end
end

class ActiveAdmin::Views::TableFor::Column
  def data(); end

  def data=(data); end

  def html_class(); end

  def html_class=(html_class); end

  def initialize(*args, &block); end

  def pretty_title(); end

  def sort_key(); end

  def sortable?(); end

  def title(); end

  def title=(title); end
end

class ActiveAdmin::Views::TableFor::Column
end

class ActiveAdmin::Views::TableFor
end

class ActiveAdmin::Views::Tabs
  def build(&block); end

  def build_content_item(title, options, &block); end

  def build_menu_item(title, options, &block); end

  def tab(title, options=T.unsafe(nil), &block); end
end

class ActiveAdmin::Views::Tabs
end

class ActiveAdmin::Views::TitleBar
  def build(title, action_items); end
end

class ActiveAdmin::Views::TitleBar
end

class ActiveAdmin::Views::UnsupportedBrowser
  def build(); end
end

class ActiveAdmin::Views::UnsupportedBrowser
end

module ActiveAdmin::Views
end

module ActiveAdmin
  def self.after_load(&block); end

  def self.application(); end

  def self.application=(application); end

  def self.before_load(&block); end

  def self.load!(*args, &block); end

  def self.register(*args, &block); end

  def self.register_page(*args, &block); end

  def self.routes(*args, &block); end

  def self.setup(); end

  def self.unload!(*args, &block); end
end

module ActiveJob::Arguments
  TYPE_WHITELIST = ::T.let(nil, ::T.untyped)
end

module ActiveJob::Callbacks
  extend ::ActiveSupport::Callbacks
end

class ActiveJob::ConfiguredJob
  def initialize(job_class, options=T.unsafe(nil)); end

  def perform_later(*args); end

  def perform_now(*args); end
end

class ActiveJob::ConfiguredJob
end

class ActiveJob::QueueAdapters::AsyncAdapter::Scheduler
  DEFAULT_EXECUTOR_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActiveJob::QueueAdapters::InlineAdapter
  def enqueue(job); end

  def enqueue_at(*_); end
end

class ActiveJob::QueueAdapters::InlineAdapter
end

class ActiveJob::QueueAdapters::TestAdapter
  def enqueue(job); end

  def enqueue_at(job, timestamp); end

  def enqueued_jobs(); end

  def enqueued_jobs=(enqueued_jobs); end

  def filter(); end

  def filter=(filter); end

  def perform_enqueued_at_jobs(); end

  def perform_enqueued_at_jobs=(perform_enqueued_at_jobs); end

  def perform_enqueued_jobs(); end

  def perform_enqueued_jobs=(perform_enqueued_jobs); end

  def performed_jobs(); end

  def performed_jobs=(performed_jobs); end

  def reject(); end

  def reject=(reject); end
end

class ActiveJob::QueueAdapters::TestAdapter
end

class ActiveJob::TestCase
  include ::ActiveJob::TestHelper
end

class ActiveJob::TestCase
end

module ActiveJob::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

module ActiveModel::AttributeMethods
  CALL_COMPILABLE_REGEXP = ::T.let(nil, ::T.untyped)
  NAME_COMPILABLE_REGEXP = ::T.let(nil, ::T.untyped)
end

class ActiveModel::AttributeMutationTracker
  OPTION_NOT_GIVEN = ::T.let(nil, ::T.untyped)
end

module ActiveModel::Attributes
  def attributes(); end

  def initialize(*_); end
end

module ActiveModel::Attributes::ClassMethods
  def attribute(name, type=T.unsafe(nil), **options); end
end

module ActiveModel::Attributes::ClassMethods
end

module ActiveModel::Attributes
  extend ::ActiveSupport::Concern
end

class ActiveModel::Errors
  CALLBACKS_OPTIONS = ::T.let(nil, ::T.untyped)
  MESSAGE_OPTIONS = ::T.let(nil, ::T.untyped)
end

module ActiveModel::Lint
end

module ActiveModel::Lint::Tests
  def test_errors_aref(); end

  def test_model_naming(); end

  def test_persisted?(); end

  def test_to_key(); end

  def test_to_param(); end

  def test_to_partial_path(); end
end

module ActiveModel::Lint::Tests
end

module ActiveModel::Lint
end

module ActiveModel::Model
  include ::ActiveModel::AttributeAssignment
  include ::ActiveModel::ForbiddenAttributesProtection
  def initialize(attributes=T.unsafe(nil)); end

  def persisted?(); end
end

module ActiveModel::Model
  extend ::ActiveSupport::Concern
end

module ActiveModel::SecurePassword
  MAX_PASSWORD_LENGTH_ALLOWED = ::T.let(nil, ::T.untyped)
end

class ActiveModel::Type::Boolean
  FALSE_VALUES = ::T.let(nil, ::T.untyped)
end

class ActiveModel::Type::Date
  ISO_DATE = ::T.let(nil, ::T.untyped)
end

class ActiveModel::Type::Decimal
  BIGDECIMAL_PRECISION = ::T.let(nil, ::T.untyped)
end

module ActiveModel::Type::Helpers::TimeValue
  ISO_DATETIME = ::T.let(nil, ::T.untyped)
end

class ActiveModel::Type::Integer
  DEFAULT_LIMIT = ::T.let(nil, ::T.untyped)
end

module ActiveModel::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Associations::CollectionProxy
  def bulk_import(*args, &block); end

  def import(*args, &block); end
end

class ActiveRecord::Associations::JoinDependency::JoinAssociation
  include ::Polyamorous::JoinAssociationExtensions
  include ::Polyamorous::SwappingReflectionClass
  def join_constraints(foreign_table, foreign_klass, join_type, alias_tracker); end

  def join_type(); end

  def reflection(); end

  def table=(table); end

  def tables(); end

  def tables=(tables); end
end

class ActiveRecord::Associations::JoinDependency::JoinAssociation
end

module ActiveRecord::AttributeMethods
  BLACKLISTED_CLASS_METHODS = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Base
  include ::Kaminari::ActiveRecordExtension
  include ::CanCan::ModelAdditions
  include ::Bullet::SaveWithBulletSupport
  def _ransack_aliases(); end

  def _ransack_aliases=(val); end

  def _ransack_aliases?(); end

  def _ransackers(); end

  def _ransackers=(val); end

  def _ransackers?(); end

  def synchronize(instances, key=T.unsafe(nil)); end
end

class ActiveRecord::Base
  extend ::OrmAdapter::ToAdapter
  extend ::Ransack::Adapters::ActiveRecord::Base
  extend ::Devise::Models
  extend ::ActiveRecord::Import::Connection
  def self._ransack_aliases(); end

  def self._ransack_aliases=(val); end

  def self._ransack_aliases?(); end

  def self._ransackers(); end

  def self._ransackers=(val); end

  def self._ransackers?(); end

  def self.bulk_import(*args); end

  def self.bulk_import!(*args); end

  def self.import(*args); end

  def self.import!(*args); end

  def self.import_helper(*args); end

  def self.import_with_validations(column_names, array_of_attributes, options=T.unsafe(nil)); end

  def self.import_without_validations_or_callbacks(column_names, array_of_attributes, options=T.unsafe(nil)); end

  def self.supports_import?(*args); end

  def self.supports_on_duplicate_key_update?(); end

  def self.supports_setting_primary_key_of_imported_objects?(); end

  def self.synchronize(instances, keys=T.unsafe(nil)); end
end

module ActiveRecord::Batches
  ORDER_IGNORE_MESSAGE = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Callbacks
  CALLBACKS = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Coders::JSON
end

class ActiveRecord::Coders::JSON
  def self.dump(obj); end

  def self.load(json); end
end

class ActiveRecord::Coders::YAMLColumn
  def assert_valid_value(obj, action:); end

  def dump(obj); end

  def initialize(attr_name, object_class=T.unsafe(nil)); end

  def load(yaml); end

  def object_class(); end

  def object_class=(object_class); end
end

class ActiveRecord::Coders::YAMLColumn
end

class ActiveRecord::ConcurrentMigrationError
  DEFAULT_MESSAGE = ::T.let(nil, ::T.untyped)
  RELEASE_LOCK_FAILED_MESSAGE = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::AbstractAdapter
  include ::ActiveRecord::ConnectionAdapters::SchemaStatements
  include ::ActiveRecord::Migration::JoinTable
  include ::ActiveRecord::ConnectionAdapters::DatabaseStatements
  include ::ActiveRecord::Import::AbstractAdapter::InstanceMethods
  ADAPTER_NAME = ::T.let(nil, ::T.untyped)
  SIMPLE_INT = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements
  BYTEA_COLUMN_TYPE_OID = ::T.let(nil, ::T.untyped)
  MONEY_COLUMN_TYPE_OID = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::Name
  SEPARATOR = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Hstore
  HstorePair = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Uuid
  ACCEPTABLE_UUID = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter
  include ::ActiveRecord::Import::PostgreSQLAdapter
  include ::ActiveRecord::Import::ImportSupport
  ADAPTER_NAME = ::T.let(nil, ::T.untyped)
  CACHED_PLAN_HEURISTIC = ::T.let(nil, ::T.untyped)
  DEADLOCK_DETECTED = ::T.let(nil, ::T.untyped)
  FEATURE_NOT_SUPPORTED = ::T.let(nil, ::T.untyped)
  FOREIGN_KEY_VIOLATION = ::T.let(nil, ::T.untyped)
  LOCK_NOT_AVAILABLE = ::T.let(nil, ::T.untyped)
  NATIVE_DATABASE_TYPES = ::T.let(nil, ::T.untyped)
  NOT_NULL_VIOLATION = ::T.let(nil, ::T.untyped)
  NUMERIC_VALUE_OUT_OF_RANGE = ::T.let(nil, ::T.untyped)
  OPERATION_ALIASES = ::T.let(nil, ::T.untyped)
  QUERY_CANCELED = ::T.let(nil, ::T.untyped)
  SERIALIZATION_FAILURE = ::T.let(nil, ::T.untyped)
  UNIQUE_VIOLATION = ::T.let(nil, ::T.untyped)
  VALUE_LIMIT_VIOLATION = ::T.let(nil, ::T.untyped)
end

ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID = ActiveRecord::ConnectionAdapters::PostgreSQL::OID

class ActiveRecord::ConnectionAdapters::PostgreSQLTypeMetadata
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

ActiveRecord::ConnectionAdapters::SchemaCreation = ActiveRecord::ConnectionAdapters::AbstractAdapter::SchemaCreation

class ActiveRecord::ConnectionAdapters::StatementPool
  DEFAULT_STATEMENT_LIMIT = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::TransactionManager
  NULL_TRANSACTION = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::ConnectionHandling
  DEFAULT_ENV = ::T.let(nil, ::T.untyped)
  RAILS_ENV = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Enum
  ENUM_CONFLICT_MESSAGE = ::T.let(nil, ::T.untyped)
  SR_ENUM_KEYWORDS = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ExplainSubscriber
  EXPLAINED_SQLS = ::T.let(nil, ::T.untyped)
  IGNORED_PAYLOADS = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::FinderMethods
  def find_with_associations(); end
  ONE_AS_ONE = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::FixtureSet
  MAX_ID = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Import
  ADAPTER_PATH = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Import::AbstractAdapter
end

module ActiveRecord::Import::AbstractAdapter::InstanceMethods
  def after_import_synchronize(instances); end

  def increment_locking_column!(table_name, results, locking_column); end

  def insert_many(sql, values, _options=T.unsafe(nil), *args); end

  def next_value_for_sequence(sequence_name); end

  def post_sql_statements(table_name, options); end

  def pre_sql_statements(options); end

  def supports_on_duplicate_key_update?(); end
end

module ActiveRecord::Import::AbstractAdapter::InstanceMethods
end

module ActiveRecord::Import::AbstractAdapter
end

module ActiveRecord::Import::Connection
  def establish_connection(args=T.unsafe(nil)); end
end

module ActiveRecord::Import::Connection
end

module ActiveRecord::Import::ConnectionAdapters
end

module ActiveRecord::Import::ConnectionAdapters
end

module ActiveRecord::Import::ImportSupport
  def supports_import?(); end
end

module ActiveRecord::Import::ImportSupport
end

class ActiveRecord::Import::MissingColumnError
  def initialize(name, index); end
end

class ActiveRecord::Import::MissingColumnError
end

module ActiveRecord::Import::PostgreSQLAdapter
  include ::ActiveRecord::Import::ImportSupport
  def add_column_for_on_duplicate_key_update(column, options=T.unsafe(nil)); end

  def duplicate_key_update_error?(exception); end

  def insert_many(sql, values, options=T.unsafe(nil), *args); end

  def next_value_for_sequence(sequence_name); end

  def post_sql_statements(table_name, options); end

  def returning_columns(options); end

  def split_ids_and_results(values, columns, options); end

  def sql_for_conflict_target(args=T.unsafe(nil)); end

  def sql_for_default_conflict_target(table_name, primary_key); end

  def sql_for_on_duplicate_key_ignore(table_name, *args); end

  def sql_for_on_duplicate_key_update(table_name, *args); end

  def sql_for_on_duplicate_key_update_as_array(table_name, locking_column, arr); end

  def sql_for_on_duplicate_key_update_as_hash(table_name, locking_column, hsh); end

  def supports_on_duplicate_key_update?(); end

  def supports_setting_primary_key_of_imported_objects?(); end
  MIN_VERSION_FOR_UPSERT = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Import::PostgreSQLAdapter
end

class ActiveRecord::Import::Result
  def failed_instances(); end

  def failed_instances=(_); end

  def ids(); end

  def ids=(_); end

  def num_inserts(); end

  def num_inserts=(_); end

  def results(); end

  def results=(_); end
end

class ActiveRecord::Import::Result
  def self.[](*_); end

  def self.members(); end
end

class ActiveRecord::Import::Validator
  def init_validations(klass); end

  def initialize(klass, options=T.unsafe(nil)); end

  def valid_model?(model); end
end

class ActiveRecord::Import::Validator
end

class ActiveRecord::Import::ValueSetTooLargeError
  def initialize(msg=T.unsafe(nil), size=T.unsafe(nil)); end

  def size(); end
end

class ActiveRecord::Import::ValueSetTooLargeError
end

class ActiveRecord::Import::ValueSetsBytesParser
  def initialize(values, options); end

  def max_bytes(); end

  def parse(); end

  def reserved_bytes(); end

  def values(); end
end

class ActiveRecord::Import::ValueSetsBytesParser
  def self.parse(values, options); end
end

class ActiveRecord::Import::ValueSetsRecordsParser
  def initialize(values, options); end

  def max_records(); end

  def parse(); end

  def values(); end
end

class ActiveRecord::Import::ValueSetsRecordsParser
  def self.parse(values, options); end
end

module ActiveRecord::Import
  def self.base_adapter(adapter); end

  def self.load_from_connection_pool(connection_pool); end

  def self.require_adapter(adapter); end
end

class ActiveRecord::InternalMetadata
  include ::ActiveRecord::InternalMetadata::GeneratedAssociationMethods
  include ::Kaminari::ActiveRecordModelExtension
  include ::Kaminari::ConfigurationMethods
end

class ActiveRecord::InternalMetadata::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::ActiveRecord::InternalMetadata::GeneratedRelationMethods
end

class ActiveRecord::InternalMetadata::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::ActiveRecord::InternalMetadata::GeneratedRelationMethods
end

class ActiveRecord::InternalMetadata::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::ActiveRecord::InternalMetadata::GeneratedRelationMethods
end

module ActiveRecord::InternalMetadata::GeneratedAssociationMethods
end

module ActiveRecord::InternalMetadata::GeneratedAssociationMethods
end

module ActiveRecord::InternalMetadata::GeneratedRelationMethods
end

module ActiveRecord::InternalMetadata::GeneratedRelationMethods
end

class ActiveRecord::InternalMetadata
  extend ::Kaminari::ConfigurationMethods::ClassMethods
  def self.[](key); end

  def self.[]=(key, value); end

  def self.create_table(); end

  def self.page(num=T.unsafe(nil)); end
end

module ActiveRecord::LegacyYamlAdapter
end

module ActiveRecord::LegacyYamlAdapter::Rails41
end

module ActiveRecord::LegacyYamlAdapter::Rails41
  def self.convert(klass, coder); end
end

module ActiveRecord::LegacyYamlAdapter::Rails420
end

module ActiveRecord::LegacyYamlAdapter::Rails420
  def self.convert(klass, coder); end
end

module ActiveRecord::LegacyYamlAdapter
  def self.convert(klass, coder); end
end

class ActiveRecord::Locking::LockingType
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::LogSubscriber
  def sql(event); end
  IGNORE_PAYLOAD_NAMES = ::T.let(nil, ::T.untyped)
  RAILS_GEM_ROOT = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Migration
  MigrationFilenameRegexp = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Migration::CommandRecorder
  include ::ActiveRecord::Migration::JoinTable
  include ::ActiveRecord::Migration::CommandRecorder::StraightReversions
  def add_belongs_to(*args, &block); end

  def add_column(*args, &block); end

  def add_foreign_key(*args, &block); end

  def add_index(*args, &block); end

  def add_reference(*args, &block); end

  def add_timestamps(*args, &block); end

  def change_column(*args, &block); end

  def change_column_default(*args, &block); end

  def change_column_null(*args, &block); end

  def change_table(table_name, options=T.unsafe(nil)); end

  def commands(); end

  def commands=(commands); end

  def create_join_table(*args, &block); end

  def create_table(*args, &block); end

  def delegate(); end

  def delegate=(delegate); end

  def disable_extension(*args, &block); end

  def drop_join_table(*args, &block); end

  def drop_table(*args, &block); end

  def enable_extension(*args, &block); end

  def execute(*args, &block); end

  def execute_block(*args, &block); end

  def initialize(delegate=T.unsafe(nil)); end

  def inverse_of(command, args, &block); end

  def invert_add_belongs_to(args, &block); end

  def invert_remove_belongs_to(args, &block); end

  def record(*command, &block); end

  def remove_belongs_to(*args, &block); end

  def remove_column(*args, &block); end

  def remove_columns(*args, &block); end

  def remove_foreign_key(*args, &block); end

  def remove_index(*args, &block); end

  def remove_reference(*args, &block); end

  def remove_timestamps(*args, &block); end

  def rename_column(*args, &block); end

  def rename_index(*args, &block); end

  def rename_table(*args, &block); end

  def revert(); end

  def reverting(); end

  def reverting=(reverting); end

  def transaction(*args, &block); end
  ReversibleAndIrreversibleMethods = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Migration::CommandRecorder::StraightReversions
  def invert_add_column(args, &block); end

  def invert_add_reference(args, &block); end

  def invert_add_timestamps(args, &block); end

  def invert_create_join_table(args, &block); end

  def invert_create_table(args, &block); end

  def invert_disable_extension(args, &block); end

  def invert_drop_join_table(args, &block); end

  def invert_drop_table(args, &block); end

  def invert_enable_extension(args, &block); end

  def invert_execute_block(args, &block); end

  def invert_remove_column(args, &block); end

  def invert_remove_reference(args, &block); end

  def invert_remove_timestamps(args, &block); end

  def invert_transaction(args, &block); end
end

module ActiveRecord::Migration::CommandRecorder::StraightReversions
end

class ActiveRecord::Migration::CommandRecorder
end

class ActiveRecord::Migration::Compatibility::V4_2
  def add_belongs_to(*_, **options); end

  def add_reference(*_, **options); end

  def add_timestamps(_, **options); end

  def index_exists?(table_name, column_name, options=T.unsafe(nil)); end

  def remove_index(table_name, options=T.unsafe(nil)); end
end

module ActiveRecord::Migration::Compatibility::V4_2::TableDefinition
  def belongs_to(*_, **options); end

  def references(*_, **options); end

  def timestamps(**options); end
end

module ActiveRecord::Migration::Compatibility::V4_2::TableDefinition
end

class ActiveRecord::Migration::Compatibility::V4_2
end

class ActiveRecord::Migration::Compatibility::V5_0
  def add_belongs_to(table_name, ref_name, **options); end

  def add_column(table_name, column_name, type, options=T.unsafe(nil)); end

  def add_reference(table_name, ref_name, **options); end

  def change_table(table_name, options=T.unsafe(nil)); end

  def create_join_table(table_1, table_2, column_options: T.unsafe(nil), **options); end
end

module ActiveRecord::Migration::Compatibility::V5_0::TableDefinition
  def belongs_to(*args, **options); end

  def primary_key(name, type=T.unsafe(nil), **options); end

  def references(*args, **options); end
end

module ActiveRecord::Migration::Compatibility::V5_0::TableDefinition
end

class ActiveRecord::Migration::Compatibility::V5_0
end

class ActiveRecord::Migration::Compatibility::V5_1
  def change_column(table_name, column_name, type, options=T.unsafe(nil)); end

  def create_table(table_name, options=T.unsafe(nil)); end
end

module ActiveRecord::Migration::Compatibility
  def self.find(version); end
end

class ActiveRecord::Migrator
  MIGRATOR_SALT = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::NestedAttributes
  UNASSIGNABLE_KEYS = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::NullRelation
  def any?(); end

  def calculate(operation, _column_name); end

  def delete(_id_or_array); end

  def delete_all(); end

  def empty?(); end

  def exists?(_conditions=T.unsafe(nil)); end

  def many?(); end

  def none?(); end

  def one?(); end

  def or(other); end

  def pluck(*column_names); end

  def to_sql(); end

  def update_all(_updates); end
end

module ActiveRecord::NullRelation
end

module ActiveRecord::QueryMethods
  DEFAULT_VALUES = ::T.let(nil, ::T.untyped)
  FROZEN_EMPTY_ARRAY = ::T.let(nil, ::T.untyped)
  FROZEN_EMPTY_HASH = ::T.let(nil, ::T.untyped)
  STRUCTURAL_OR_METHODS = ::T.let(nil, ::T.untyped)
  VALID_DIRECTIONS = ::T.let(nil, ::T.untyped)
  VALID_UNSCOPING_VALUES = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Querying
  def none(*args, &block); end
end

class ActiveRecord::Relation
  include ::ActiveRecord::Delegation
  include ::ActiveRecord::Explain
  include ::ActiveRecord::Batches
  include ::ActiveRecord::QueryMethods
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveRecord::SpawnMethods
  include ::ActiveRecord::Calculations
  CLAUSE_METHODS = ::T.let(nil, ::T.untyped)
  INVALID_METHODS_FOR_DELETE_ALL = ::T.let(nil, ::T.untyped)
  MULTI_VALUE_METHODS = ::T.let(nil, ::T.untyped)
  SINGLE_VALUE_METHODS = ::T.let(nil, ::T.untyped)
  VALUE_METHODS = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::SchemaMigration
  include ::Kaminari::ActiveRecordModelExtension
  include ::Kaminari::ConfigurationMethods
end

class ActiveRecord::SchemaMigration
  extend ::Kaminari::ConfigurationMethods::ClassMethods
  def self.page(num=T.unsafe(nil)); end
end

class ActiveRecord::StatementCache
  def bind_map(); end

  def execute(params, connection, &block); end

  def initialize(query_builder, bind_map, klass); end

  def klass(); end

  def query_builder(); end
end

class ActiveRecord::StatementCache::BindMap
  def bind(values); end

  def initialize(bound_attributes); end
end

class ActiveRecord::StatementCache::BindMap
end

class ActiveRecord::StatementCache::Params
  def bind(); end
end

class ActiveRecord::StatementCache::Params
end

class ActiveRecord::StatementCache::PartialQuery
  def initialize(values); end
end

class ActiveRecord::StatementCache::PartialQuery
end

class ActiveRecord::StatementCache::Query
  def initialize(sql); end

  def sql_for(binds, connection); end
end

class ActiveRecord::StatementCache::Query
end

class ActiveRecord::StatementCache::Substitute
end

class ActiveRecord::StatementCache::Substitute
end

class ActiveRecord::StatementCache
  def self.create(connection, callable=T.unsafe(nil), &block); end

  def self.partial_query(values); end

  def self.query(sql); end

  def self.unsupported_value?(value); end
end

module ActiveRecord::Tasks::DatabaseTasks
  def charset(*arguments); end

  def charset_current(environment=T.unsafe(nil)); end

  def check_protected_environments!(); end

  def check_schema_file(filename); end

  def check_target_version(); end

  def collation(*arguments); end

  def collation_current(environment=T.unsafe(nil)); end

  def create(*arguments); end

  def create_all(); end

  def create_current(environment=T.unsafe(nil)); end

  def current_config(options=T.unsafe(nil)); end

  def current_config=(current_config); end

  def database_configuration(); end

  def database_configuration=(database_configuration); end

  def db_dir(); end

  def db_dir=(db_dir); end

  def drop(*arguments); end

  def drop_all(); end

  def drop_current(environment=T.unsafe(nil)); end

  def dump_schema_cache(conn, filename); end

  def env(); end

  def env=(env); end

  def fixtures_path(); end

  def fixtures_path=(fixtures_path); end

  def load_schema(configuration, format=T.unsafe(nil), file=T.unsafe(nil), environment=T.unsafe(nil)); end

  def load_schema_current(format=T.unsafe(nil), file=T.unsafe(nil), environment=T.unsafe(nil)); end

  def load_seed(); end

  def migrate(); end

  def migrations_paths(); end

  def migrations_paths=(migrations_paths); end

  def purge(configuration); end

  def purge_all(); end

  def purge_current(environment=T.unsafe(nil)); end

  def register_task(pattern, task); end

  def root(); end

  def root=(root); end

  def schema_file(format=T.unsafe(nil)); end

  def seed_loader(); end

  def seed_loader=(seed_loader); end

  def structure_dump(*arguments); end

  def structure_load(*arguments); end

  def target_version(); end
  LOCAL_HOSTS = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Tasks::DatabaseTasks
  extend ::ActiveRecord::Tasks::DatabaseTasks
  def self.structure_dump_flags(); end

  def self.structure_dump_flags=(obj); end

  def self.structure_load_flags(); end

  def self.structure_load_flags=(obj); end
end

class ActiveRecord::Tasks::MySQLDatabaseTasks
  def charset(); end

  def collation(); end

  def connection(*args, &block); end

  def create(); end

  def drop(); end

  def establish_connection(*args, &block); end

  def initialize(configuration); end

  def purge(); end

  def structure_dump(filename, extra_flags); end

  def structure_load(filename, extra_flags); end
end

class ActiveRecord::Tasks::MySQLDatabaseTasks
end

class ActiveRecord::Tasks::PostgreSQLDatabaseTasks
  def charset(); end

  def clear_active_connections!(*args, &block); end

  def collation(); end

  def connection(*args, &block); end

  def create(master_established=T.unsafe(nil)); end

  def drop(); end

  def establish_connection(*args, &block); end

  def initialize(configuration); end

  def purge(); end

  def structure_dump(filename, extra_flags); end

  def structure_load(filename, extra_flags); end
  DEFAULT_ENCODING = ::T.let(nil, ::T.untyped)
  ON_ERROR_STOP_1 = ::T.let(nil, ::T.untyped)
  SQL_COMMENT_BEGIN = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Tasks::PostgreSQLDatabaseTasks
end

class ActiveRecord::Tasks::SQLiteDatabaseTasks
  def charset(); end

  def connection(*args, &block); end

  def create(); end

  def drop(); end

  def establish_connection(*args, &block); end

  def initialize(configuration, root=T.unsafe(nil)); end

  def purge(); end

  def structure_dump(filename, extra_flags); end

  def structure_load(filename, extra_flags); end
end

class ActiveRecord::Tasks::SQLiteDatabaseTasks
end

module ActiveRecord::Transactions
  ACTIONS = ::T.let(nil, ::T.untyped)
end

ActiveRecord::Type::BigInteger = ActiveModel::Type::BigInteger

ActiveRecord::Type::Binary = ActiveModel::Type::Binary

ActiveRecord::Type::Decimal = ActiveModel::Type::Decimal

ActiveRecord::Type::Float = ActiveModel::Type::Float

ActiveRecord::Type::Helpers = ActiveModel::Type::Helpers

ActiveRecord::Type::Integer = ActiveModel::Type::Integer

class ActiveRecord::Type::Serialized
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Type::Time::Value
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

class ActiveStorage::Service
  def delete(key); end

  def delete_prefixed(prefix); end

  def download(key); end

  def download_chunk(key, range); end

  def exist?(key); end

  def headers_for_direct_upload(key, filename:, content_type:, content_length:, checksum:); end

  def update_metadata(key, **metadata); end

  def upload(key, io, checksum: T.unsafe(nil), **options); end

  def url(key, expires_in:, disposition:, filename:, content_type:); end

  def url_expires_in(); end

  def url_expires_in=(val); end

  def url_expires_in?(); end

  def url_for_direct_upload(key, expires_in:, content_type:, content_length:, checksum:); end
end

class ActiveStorage::Service::Configurator
  def build(service_name); end

  def configurations(); end

  def initialize(configurations); end
end

class ActiveStorage::Service::Configurator
  def self.build(service_name, configurations); end
end

class ActiveStorage::Service
  extend ::ActiveSupport::Autoload
  def self.build(configurator:, service: T.unsafe(nil), **service_config); end

  def self.configure(service_name, configurations); end

  def self.url_expires_in(); end

  def self.url_expires_in=(val); end

  def self.url_expires_in?(); end
end

module ActiveStorage::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::BacktraceCleaner
  def add_filter(&block); end

  def add_silencer(&block); end

  def clean(backtrace, kind=T.unsafe(nil)); end

  def filter(backtrace, kind=T.unsafe(nil)); end

  def remove_filters!(); end

  def remove_silencers!(); end
end

class ActiveSupport::BacktraceCleaner
end

module ActiveSupport::Cache
  UNIVERSAL_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Cache::Entry
  DEFAULT_COMPRESS_LIMIT = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Cache::FileStore
  include ::ActiveSupport::Cache::Strategy::LocalCache
  def cache_path(); end

  def initialize(cache_path, options=T.unsafe(nil)); end
  DIR_FORMATTER = ::T.let(nil, ::T.untyped)
  EXCLUDED_DIRS = ::T.let(nil, ::T.untyped)
  FILENAME_MAX_SIZE = ::T.let(nil, ::T.untyped)
  FILEPATH_MAX_SIZE = ::T.let(nil, ::T.untyped)
  GITKEEP_FILES = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Cache::FileStore
end

class ActiveSupport::Cache::MemCacheStore
  include ::ActiveSupport::Cache::Strategy::LocalCache
  include ::ActiveSupport::Cache::MemCacheStore::LocalCacheWithRaw
  def initialize(*addresses); end

  def stats(); end
  ESCAPE_KEY_CHARS = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Cache::MemCacheStore::LocalCacheWithRaw
end

module ActiveSupport::Cache::MemCacheStore::LocalCacheWithRaw
end

class ActiveSupport::Cache::MemCacheStore
  def self.build_mem_cache(*addresses); end
end

class ActiveSupport::Cache::MemoryStore
  PER_ENTRY_OVERHEAD = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Cache::NullStore
  include ::ActiveSupport::Cache::Strategy::LocalCache
end

module ActiveSupport::Callbacks
  CALLBACK_FILTER_TYPES = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::CurrentAttributes
  include ::ActiveSupport::Callbacks
  def __callbacks(); end

  def __callbacks?(); end

  def _reset_callbacks(); end

  def _run_reset_callbacks(&block); end

  def attributes(); end

  def attributes=(attributes); end

  def reset(); end

  def set(set_attributes); end
end

class ActiveSupport::CurrentAttributes
  extend ::ActiveSupport::DescendantsTracker
  def self.__callbacks(); end

  def self.__callbacks=(val); end

  def self.__callbacks?(); end

  def self._reset_callbacks(); end

  def self._reset_callbacks=(value); end

  def self.attribute(*names); end

  def self.clear_all(); end

  def self.instance(); end

  def self.reset(*args, &block); end

  def self.reset_all(); end

  def self.resets(&block); end

  def self.set(*args, &block); end
end

module ActiveSupport::Dependencies
  Reference = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Deprecation
  def deprecation_horizon(); end

  def deprecation_horizon=(deprecation_horizon); end

  def initialize(deprecation_horizon=T.unsafe(nil), gem_name=T.unsafe(nil)); end
  DEFAULT_BEHAVIORS = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Deprecation::Reporting
  RAILS_GEM_ROOT = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Deprecation
  extend ::ActiveSupport::Deprecation::InstanceDelegator::OverrideDelegators
end

class ActiveSupport::Duration
  PARTS = ::T.let(nil, ::T.untyped)
  PARTS_IN_SECONDS = ::T.let(nil, ::T.untyped)
  SECONDS_PER_DAY = ::T.let(nil, ::T.untyped)
  SECONDS_PER_HOUR = ::T.let(nil, ::T.untyped)
  SECONDS_PER_MINUTE = ::T.let(nil, ::T.untyped)
  SECONDS_PER_MONTH = ::T.let(nil, ::T.untyped)
  SECONDS_PER_WEEK = ::T.let(nil, ::T.untyped)
  SECONDS_PER_YEAR = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Duration::ISO8601Parser
  def initialize(string); end

  def mode(); end

  def mode=(mode); end

  def parse!(); end

  def parts(); end

  def scanner(); end

  def sign(); end

  def sign=(sign); end
  COMMA = ::T.let(nil, ::T.untyped)
  DATE_COMPONENT = ::T.let(nil, ::T.untyped)
  DATE_COMPONENTS = ::T.let(nil, ::T.untyped)
  DATE_MARKER = ::T.let(nil, ::T.untyped)
  DATE_TO_PART = ::T.let(nil, ::T.untyped)
  PERIOD = ::T.let(nil, ::T.untyped)
  PERIOD_OR_COMMA = ::T.let(nil, ::T.untyped)
  SIGN_MARKER = ::T.let(nil, ::T.untyped)
  TIME_COMPONENT = ::T.let(nil, ::T.untyped)
  TIME_COMPONENTS = ::T.let(nil, ::T.untyped)
  TIME_MARKER = ::T.let(nil, ::T.untyped)
  TIME_TO_PART = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Duration::ISO8601Parser::ParsingError
end

class ActiveSupport::Duration::ISO8601Parser::ParsingError
end

class ActiveSupport::Duration::ISO8601Parser
end

class ActiveSupport::Duration::ISO8601Serializer
  def initialize(duration, precision: T.unsafe(nil)); end

  def serialize(); end
end

class ActiveSupport::Duration::ISO8601Serializer
end

class ActiveSupport::EncryptedFile
  CIPHER = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::ExecutionWrapper
  Null = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Gzip
end

class ActiveSupport::Gzip::Stream
end

class ActiveSupport::Gzip::Stream
end

module ActiveSupport::Gzip
  def self.compress(source, level=T.unsafe(nil), strategy=T.unsafe(nil)); end

  def self.decompress(source); end
end

module ActiveSupport::JSON
  DATETIME_REGEX = ::T.let(nil, ::T.untyped)
  DATE_REGEX = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::LegacyKeyGenerator
  SECRET_MIN_LENGTH = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::LogSubscriber
  def colorize_logging(); end

  def colorize_logging=(obj); end

  def debug(progname=T.unsafe(nil), &block); end

  def error(progname=T.unsafe(nil), &block); end

  def fatal(progname=T.unsafe(nil), &block); end

  def info(progname=T.unsafe(nil), &block); end

  def logger(); end

  def unknown(progname=T.unsafe(nil), &block); end

  def warn(progname=T.unsafe(nil), &block); end
  BLACK = ::T.let(nil, ::T.untyped)
  BLUE = ::T.let(nil, ::T.untyped)
  BOLD = ::T.let(nil, ::T.untyped)
  CLEAR = ::T.let(nil, ::T.untyped)
  CYAN = ::T.let(nil, ::T.untyped)
  GREEN = ::T.let(nil, ::T.untyped)
  MAGENTA = ::T.let(nil, ::T.untyped)
  RED = ::T.let(nil, ::T.untyped)
  WHITE = ::T.let(nil, ::T.untyped)
  YELLOW = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::MessageEncryptor
  include ::ActiveSupport::Messages::Rotator::Encryptor
  include ::ActiveSupport::Messages::Rotator
end

ActiveSupport::MessageEncryptor::OpenSSLCipherError = OpenSSL::Cipher::CipherError

class ActiveSupport::MessageVerifier
  include ::ActiveSupport::Messages::Rotator::Verifier
  include ::ActiveSupport::Messages::Rotator
end

module ActiveSupport::Multibyte::Unicode
  HANGUL_LBASE = ::T.let(nil, ::T.untyped)
  HANGUL_LCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_NCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_SBASE = ::T.let(nil, ::T.untyped)
  HANGUL_SCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_SLAST = ::T.let(nil, ::T.untyped)
  HANGUL_TBASE = ::T.let(nil, ::T.untyped)
  HANGUL_TCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_VBASE = ::T.let(nil, ::T.untyped)
  HANGUL_VCOUNT = ::T.let(nil, ::T.untyped)
  NORMALIZATION_FORMS = ::T.let(nil, ::T.untyped)
  UNICODE_VERSION = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Multibyte::Unicode::UnicodeDatabase
  ATTRIBUTES = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::NumberHelper::NumberConverter
  def execute(); end

  def initialize(number, options); end

  def namespace(); end

  def namespace=(val); end

  def namespace?(); end

  def number(); end

  def opts(); end

  def validate_float(); end

  def validate_float=(val); end

  def validate_float?(); end
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::NumberHelper::NumberConverter
  def self.convert(number, options); end

  def self.namespace(); end

  def self.namespace=(val); end

  def self.namespace?(); end

  def self.validate_float(); end

  def self.validate_float=(val); end

  def self.validate_float?(); end
end

class ActiveSupport::NumberHelper::NumberToCurrencyConverter
  def convert(); end
end

class ActiveSupport::NumberHelper::NumberToCurrencyConverter
end

class ActiveSupport::NumberHelper::NumberToDelimitedConverter
  def convert(); end
  DEFAULT_DELIMITER_REGEX = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::NumberHelper::NumberToDelimitedConverter
end

class ActiveSupport::NumberHelper::NumberToHumanConverter
  def convert(); end
  DECIMAL_UNITS = ::T.let(nil, ::T.untyped)
  INVERTED_DECIMAL_UNITS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::NumberHelper::NumberToHumanConverter
end

class ActiveSupport::NumberHelper::NumberToHumanSizeConverter
  def convert(); end
  STORAGE_UNITS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::NumberHelper::NumberToHumanSizeConverter
end

class ActiveSupport::NumberHelper::NumberToPercentageConverter
  def convert(); end
end

class ActiveSupport::NumberHelper::NumberToPercentageConverter
end

class ActiveSupport::NumberHelper::NumberToPhoneConverter
  def convert(); end
end

class ActiveSupport::NumberHelper::NumberToPhoneConverter
end

class ActiveSupport::NumberHelper::NumberToRoundedConverter
  def convert(); end
end

class ActiveSupport::NumberHelper::NumberToRoundedConverter
end

class ActiveSupport::NumberHelper::RoundingHelper
  def digit_count(number); end

  def initialize(options); end

  def options(); end

  def round(number); end
end

class ActiveSupport::NumberHelper::RoundingHelper
end

class ActiveSupport::OrderedHash
  def encode_with(coder); end

  def reject(*args, &block); end

  def select(*args, &block); end

  def to_yaml_type(); end
end

class ActiveSupport::OrderedHash
end

module ActiveSupport::RangeWithFormat
  RANGE_FORMATS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::SafeBuffer
  UNSAFE_STRING_METHODS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Subscriber
  def finish(name, id, payload); end

  def patterns(); end

  def start(name, id, payload); end
end

class ActiveSupport::TestCase
  include ::ActiveSupport::Testing::SetupAndTeardown
end

module ActiveSupport::Testing::Assertions
  UNTRACKED = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Testing::Isolation::Subprocess
  ORIG_ARGV = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::TimeWithZone
  include ::DateAndTime::Compatibility
  PRECISIONS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::TimeZone
  MAPPING = ::T.let(nil, ::T.untyped)
  UTC_OFFSET_WITHOUT_COLON = ::T.let(nil, ::T.untyped)
  UTC_OFFSET_WITH_COLON = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::XMLConverter
  DISALLOWED_TYPES = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::XmlMini
  DEFAULT_ENCODINGS = ::T.let(nil, ::T.untyped)
  FORMATTING = ::T.let(nil, ::T.untyped)
  PARSING = ::T.let(nil, ::T.untyped)
  TYPE_NAMES = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::XmlMini_REXML
  CONTENT_KEY = ::T.let(nil, ::T.untyped)
end

module Addressable::IDNA
  ACE_MAX_LENGTH = ::T.let(nil, ::T.untyped)
  ACE_PREFIX = ::T.let(nil, ::T.untyped)
  COMPOSITION_TABLE = ::T.let(nil, ::T.untyped)
  HANGUL_LBASE = ::T.let(nil, ::T.untyped)
  HANGUL_LCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_NCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_SBASE = ::T.let(nil, ::T.untyped)
  HANGUL_SCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_TBASE = ::T.let(nil, ::T.untyped)
  HANGUL_TCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_VBASE = ::T.let(nil, ::T.untyped)
  HANGUL_VCOUNT = ::T.let(nil, ::T.untyped)
  PUNYCODE_BASE = ::T.let(nil, ::T.untyped)
  PUNYCODE_DAMP = ::T.let(nil, ::T.untyped)
  PUNYCODE_DELIMITER = ::T.let(nil, ::T.untyped)
  PUNYCODE_INITIAL_BIAS = ::T.let(nil, ::T.untyped)
  PUNYCODE_INITIAL_N = ::T.let(nil, ::T.untyped)
  PUNYCODE_MAXINT = ::T.let(nil, ::T.untyped)
  PUNYCODE_PRINT_ASCII = ::T.let(nil, ::T.untyped)
  PUNYCODE_SKEW = ::T.let(nil, ::T.untyped)
  PUNYCODE_TMAX = ::T.let(nil, ::T.untyped)
  PUNYCODE_TMIN = ::T.let(nil, ::T.untyped)
  UNICODE_DATA = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_CANONICAL = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_COMBINING_CLASS = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_COMPATIBILITY = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_EXCLUSION = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_LOWERCASE = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_TITLECASE = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_UPPERCASE = ::T.let(nil, ::T.untyped)
  UNICODE_MAX_LENGTH = ::T.let(nil, ::T.untyped)
  UNICODE_TABLE = ::T.let(nil, ::T.untyped)
  UTF8_REGEX = ::T.let(nil, ::T.untyped)
  UTF8_REGEX_MULTIBYTE = ::T.let(nil, ::T.untyped)
end

class Addressable::URI
  EMPTY_STR = ::T.let(nil, ::T.untyped)
  NORMPATH = ::T.let(nil, ::T.untyped)
  PARENT = ::T.let(nil, ::T.untyped)
  PORT_MAPPING = ::T.let(nil, ::T.untyped)
  RULE_2A = ::T.let(nil, ::T.untyped)
  RULE_2B_2C = ::T.let(nil, ::T.untyped)
  RULE_2D = ::T.let(nil, ::T.untyped)
  RULE_PREFIXED_PARENT = ::T.let(nil, ::T.untyped)
  SELF_REF = ::T.let(nil, ::T.untyped)
  SEQUENCE_ENCODING_TABLE = ::T.let(nil, ::T.untyped)
  SEQUENCE_UPCASED_PERCENT_ENCODING_TABLE = ::T.let(nil, ::T.untyped)
  SLASH = ::T.let(nil, ::T.untyped)
  URIREGEX = ::T.let(nil, ::T.untyped)
end

module Addressable::URI::CharacterClasses
  ALPHA = ::T.let(nil, ::T.untyped)
  AUTHORITY = ::T.let(nil, ::T.untyped)
  DIGIT = ::T.let(nil, ::T.untyped)
  FRAGMENT = ::T.let(nil, ::T.untyped)
  GEN_DELIMS = ::T.let(nil, ::T.untyped)
  HOST = ::T.let(nil, ::T.untyped)
  PATH = ::T.let(nil, ::T.untyped)
  PCHAR = ::T.let(nil, ::T.untyped)
  QUERY = ::T.let(nil, ::T.untyped)
  RESERVED = ::T.let(nil, ::T.untyped)
  SCHEME = ::T.let(nil, ::T.untyped)
  SUB_DELIMS = ::T.let(nil, ::T.untyped)
  UNRESERVED = ::T.let(nil, ::T.untyped)
end

module Addressable::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

module Admin
end

class Admin::CommentsController
  def create(); end
end

class Admin::CommentsController
  def self.resource_class=(klass); end
end

class Admin::DashboardController
end

class Admin::DashboardController
end

class Admin::PurchasedRecipesController
end

class Admin::PurchasedRecipesController
  def self.resource_class=(klass); end
end

module Admin
end

module Annotate::Constants
  ALL_ANNOTATE_OPTIONS = ::T.let(nil, ::T.untyped)
  FLAG_OPTIONS = ::T.let(nil, ::T.untyped)
  OTHER_OPTIONS = ::T.let(nil, ::T.untyped)
  PATH_OPTIONS = ::T.let(nil, ::T.untyped)
  POSITION_OPTIONS = ::T.let(nil, ::T.untyped)
  TRUE_RE = ::T.let(nil, ::T.untyped)
end

module AnnotateModels
  ACTIVEADMIN_DIR = ::T.let(nil, ::T.untyped)
  BLUEPRINTS_SPEC_DIR = ::T.let(nil, ::T.untyped)
  BLUEPRINTS_TEST_DIR = ::T.let(nil, ::T.untyped)
  COMPAT_PREFIX = ::T.let(nil, ::T.untyped)
  COMPAT_PREFIX_MD = ::T.let(nil, ::T.untyped)
  CONTROLLER_DIR = ::T.let(nil, ::T.untyped)
  CONTROLLER_SPEC_DIR = ::T.let(nil, ::T.untyped)
  CONTROLLER_TEST_DIR = ::T.let(nil, ::T.untyped)
  END_MARK = ::T.let(nil, ::T.untyped)
  EXEMPLARS_SPEC_DIR = ::T.let(nil, ::T.untyped)
  EXEMPLARS_TEST_DIR = ::T.let(nil, ::T.untyped)
  FABRICATORS_SPEC_DIR = ::T.let(nil, ::T.untyped)
  FABRICATORS_TEST_DIR = ::T.let(nil, ::T.untyped)
  FACTORY_BOT_SPEC_DIR = ::T.let(nil, ::T.untyped)
  FACTORY_BOT_TEST_DIR = ::T.let(nil, ::T.untyped)
  FIXTURE_SPEC_DIR = ::T.let(nil, ::T.untyped)
  FIXTURE_TEST_DIR = ::T.let(nil, ::T.untyped)
  HELPER_DIR = ::T.let(nil, ::T.untyped)
  INDEX_CLAUSES = ::T.let(nil, ::T.untyped)
  MAGIC_COMMENT_MATCHER = ::T.let(nil, ::T.untyped)
  MATCHED_TYPES = ::T.let(nil, ::T.untyped)
  MODEL_TEST_DIR = ::T.let(nil, ::T.untyped)
  NO_DEFAULT_COL_TYPES = ::T.let(nil, ::T.untyped)
  NO_LIMIT_COL_TYPES = ::T.let(nil, ::T.untyped)
  PREFIX = ::T.let(nil, ::T.untyped)
  PREFIX_MD = ::T.let(nil, ::T.untyped)
  REQUEST_SPEC_DIR = ::T.let(nil, ::T.untyped)
  ROUTING_SPEC_DIR = ::T.let(nil, ::T.untyped)
  SERIALIZERS_DIR = ::T.let(nil, ::T.untyped)
  SERIALIZERS_SPEC_DIR = ::T.let(nil, ::T.untyped)
  SERIALIZERS_TEST_DIR = ::T.let(nil, ::T.untyped)
  SKIP_ANNOTATION_PREFIX = ::T.let(nil, ::T.untyped)
  SPEC_MODEL_DIR = ::T.let(nil, ::T.untyped)
  UNIT_TEST_DIR = ::T.let(nil, ::T.untyped)
end

module AnnotateRoutes
  HEADER_ROW = ::T.let(nil, ::T.untyped)
  PREFIX = ::T.let(nil, ::T.untyped)
  PREFIX_MD = ::T.let(nil, ::T.untyped)
end

module AnnotateRoutes::Helpers
  MAGIC_COMMENT_MATCHER = ::T.let(nil, ::T.untyped)
end

module Api
end

class Api::IngredientsController
  def index(); end
end

class Api::IngredientsController
end

class Api::RecipesController
  def index(); end
end

class Api::RecipesController
end

module Api
end

module ApplicationCable
end

class ApplicationCable::Channel
end

class ApplicationCable::Channel
end

class ApplicationCable::Connection
end

class ApplicationCable::Connection
end

module ApplicationCable
end

class ApplicationController
  def status(); end
end

class ApplicationController
end

class ApplicationRecord
  include ::ApplicationRecord::GeneratedAssociationMethods
  include ::Kaminari::ActiveRecordModelExtension
  include ::Kaminari::ConfigurationMethods
  RelationType = ::T.let(nil, ::T.untyped)
end

class ApplicationRecord::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::ApplicationRecord::GeneratedRelationMethods
end

class ApplicationRecord::ActiveRecord_AssociationRelation
end

class ApplicationRecord::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::ApplicationRecord::GeneratedRelationMethods
end

class ApplicationRecord::ActiveRecord_Associations_CollectionProxy
end

class ApplicationRecord::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::ApplicationRecord::GeneratedRelationMethods
end

class ApplicationRecord::ActiveRecord_Relation
end

module ApplicationRecord::GeneratedAssociationMethods
end

module ApplicationRecord::GeneratedAssociationMethods
end

module ApplicationRecord::GeneratedRelationMethods
end

module ApplicationRecord::GeneratedRelationMethods
end

class ApplicationRecord
  extend ::Kaminari::ConfigurationMethods::ClassMethods
  def self.page(num=T.unsafe(nil)); end
end

module Arbre
end

class Arbre::Component
  def default_class_name(); end
end

class Arbre::Component
end

class Arbre::Context
  def bytesize(); end

  def initialize(assigns=T.unsafe(nil), helpers=T.unsafe(nil), &block); end

  def length(); end

  def method_missing(method, *args, &block); end

  def with_current_arbre_element(tag); end

  def within(tag); end
end

class Arbre::Context
end

class Arbre::Element
  include ::Arbre::Element::BuilderMethods
  include ::Arbre::Rails::Rendering
  def +(element); end

  def <<(child); end

  def add_child(child); end

  def ancestors(); end

  def arbre_context(); end

  def assigns(); end

  def build(*args, &block); end

  def children(); end

  def children?(); end

  def content(); end

  def content=(contents); end

  def each(&block); end

  def find_by_class(class_name); end

  def find_by_tag(tag_name); end

  def find_first_ancestor(type); end

  def get_elements_by_class_name(class_name); end

  def get_elements_by_tag_name(tag_name); end

  def helpers(); end

  def html_safe(); end

  def indent_level(); end

  def initialize(arbre_context=T.unsafe(nil)); end

  def parent(); end

  def parent=(parent); end

  def parent?(); end

  def remove_child(child); end

  def tag_name(); end

  def to_a(); end

  def to_ary(); end

  def to_str(); end
end

module Arbre::Element::BuilderMethods
  def a(*args, &block); end

  def abbr(*args, &block); end

  def action_items(*args, &block); end

  def active_admin_comments_for(*args, &block); end

  def active_admin_form_for(*args, &block); end

  def address(*args, &block); end

  def area(*args, &block); end

  def article(*args, &block); end

  def aside(*args, &block); end

  def attributes_table_for(*args, &block); end

  def audio(*args, &block); end

  def b(*args, &block); end

  def base(*args, &block); end

  def batch_action_form(*args, &block); end

  def batch_action_selector(*args, &block); end

  def bdo(*args, &block); end

  def blank_slate(*args, &block); end

  def blockquote(*args, &block); end

  def body(*args, &block); end

  def br(*args, &block); end

  def build_tag(klass, *args, &block); end

  def button(*args, &block); end

  def canvas(*args, &block); end

  def caption(*args, &block); end

  def cite(*args, &block); end

  def code(*args, &block); end

  def col(*args, &block); end

  def colgroup(*args, &block); end

  def columns(*args, &block); end

  def command(*args, &block); end

  def current_arbre_element(); end

  def datalist(*args, &block); end

  def dd(*args, &block); end

  def del(*args, &block); end

  def details(*args, &block); end

  def dfn(*args, &block); end

  def div(*args, &block); end

  def dl(*args, &block); end

  def dropdown_menu(*args, &block); end

  def dt(*args, &block); end

  def edit_page(*args, &block); end

  def em(*args, &block); end

  def embed(*args, &block); end

  def fieldset(*args, &block); end

  def figcaption(*args, &block); end

  def figure(*args, &block); end

  def footer(*args, &block); end

  def form(*args, &block); end

  def form_for(*args, &block); end

  def global_navigation(*args, &block); end

  def h1(*args, &block); end

  def h2(*args, &block); end

  def h3(*args, &block); end

  def h4(*args, &block); end

  def h5(*args, &block); end

  def h6(*args, &block); end

  def head(*args, &block); end

  def header(*args, &block); end

  def hgroup(*args, &block); end

  def hr(*args, &block); end

  def html(*args, &block); end

  def i(*args, &block); end

  def iframe(*args, &block); end

  def img(*args, &block); end

  def index_list_renderer(*args, &block); end

  def index_page(*args, &block); end

  def index_scopes(*args, &block); end

  def input(*args, &block); end

  def ins(*args, &block); end

  def insert_tag(klass, *args, &block); end

  def kbd(*args, &block); end

  def keygen(*args, &block); end

  def label(*args, &block); end

  def layout(*args, &block); end

  def legend(*args, &block); end

  def li(*args, &block); end

  def link(*args, &block); end

  def map(*args, &block); end

  def mark(*args, &block); end

  def menu(*args, &block); end

  def menu_item(*args, &block); end

  def menuitem(*args, &block); end

  def meta(*args, &block); end

  def meter(*args, &block); end

  def nav(*args, &block); end

  def new_page(*args, &block); end

  def noscript(*args, &block); end

  def object(*args, &block); end

  def ol(*args, &block); end

  def optgroup(*args, &block); end

  def option(*args, &block); end

  def output(*args, &block); end

  def page(*args, &block); end

  def paginated_collection(*args, &block); end

  def panel(*args, &block); end

  def para(*args, &block); end

  def param(*args, &block); end

  def pre(*args, &block); end

  def progress(*args, &block); end

  def q(*args, &block); end

  def resource_selection_cell(*args, &block); end

  def resource_selection_toggle_cell(*args, &block); end

  def resource_selection_toggle_panel(*args, &block); end

  def s(*args, &block); end

  def samp(*args, &block); end

  def scopes_renderer(*args, &block); end

  def script(*args, &block); end

  def section(*args, &block); end

  def select(*args, &block); end

  def show_page(*args, &block); end

  def sidebar(*args, &block); end

  def sidebar_section(*args, &block); end

  def site_title(*args, &block); end

  def small(*args, &block); end

  def source(*args, &block); end

  def span(*args, &block); end

  def status_tag(*args, &block); end

  def strong(*args, &block); end

  def style(*args, &block); end

  def sub(*args, &block); end

  def summary(*args, &block); end

  def sup(*args, &block); end

  def svg(*args, &block); end

  def table(*args, &block); end

  def table_actions(*args, &block); end

  def table_for(*args, &block); end

  def tabs(*args, &block); end

  def tbody(*args, &block); end

  def td(*args, &block); end

  def text_node(*args, &block); end

  def textarea(*args, &block); end

  def tfoot(*args, &block); end

  def th(*args, &block); end

  def thead(*args, &block); end

  def time(*args, &block); end

  def title(*args, &block); end

  def title_bar(*args, &block); end

  def tr(*args, &block); end

  def track(*args, &block); end

  def ul(*args, &block); end

  def unsupported_browser(*args, &block); end

  def utility_navigation(*args, &block); end

  def var(*args, &block); end

  def video(*args, &block); end

  def wbr(*args, &block); end

  def with_current_arbre_element(tag, &block); end

  def within(tag, &block); end
end

module Arbre::Element::BuilderMethods
  def self.included(klass); end
end

class Arbre::Element
end

class Arbre::ElementCollection
  def &(other); end

  def +(other); end

  def -(other); end

  def to_s(); end
end

class Arbre::ElementCollection
end

module Arbre::HTML
  AUTO_BUILD_ELEMENTS = ::T.let(nil, ::T.untyped)
  HTML5_ELEMENTS = ::T.let(nil, ::T.untyped)
end

class Arbre::HTML::A
end

class Arbre::HTML::A
end

class Arbre::HTML::Abbr
end

class Arbre::HTML::Abbr
end

class Arbre::HTML::Address
end

class Arbre::HTML::Address
end

class Arbre::HTML::Area
end

class Arbre::HTML::Area
end

class Arbre::HTML::Article
end

class Arbre::HTML::Article
end

class Arbre::HTML::Aside
end

class Arbre::HTML::Aside
end

class Arbre::HTML::Attributes
  def any?(); end

  def html_escape(s); end

  def value_empty?(value); end
end

class Arbre::HTML::Attributes
end

class Arbre::HTML::Audio
end

class Arbre::HTML::Audio
end

class Arbre::HTML::B
end

class Arbre::HTML::B
end

class Arbre::HTML::Base
end

class Arbre::HTML::Base
end

class Arbre::HTML::Bdo
end

class Arbre::HTML::Bdo
end

class Arbre::HTML::Blockquote
end

class Arbre::HTML::Blockquote
end

class Arbre::HTML::Body
end

class Arbre::HTML::Body
end

class Arbre::HTML::Br
end

class Arbre::HTML::Br
end

class Arbre::HTML::Button
end

class Arbre::HTML::Button
end

class Arbre::HTML::Canvas
end

class Arbre::HTML::Canvas
end

class Arbre::HTML::Caption
end

class Arbre::HTML::Caption
end

class Arbre::HTML::Cite
end

class Arbre::HTML::Cite
end

class Arbre::HTML::ClassList
  def <<(class_names); end

  def add(class_names); end
end

class Arbre::HTML::ClassList
  def self.build_from_string(class_names); end
end

class Arbre::HTML::Code
end

class Arbre::HTML::Code
end

class Arbre::HTML::Col
end

class Arbre::HTML::Col
end

class Arbre::HTML::Colgroup
end

class Arbre::HTML::Colgroup
end

class Arbre::HTML::Command
end

class Arbre::HTML::Command
end

class Arbre::HTML::Datalist
end

class Arbre::HTML::Datalist
end

class Arbre::HTML::Dd
end

class Arbre::HTML::Dd
end

class Arbre::HTML::Del
end

class Arbre::HTML::Del
end

class Arbre::HTML::Details
end

class Arbre::HTML::Details
end

class Arbre::HTML::Dfn
end

class Arbre::HTML::Dfn
end

class Arbre::HTML::Div
end

class Arbre::HTML::Div
end

class Arbre::HTML::Dl
end

class Arbre::HTML::Dl
end

class Arbre::HTML::Document
  def build_body(); end

  def build_head(); end

  def doctype(); end

  def document(); end
end

class Arbre::HTML::Document
end

class Arbre::HTML::Dt
end

class Arbre::HTML::Dt
end

class Arbre::HTML::Em
end

class Arbre::HTML::Em
end

class Arbre::HTML::Embed
end

class Arbre::HTML::Embed
end

class Arbre::HTML::Fieldset
end

class Arbre::HTML::Fieldset
end

class Arbre::HTML::Figcaption
end

class Arbre::HTML::Figcaption
end

class Arbre::HTML::Figure
end

class Arbre::HTML::Figure
end

class Arbre::HTML::Footer
end

class Arbre::HTML::Footer
end

class Arbre::HTML::Form
end

class Arbre::HTML::Form
end

class Arbre::HTML::H1
end

class Arbre::HTML::H1
end

class Arbre::HTML::H2
end

class Arbre::HTML::H2
end

class Arbre::HTML::H3
end

class Arbre::HTML::H3
end

class Arbre::HTML::H4
end

class Arbre::HTML::H4
end

class Arbre::HTML::H5
end

class Arbre::HTML::H5
end

class Arbre::HTML::H6
end

class Arbre::HTML::H6
end

class Arbre::HTML::Head
end

class Arbre::HTML::Head
end

class Arbre::HTML::Header
end

class Arbre::HTML::Header
end

class Arbre::HTML::Hgroup
end

class Arbre::HTML::Hgroup
end

class Arbre::HTML::Hr
end

class Arbre::HTML::Hr
end

class Arbre::HTML::Html
end

class Arbre::HTML::Html
end

class Arbre::HTML::I
end

class Arbre::HTML::I
end

class Arbre::HTML::Iframe
end

class Arbre::HTML::Iframe
end

class Arbre::HTML::Img
end

class Arbre::HTML::Img
end

class Arbre::HTML::Input
end

class Arbre::HTML::Input
end

class Arbre::HTML::Ins
end

class Arbre::HTML::Ins
end

class Arbre::HTML::Kbd
end

class Arbre::HTML::Kbd
end

class Arbre::HTML::Keygen
end

class Arbre::HTML::Keygen
end

class Arbre::HTML::Label
end

class Arbre::HTML::Label
end

class Arbre::HTML::Legend
end

class Arbre::HTML::Legend
end

class Arbre::HTML::Li
end

class Arbre::HTML::Li
end

class Arbre::HTML::Link
end

class Arbre::HTML::Link
end

class Arbre::HTML::Map
end

class Arbre::HTML::Map
end

class Arbre::HTML::Mark
end

class Arbre::HTML::Mark
end

class Arbre::HTML::Menu
end

class Arbre::HTML::Menu
end

class Arbre::HTML::Menuitem
end

class Arbre::HTML::Menuitem
end

class Arbre::HTML::Meta
end

class Arbre::HTML::Meta
end

class Arbre::HTML::Meter
end

class Arbre::HTML::Meter
end

class Arbre::HTML::Nav
end

class Arbre::HTML::Nav
end

class Arbre::HTML::Noscript
end

class Arbre::HTML::Noscript
end

class Arbre::HTML::Object
end

class Arbre::HTML::Object
end

class Arbre::HTML::Ol
end

class Arbre::HTML::Ol
end

class Arbre::HTML::Optgroup
end

class Arbre::HTML::Optgroup
end

class Arbre::HTML::Option
end

class Arbre::HTML::Option
end

class Arbre::HTML::Output
end

class Arbre::HTML::Output
end

class Arbre::HTML::P
end

class Arbre::HTML::P
end

class Arbre::HTML::Param
end

class Arbre::HTML::Param
end

class Arbre::HTML::Pre
end

class Arbre::HTML::Pre
end

class Arbre::HTML::Progress
end

class Arbre::HTML::Progress
end

class Arbre::HTML::Q
end

class Arbre::HTML::Q
end

class Arbre::HTML::S
end

class Arbre::HTML::S
end

class Arbre::HTML::Samp
end

class Arbre::HTML::Samp
end

class Arbre::HTML::Script
end

class Arbre::HTML::Script
end

class Arbre::HTML::Section
end

class Arbre::HTML::Section
end

class Arbre::HTML::Select
end

class Arbre::HTML::Select
end

class Arbre::HTML::Small
end

class Arbre::HTML::Small
end

class Arbre::HTML::Source
end

class Arbre::HTML::Source
end

class Arbre::HTML::Span
end

class Arbre::HTML::Span
end

class Arbre::HTML::Strong
end

class Arbre::HTML::Strong
end

class Arbre::HTML::Style
end

class Arbre::HTML::Style
end

class Arbre::HTML::Sub
end

class Arbre::HTML::Sub
end

class Arbre::HTML::Summary
end

class Arbre::HTML::Summary
end

class Arbre::HTML::Sup
end

class Arbre::HTML::Sup
end

class Arbre::HTML::Svg
end

class Arbre::HTML::Svg
end

class Arbre::HTML::Table
  def set_table_tag_defaults(); end
end

class Arbre::HTML::Table
end

class Arbre::HTML::Tag
  def add_class(class_names); end

  def attr(name); end

  def attributes(); end

  def build(*args); end

  def class_list(); end

  def class_names(); end

  def extract_arguments(args); end

  def get_attribute(name); end

  def has_attribute?(name); end

  def id(); end

  def id!(); end

  def id=(id); end

  def initialize(*_); end

  def remove_attribute(name); end

  def remove_class(class_names); end

  def set_attribute(name, value); end
  INDENT_SIZE = ::T.let(nil, ::T.untyped)
  SELF_CLOSING_ELEMENTS = ::T.let(nil, ::T.untyped)
end

class Arbre::HTML::Tag
end

class Arbre::HTML::Tbody
end

class Arbre::HTML::Tbody
end

class Arbre::HTML::Td
end

class Arbre::HTML::Td
end

class Arbre::HTML::TextNode
  def add_child(*args); end

  def build(string); end

  def class_list(); end
end

class Arbre::HTML::TextNode
  def self.from_string(string); end
end

class Arbre::HTML::Textarea
end

class Arbre::HTML::Textarea
end

class Arbre::HTML::Tfoot
end

class Arbre::HTML::Tfoot
end

class Arbre::HTML::Th
end

class Arbre::HTML::Th
end

class Arbre::HTML::Thead
end

class Arbre::HTML::Thead
end

class Arbre::HTML::Time
end

class Arbre::HTML::Time
end

class Arbre::HTML::Title
end

class Arbre::HTML::Title
end

class Arbre::HTML::Tr
end

class Arbre::HTML::Tr
end

class Arbre::HTML::Track
end

class Arbre::HTML::Track
end

class Arbre::HTML::Ul
end

class Arbre::HTML::Ul
end

class Arbre::HTML::Var
end

class Arbre::HTML::Var
end

class Arbre::HTML::Video
end

class Arbre::HTML::Video
end

class Arbre::HTML::Wbr
end

class Arbre::HTML::Wbr
end

module Arbre::HTML
end

module Arbre::Rails
end

module Arbre::Rails::Forms
end

class Arbre::Rails::Forms::FieldsForProxy
  def build(form_builder, *args, &block); end
end

class Arbre::Rails::Forms::FieldsForProxy
end

class Arbre::Rails::Forms::FormBuilderProxy
  def form_builder(); end

  def label(*args); end

  def select(*args); end
end

class Arbre::Rails::Forms::FormBuilderProxy
end

class Arbre::Rails::Forms::FormForProxy
  def build(resource, form_options=T.unsafe(nil), &block); end

  def fields_for(*args, &block); end

  def split_string_on(string, match); end
end

class Arbre::Rails::Forms::FormForProxy
end

module Arbre::Rails::Forms
end

module Arbre::Rails::Rendering
  def render(*args); end
end

module Arbre::Rails::Rendering
end

class Arbre::Rails::TemplateHandler
  def call(template, source=T.unsafe(nil)); end
end

class Arbre::Rails::TemplateHandler
end

module Arbre::Rails
end

module Arbre
end

module Arel
  VERSION = ::T.let(nil, ::T.untyped)
end

Arel::Attribute = Arel::Attributes::Attribute

Arel::Node = Arel::Nodes::Node

class Arel::SelectManager
  STRING_OR_SYMBOL_CLASS = ::T.let(nil, ::T.untyped)
end

class Arel::Visitors::DepthFirst
  DISPATCH = ::T.let(nil, ::T.untyped)
end

class Arel::Visitors::PostgreSQL
  CUBE = ::T.let(nil, ::T.untyped)
  GROUPING_SET = ::T.let(nil, ::T.untyped)
  ROLLUP = ::T.let(nil, ::T.untyped)
end

class Arel::Visitors::ToSql
  AND = ::T.let(nil, ::T.untyped)
  COMMA = ::T.let(nil, ::T.untyped)
  DISTINCT = ::T.let(nil, ::T.untyped)
  GROUP_BY = ::T.let(nil, ::T.untyped)
  ORDER_BY = ::T.let(nil, ::T.untyped)
  SPACE = ::T.let(nil, ::T.untyped)
  WHERE = ::T.let(nil, ::T.untyped)
  WINDOW = ::T.let(nil, ::T.untyped)
end

class Array
  include ::JSON::Ext::Generator::GeneratorMethods::Array
  def abbrev(pattern=T.unsafe(nil)); end

  def shelljoin(); end

  def to_csv(**options); end

  def to_h(); end

end

class Array
  def self.try_convert(_); end
end

module BCrypt
end

class BCrypt::Engine
  DEFAULT_COST = ::T.let(nil, ::T.untyped)
  MAX_SALT_LENGTH = ::T.let(nil, ::T.untyped)
  MIN_COST = ::T.let(nil, ::T.untyped)
end

class BCrypt::Engine
  def self.autodetect_cost(salt); end

  def self.calibrate(upper_time_limit_in_ms); end

  def self.cost(); end

  def self.cost=(cost); end

  def self.generate_salt(cost=T.unsafe(nil)); end

  def self.hash_secret(secret, salt, _=T.unsafe(nil)); end

  def self.valid_salt?(salt); end

  def self.valid_secret?(secret); end
end

class BCrypt::Error
end

class BCrypt::Error
end

module BCrypt::Errors
end

class BCrypt::Errors::InvalidCost
end

class BCrypt::Errors::InvalidCost
end

class BCrypt::Errors::InvalidHash
end

class BCrypt::Errors::InvalidHash
end

class BCrypt::Errors::InvalidSalt
end

class BCrypt::Errors::InvalidSalt
end

class BCrypt::Errors::InvalidSecret
end

class BCrypt::Errors::InvalidSecret
end

module BCrypt::Errors
end

class BCrypt::Password
  def ==(secret); end

  def checksum(); end

  def cost(); end

  def initialize(raw_hash); end

  def is_password?(secret); end

  def salt(); end

  def version(); end
end

class BCrypt::Password
  def self.create(secret, options=T.unsafe(nil)); end

  def self.valid_hash?(h); end
end

module BCrypt
end

BasicObject::BasicObject = BasicObject

class Benchmark::Job
  def initialize(width); end
end

class Benchmark::Report
  def initialize(width=T.unsafe(nil), format=T.unsafe(nil)); end
end

class Benchmark::Tms
  def to_a(); end
end

class BigDecimal
  include ::ActiveSupport::BigDecimalWithDefaultFormat
  include ::ActiveSupport::NumericWithFormat
  def clone(); end

  def to_digits(); end
  EXCEPTION_NaN = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class BigDecimal
  def self.ver(); end
end

class Binding
  def clone(); end

  def irb(); end
end

module Bullet
  BULLET_DEBUG = ::T.let(nil, ::T.untyped)
  TRUE = ::T.let(nil, ::T.untyped)
end

module Bullet::ActiveJob
end

module Bullet::ActiveJob
  def self.included(base); end
end

module Bullet::Notification
end

class Bullet::Notification::Base
  def associations(); end

  def associations_str(); end

  def base_class(); end

  def body(); end

  def body_with_caller(); end

  def call_stack_messages(); end

  def eql?(other); end

  def initialize(base_class, association_or_associations, path=T.unsafe(nil)); end

  def klazz_associations_str(); end

  def notification_data(); end

  def notifier(); end

  def notifier=(notifier); end

  def notify_inline(); end

  def notify_out_of_channel(); end

  def path(); end

  def short_notice(); end

  def title(); end

  def url(); end

  def url=(url); end

  def whoami(); end
end

class Bullet::Notification::Base
end

class Bullet::Notification::CounterCache
end

class Bullet::Notification::CounterCache
end

class Bullet::Notification::NPlusOneQuery
  def initialize(callers, base_class, associations, path=T.unsafe(nil)); end
end

class Bullet::Notification::NPlusOneQuery
end

class Bullet::Notification::UnoptimizedQueryError
end

class Bullet::Notification::UnoptimizedQueryError
end

class Bullet::Notification::UnusedEagerLoading
  def initialize(callers, base_class, associations, path=T.unsafe(nil)); end
end

class Bullet::Notification::UnusedEagerLoading
end

module Bullet::Notification
end

class Bullet::NotificationCollector
  def add(value); end

  def collection(); end

  def notifications_present?(); end

  def reset(); end
end

class Bullet::NotificationCollector
end

module Bullet::Registry
end

class Bullet::Registry::Association
  def merge(base, associations); end

  def similarly_associated(base, associations); end
end

class Bullet::Registry::Association
end

class Bullet::Registry::Base
  def [](key); end

  def add(key, value); end

  def delete(base); end

  def each(&block); end

  def include?(key, value); end

  def registry(); end

  def select(*args, &block); end
end

class Bullet::Registry::Base
end

class Bullet::Registry::Object
  def add(bullet_key); end

  def include?(bullet_key); end
end

class Bullet::Registry::Object
end

module Bullet::Registry
end

module Bullet::StackTraceFilter
  VENDOR_PATH = ::T.let(nil, ::T.untyped)
end

Bundler::Deprecate = Gem::Deprecate

class Bundler::Env
end

class Bundler::Env
  def self.environment(); end

  def self.report(options=T.unsafe(nil)); end

  def self.write(io); end
end

class Bundler::Fetcher
  def fetch_spec(spec); end

  def fetchers(); end

  def http_proxy(); end

  def initialize(remote); end

  def specs(gem_names, source); end

  def specs_with_retry(gem_names, source); end

  def uri(); end

  def use_api(); end

  def user_agent(); end
  FAIL_ERRORS = ::T.let(nil, ::T.untyped)
  FETCHERS = ::T.let(nil, ::T.untyped)
  HTTP_ERRORS = ::T.let(nil, ::T.untyped)
  NET_ERRORS = ::T.let(nil, ::T.untyped)
end

class Bundler::Fetcher::AuthenticationRequiredError
  def initialize(remote_uri); end
end

class Bundler::Fetcher::BadAuthenticationError
  def initialize(remote_uri); end
end

class Bundler::Fetcher::Base
  def api_fetcher?(); end

  def available?(); end

  def display_uri(); end

  def downloader(); end

  def fetch_uri(); end

  def initialize(downloader, remote, display_uri); end

  def remote(); end

  def remote_uri(); end
end

class Bundler::Fetcher::Base
end

class Bundler::Fetcher::CertificateFailureError
  def initialize(remote_uri); end
end

class Bundler::Fetcher::CompactIndex
  def available?(*args, &blk); end

  def fetch_spec(*args, &blk); end

  def specs(*args, &blk); end

  def specs_for_names(gem_names); end
end

class Bundler::Fetcher::CompactIndex::ClientFetcher
  def call(path, headers); end

  def fetcher(); end

  def fetcher=(_); end

  def ui(); end

  def ui=(_); end
end

class Bundler::Fetcher::CompactIndex::ClientFetcher
  def self.[](*_); end

  def self.members(); end
end

class Bundler::Fetcher::CompactIndex
  def self.compact_index_request(method_name); end
end

class Bundler::Fetcher::Dependency
  def dependency_api_uri(gem_names=T.unsafe(nil)); end

  def dependency_specs(gem_names); end

  def get_formatted_specs_and_deps(gem_list); end

  def specs(gem_names, full_dependency_list=T.unsafe(nil), last_spec_list=T.unsafe(nil)); end

  def unmarshalled_dep_gems(gem_names); end
end

class Bundler::Fetcher::Dependency
end

class Bundler::Fetcher::Downloader
  def connection(); end

  def fetch(uri, headers=T.unsafe(nil), counter=T.unsafe(nil)); end

  def initialize(connection, redirect_limit); end

  def redirect_limit(); end

  def request(uri, headers); end
end

class Bundler::Fetcher::Downloader
end

class Bundler::Fetcher::Index
  def fetch_spec(spec); end

  def specs(_gem_names); end
end

class Bundler::Fetcher::Index
end

class Bundler::Fetcher::SSLError
  def initialize(msg=T.unsafe(nil)); end
end

class Bundler::Fetcher
  def self.api_timeout(); end

  def self.api_timeout=(api_timeout); end

  def self.disable_endpoint(); end

  def self.disable_endpoint=(disable_endpoint); end

  def self.max_retries(); end

  def self.max_retries=(max_retries); end

  def self.redirect_limit(); end

  def self.redirect_limit=(redirect_limit); end
end

class Bundler::GemHelper
  include ::Rake::DSL
  include ::Rake::FileUtilsExt
  include ::FileUtils
  include ::FileUtils::StreamUtils_
  def allowed_push_host(); end

  def already_tagged?(); end

  def base(); end

  def build_gem(); end

  def built_gem_path(); end

  def clean?(); end

  def committed?(); end

  def gem_key(); end

  def gem_push?(); end

  def gem_push_host(); end

  def gemspec(); end

  def git_push(remote=T.unsafe(nil)); end

  def guard_clean(); end

  def initialize(base=T.unsafe(nil), name=T.unsafe(nil)); end

  def install(); end

  def install_gem(built_gem_path=T.unsafe(nil), local=T.unsafe(nil)); end

  def name(); end

  def perform_git_push(options=T.unsafe(nil)); end

  def rubygem_push(path); end

  def sh(cmd, &block); end

  def sh_with_code(cmd, &block); end

  def spec_path(); end

  def tag_version(); end

  def version(); end

  def version_tag(); end
end

class Bundler::GemHelper
  def self.gemspec(&block); end

  def self.install_tasks(opts=T.unsafe(nil)); end

  def self.instance(); end

  def self.instance=(instance); end
end

class Bundler::GemRemoteFetcher
end

class Bundler::GemRemoteFetcher
end

class Bundler::GemVersionPromoter
  def initialize(locked_specs=T.unsafe(nil), unlock_gems=T.unsafe(nil)); end

  def level(); end

  def level=(value); end

  def locked_specs(); end

  def major?(); end

  def minor?(); end

  def prerelease_specified(); end

  def prerelease_specified=(prerelease_specified); end

  def sort_versions(dep, spec_groups); end

  def strict(); end

  def strict=(strict); end

  def unlock_gems(); end
  DEBUG = ::T.let(nil, ::T.untyped)
end

class Bundler::GemVersionPromoter
end

class Bundler::Graph
  def edge_options(); end

  def groups(); end

  def initialize(env, output_file, show_version=T.unsafe(nil), show_requirements=T.unsafe(nil), output_format=T.unsafe(nil), without=T.unsafe(nil)); end

  def node_options(); end

  def output_file(); end

  def output_format(); end

  def relations(); end

  def viz(); end
  GRAPH_NAME = ::T.let(nil, ::T.untyped)
end

class Bundler::Graph::GraphVizClient
  def g(); end

  def initialize(graph_instance); end

  def run(); end
end

class Bundler::Graph::GraphVizClient
end

class Bundler::Graph
end

class Bundler::Index
  include ::Enumerable
end

class Bundler::Injector
  def initialize(deps, options=T.unsafe(nil)); end

  def inject(gemfile_path, lockfile_path); end

  def remove(gemfile_path, lockfile_path); end
  INJECTED_GEMS = ::T.let(nil, ::T.untyped)
end

class Bundler::Injector
  def self.inject(new_deps, options=T.unsafe(nil)); end

  def self.remove(gems, options=T.unsafe(nil)); end
end

class Bundler::Installer
  def generate_bundler_executable_stubs(spec, options=T.unsafe(nil)); end

  def generate_standalone_bundler_executable_stubs(spec); end

  def initialize(root, definition); end

  def post_install_messages(); end

  def run(options); end
end

class Bundler::Installer
  def self.ambiguous_gems(); end

  def self.ambiguous_gems=(ambiguous_gems); end

  def self.install(root, definition, options=T.unsafe(nil)); end
end

class Bundler::Molinillo::DependencyGraph
  include ::Enumerable
end

class Bundler::Molinillo::DependencyGraph::Log
  extend ::Enumerable
end

module Bundler::Plugin::API::Source
  def ==(other); end

  def app_cache_dirname(); end

  def app_cache_path(custom_path=T.unsafe(nil)); end

  def bundler_plugin_api_source?(); end

  def cache(spec, custom_path=T.unsafe(nil)); end

  def cached!(); end

  def can_lock?(spec); end

  def dependency_names(); end

  def dependency_names=(dependency_names); end

  def double_check_for(*_); end

  def eql?(other); end

  def fetch_gemspec_files(); end

  def gem_install_dir(); end

  def hash(); end

  def include?(other); end

  def initialize(opts); end

  def install(spec, opts); end

  def install_path(); end

  def installed?(); end

  def name(); end

  def options(); end

  def options_to_lock(); end

  def post_install(spec, disable_exts=T.unsafe(nil)); end

  def remote!(); end

  def root(); end

  def specs(); end

  def to_lock(); end

  def to_s(); end

  def unlock!(); end

  def unmet_deps(); end

  def uri(); end

  def uri_hash(); end
end

module Bundler::Plugin::API::Source
end

module Bundler::Plugin::Events
  GEM_AFTER_INSTALL = ::T.let(nil, ::T.untyped)
  GEM_AFTER_INSTALL_ALL = ::T.let(nil, ::T.untyped)
  GEM_BEFORE_INSTALL = ::T.let(nil, ::T.untyped)
  GEM_BEFORE_INSTALL_ALL = ::T.let(nil, ::T.untyped)
end

class Bundler::Plugin::Index::CommandConflict
  def initialize(plugin, commands); end
end

class Bundler::Plugin::Index::CommandConflict
end

class Bundler::Plugin::Index::SourceConflict
  def initialize(plugin, sources); end
end

class Bundler::Plugin::Index::SourceConflict
end

class Bundler::Plugin::Installer
  def install(names, options); end

  def install_definition(definition); end
end

class Bundler::Plugin::Installer::Git
  def generate_bin(spec, disable_extensions=T.unsafe(nil)); end
end

class Bundler::Plugin::Installer::Git
end

class Bundler::Plugin::Installer::Rubygems
end

class Bundler::Plugin::Installer::Rubygems
end

class Bundler::Plugin::Installer
end

class Bundler::Plugin::SourceList
end

class Bundler::Plugin::SourceList
end

class Bundler::ProcessLock
end

class Bundler::ProcessLock
  def self.lock(bundle_path=T.unsafe(nil)); end
end

class Bundler::Retry
  def attempt(&block); end

  def attempts(&block); end

  def current_run(); end

  def current_run=(current_run); end

  def initialize(name, exceptions=T.unsafe(nil), retries=T.unsafe(nil)); end

  def name(); end

  def name=(name); end

  def total_runs(); end

  def total_runs=(total_runs); end
end

class Bundler::Retry
  def self.attempts(); end

  def self.default_attempts(); end

  def self.default_retries(); end
end

class Bundler::RubyGemsGemInstaller
end

class Bundler::RubyGemsGemInstaller
end

class Bundler::Settings::Mirror
  def ==(other); end

  def fallback_timeout(); end

  def fallback_timeout=(timeout); end

  def initialize(uri=T.unsafe(nil), fallback_timeout=T.unsafe(nil)); end

  def uri(); end

  def uri=(uri); end

  def valid?(); end

  def validate!(probe=T.unsafe(nil)); end
  DEFAULT_FALLBACK_TIMEOUT = ::T.let(nil, ::T.untyped)
end

class Bundler::Settings::Mirror
end

class Bundler::Settings::Mirrors
  def each(&blk); end

  def for(uri); end

  def initialize(prober=T.unsafe(nil)); end

  def parse(key, value); end
end

class Bundler::Settings::Mirrors
end

class Bundler::Settings::Validator
end

class Bundler::Settings::Validator::Rule
  def description(); end

  def fail!(key, value, *reasons); end

  def initialize(keys, description, &validate); end

  def k(key); end

  def set(settings, key, value, *reasons); end

  def validate!(key, value, settings); end
end

class Bundler::Settings::Validator::Rule
end

class Bundler::Settings::Validator
  def self.validate!(key, value, settings); end
end

class Bundler::SpecSet
  include ::Enumerable
end

class Bundler::UI::Shell
  def add_color(string, *color); end

  def ask(msg); end

  def confirm(msg, newline=T.unsafe(nil)); end

  def debug(msg, newline=T.unsafe(nil)); end

  def debug?(); end

  def error(msg, newline=T.unsafe(nil)); end

  def info(msg, newline=T.unsafe(nil)); end

  def initialize(options=T.unsafe(nil)); end

  def level(name=T.unsafe(nil)); end

  def level=(level); end

  def no?(); end

  def quiet?(); end

  def shell=(shell); end

  def silence(&blk); end

  def trace(e, newline=T.unsafe(nil), force=T.unsafe(nil)); end

  def unprinted_warnings(); end

  def warn(msg, newline=T.unsafe(nil)); end

  def yes?(msg); end
  LEVELS = ::T.let(nil, ::T.untyped)
end

class Bundler::UI::Shell
end

module Bundler::VersionRanges
end

class Bundler::VersionRanges::NEq
  def version(); end

  def version=(_); end
end

class Bundler::VersionRanges::NEq
  def self.[](*_); end

  def self.members(); end
end

class Bundler::VersionRanges::ReqR
  def cover?(v); end

  def empty?(); end

  def left(); end

  def left=(_); end

  def right(); end

  def right=(_); end

  def single?(); end
  INFINITY = ::T.let(nil, ::T.untyped)
  UNIVERSAL = ::T.let(nil, ::T.untyped)
  ZERO = ::T.let(nil, ::T.untyped)
end

class Bundler::VersionRanges::ReqR::Endpoint
  def inclusive(); end

  def inclusive=(_); end

  def version(); end

  def version=(_); end
end

class Bundler::VersionRanges::ReqR::Endpoint
  def self.[](*_); end

  def self.members(); end
end

class Bundler::VersionRanges::ReqR
  def self.[](*_); end

  def self.members(); end
end

module Bundler::VersionRanges
  def self.empty?(ranges, neqs); end

  def self.for(requirement); end

  def self.for_many(requirements); end
end

module Byebug
  PORT = ::T.let(nil, ::T.untyped)
end

class Byebug::AutoirbSetting
  DEFAULT = ::T.let(nil, ::T.untyped)
end

class Byebug::AutolistSetting
  DEFAULT = ::T.let(nil, ::T.untyped)
end

class Byebug::AutoprySetting
  DEFAULT = ::T.let(nil, ::T.untyped)
end

class Byebug::AutosaveSetting
  DEFAULT = ::T.let(nil, ::T.untyped)
end

class Byebug::CallstyleSetting
  DEFAULT = ::T.let(nil, ::T.untyped)
end

class Byebug::Command
  extend ::Byebug::Helpers::StringHelper
end

class Byebug::Context
  extend ::Byebug::Helpers::PathHelper
end

class Byebug::FullpathSetting
  DEFAULT = ::T.let(nil, ::T.untyped)
end

class Byebug::HistfileSetting
  DEFAULT = ::T.let(nil, ::T.untyped)
end

class Byebug::HistsizeSetting
  DEFAULT = ::T.let(nil, ::T.untyped)
end

class Byebug::ListsizeSetting
  DEFAULT = ::T.let(nil, ::T.untyped)
end

class Byebug::LocalInterface
  EOF_ALIAS = ::T.let(nil, ::T.untyped)
end

class Byebug::Printers::Base
  SEPARATOR = ::T.let(nil, ::T.untyped)
end

class Byebug::SavefileSetting
  DEFAULT = ::T.let(nil, ::T.untyped)
end

class Byebug::Setting
  DEFAULT = ::T.let(nil, ::T.untyped)
end

class Byebug::ThreadsTable
end

class Byebug::ThreadsTable
end

class Byebug::WidthSetting
  DEFAULT = ::T.let(nil, ::T.untyped)
end

module CGI::HtmlExtension
  def a(href=T.unsafe(nil)); end

  def base(href=T.unsafe(nil)); end

  def blockquote(cite=T.unsafe(nil)); end

  def caption(align=T.unsafe(nil)); end

  def checkbox(name=T.unsafe(nil), value=T.unsafe(nil), checked=T.unsafe(nil)); end

  def checkbox_group(name=T.unsafe(nil), *values); end

  def file_field(name=T.unsafe(nil), size=T.unsafe(nil), maxlength=T.unsafe(nil)); end

  def form(method=T.unsafe(nil), action=T.unsafe(nil), enctype=T.unsafe(nil)); end

  def hidden(name=T.unsafe(nil), value=T.unsafe(nil)); end

  def html(attributes=T.unsafe(nil)); end

  def image_button(src=T.unsafe(nil), name=T.unsafe(nil), alt=T.unsafe(nil)); end

  def img(src=T.unsafe(nil), alt=T.unsafe(nil), width=T.unsafe(nil), height=T.unsafe(nil)); end

  def multipart_form(action=T.unsafe(nil), enctype=T.unsafe(nil)); end

  def password_field(name=T.unsafe(nil), value=T.unsafe(nil), size=T.unsafe(nil), maxlength=T.unsafe(nil)); end

  def popup_menu(name=T.unsafe(nil), *values); end

  def radio_button(name=T.unsafe(nil), value=T.unsafe(nil), checked=T.unsafe(nil)); end

  def radio_group(name=T.unsafe(nil), *values); end

  def reset(value=T.unsafe(nil), name=T.unsafe(nil)); end

  def scrolling_list(name=T.unsafe(nil), *values); end

  def submit(value=T.unsafe(nil), name=T.unsafe(nil)); end

  def text_field(name=T.unsafe(nil), value=T.unsafe(nil), size=T.unsafe(nil), maxlength=T.unsafe(nil)); end

  def textarea(name=T.unsafe(nil), cols=T.unsafe(nil), rows=T.unsafe(nil)); end
end

module CGI::HtmlExtension
end

class CSV
  def close(*args, &block); end

  def close_read(*args, &block); end

  def close_write(*args, &block); end

  def closed?(*args, &block); end

  def external_encoding(*args, &block); end

  def fcntl(*args, &block); end

  def fileno(*args, &block); end

  def flush(*args, &block); end

  def fsync(*args, &block); end

  def internal_encoding(*args, &block); end

  def isatty(*args, &block); end

  def pid(*args, &block); end

  def pos(*args, &block); end

  def pos=(*args, &block); end

  def reopen(*args, &block); end

  def seek(*args, &block); end

  def string(*args, &block); end

  def sync(*args, &block); end

  def sync=(*args, &block); end

  def tell(*args, &block); end

  def truncate(*args, &block); end

  def tty?(*args, &block); end
  ConverterEncoding = ::T.let(nil, ::T.untyped)
  Converters = ::T.let(nil, ::T.untyped)
  DateMatcher = ::T.let(nil, ::T.untyped)
  DateTimeMatcher = ::T.let(nil, ::T.untyped)
  HeaderConverters = ::T.let(nil, ::T.untyped)
end

class CSV::FieldInfo
  def header(); end

  def header=(_); end

  def index(); end

  def index=(_); end

  def line(); end

  def line=(_); end
end

class CSV::FieldInfo
  def self.[](*_); end

  def self.members(); end
end

class CSV::Row
  def empty?(*args, &block); end

  def initialize(headers, fields, header_row=T.unsafe(nil)); end

  def length(*args, &block); end

  def size(*args, &block); end
end

class CSV::Row
  extend ::Forwardable
end

class CSV::Table
  def empty?(*args, &block); end

  def initialize(array_of_rows); end

  def length(*args, &block); end

  def size(*args, &block); end
end

class CSV::Table
  extend ::Forwardable
end

class CSV
  extend ::Forwardable
end

module CanCan
end

module CanCan::Ability
  def alias_action(*args); end

  def aliased_actions(); end

  def attributes_for(action, subject); end

  def authorize!(action, subject, *args); end

  def can(action=T.unsafe(nil), subject=T.unsafe(nil), conditions=T.unsafe(nil), &block); end

  def can?(action, subject, *extra_args); end

  def cannot(action=T.unsafe(nil), subject=T.unsafe(nil), conditions=T.unsafe(nil), &block); end

  def cannot?(*args); end

  def clear_aliased_actions(); end

  def has_block?(action, subject); end

  def has_raw_sql?(action, subject); end

  def merge(ability); end

  def model_adapter(model_class, action); end

  def unauthorized_message(action, subject); end

  def validate_target(target); end
end

module CanCan::Ability
end

class CanCan::AccessDenied
  def action(); end

  def default_message=(default_message); end

  def initialize(message=T.unsafe(nil), action=T.unsafe(nil), subject=T.unsafe(nil)); end

  def subject(); end
end

class CanCan::AccessDenied
end

class CanCan::AuthorizationNotPerformed
end

class CanCan::AuthorizationNotPerformed
end

module CanCan::ControllerAdditions
  def authorize!(*args); end

  def can?(*args); end

  def cannot?(*args); end

  def current_ability(); end

  def unauthorized!(message=T.unsafe(nil)); end
end

module CanCan::ControllerAdditions
  def self.included(base); end
end

class CanCan::ControllerResource
  def adapter(); end

  def assign_attributes(resource); end

  def authorization_action(); end

  def authorize_resource(); end

  def build_resource(); end

  def collection_actions(); end

  def collection_instance(); end

  def collection_instance=(instance); end

  def current_ability(); end

  def fetch_parent(name); end

  def find_resource(); end

  def id_param(); end

  def initial_attributes(); end

  def initialize(controller, *args); end

  def instance_name(); end

  def load_and_authorize_resource(); end

  def load_collection(); end

  def load_collection?(); end

  def load_instance?(); end

  def load_resource(); end

  def load_resource_instance(); end

  def member_action?(); end

  def name(); end

  def name_from_controller(); end

  def namespace(); end

  def namespaced_name(); end

  def new_actions(); end

  def parent?(); end

  def parent_name(); end

  def parent_resource(); end

  def resource_base(); end

  def resource_class(); end

  def resource_class_with_parent(); end

  def resource_instance(); end

  def resource_instance=(instance); end

  def resource_params(); end

  def resource_params_by_namespaced_name(); end

  def skip?(behavior); end
end

class CanCan::ControllerResource
  def self.add_before_filter(controller_class, method, *args); end
end

class CanCan::Error
end

class CanCan::Error
end

class CanCan::ImplementationRemoved
end

class CanCan::ImplementationRemoved
end

class CanCan::InheritedResource
end

class CanCan::InheritedResource
end

module CanCan::ModelAdapters
end

class CanCan::ModelAdapters::AbstractAdapter
  def database_records(); end

  def initialize(model_class, rules); end
end

class CanCan::ModelAdapters::AbstractAdapter
  def self.adapter_class(model_class); end

  def self.find(model_class, id); end

  def self.for_class?(member_class); end

  def self.inherited(subclass); end

  def self.matches_condition?(subject, name, value); end

  def self.matches_conditions_hash?(subject, conditions); end

  def self.override_condition_matching?(subject, name, value); end

  def self.override_conditions_hash_matching?(subject, conditions); end
end

class CanCan::ModelAdapters::ActiveRecordAdapter
  def conditions(); end

  def joins(); end

  def tableized_conditions(conditions, model_class=T.unsafe(nil)); end
end

class CanCan::ModelAdapters::ActiveRecordAdapter
  def self.for_class?(model_class); end

  def self.meta_where_match?(subject_value, method, value); end
end

class CanCan::ModelAdapters::DefaultAdapter
end

class CanCan::ModelAdapters::DefaultAdapter
end

module CanCan::ModelAdapters
end

module CanCan::ModelAdditions
end

module CanCan::ModelAdditions
  def self.included(base); end
end

class CanCan::NotImplemented
end

class CanCan::NotImplemented
end

class CanCan::Rule
  def actions(); end

  def associations_hash(conditions=T.unsafe(nil)); end

  def attributes_from_conditions(); end

  def base_behavior(); end

  def conditions(); end

  def conditions_empty?(); end

  def expanded_actions=(expanded_actions); end

  def initialize(base_behavior, action, subject, conditions, block); end

  def matches_conditions?(action, subject, extra_args); end

  def only_block?(); end

  def only_raw_sql?(); end

  def relevant?(action, subject); end

  def subjects(); end

  def unmergeable?(); end
end

class CanCan::Rule
end

module CanCan
end

class Class
  def json_creatable?(); end
end

module Concurrent
  NULL = ::T.let(nil, ::T.untyped)
  NULL_LOGGER = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Concurrent::AbstractExecutorService
  FALLBACK_POLICIES = ::T.let(nil, ::T.untyped)
end

Concurrent::Collection::MapImplementation = Concurrent::Collection::MriMapBackend

class Concurrent::ConcurrentUpdateError
  CONC_UP_ERR_BACKTRACE = ::T.let(nil, ::T.untyped)
end

class Concurrent::LockFreeStack
  EMPTY = ::T.let(nil, ::T.untyped)
end

class Concurrent::MVar
  EMPTY = ::T.let(nil, ::T.untyped)
  TIMEOUT = ::T.let(nil, ::T.untyped)
end

class Concurrent::Maybe
  NONE = ::T.let(nil, ::T.untyped)
end

module Concurrent::Promises::InternalStates
  PENDING = ::T.let(nil, ::T.untyped)
  RESERVED = ::T.let(nil, ::T.untyped)
  RESOLVED = ::T.let(nil, ::T.untyped)
end

class Concurrent::ReadWriteLock
  MAX_READERS = ::T.let(nil, ::T.untyped)
  MAX_WRITERS = ::T.let(nil, ::T.untyped)
  RUNNING_WRITER = ::T.let(nil, ::T.untyped)
  WAITING_WRITER = ::T.let(nil, ::T.untyped)
end

class Concurrent::ReentrantReadWriteLock
  MAX_READERS = ::T.let(nil, ::T.untyped)
  MAX_WRITERS = ::T.let(nil, ::T.untyped)
  READER_BITS = ::T.let(nil, ::T.untyped)
  READ_LOCK_MASK = ::T.let(nil, ::T.untyped)
  RUNNING_WRITER = ::T.let(nil, ::T.untyped)
  WAITING_WRITER = ::T.let(nil, ::T.untyped)
  WRITER_BITS = ::T.let(nil, ::T.untyped)
  WRITE_LOCK_HELD = ::T.let(nil, ::T.untyped)
  WRITE_LOCK_MASK = ::T.let(nil, ::T.untyped)
end

class Concurrent::RubyThreadPoolExecutor
  DEFAULT_MAX_POOL_SIZE = ::T.let(nil, ::T.untyped)
  DEFAULT_MAX_QUEUE_SIZE = ::T.let(nil, ::T.untyped)
  DEFAULT_MIN_POOL_SIZE = ::T.let(nil, ::T.untyped)
  DEFAULT_THREAD_IDLETIMEOUT = ::T.let(nil, ::T.untyped)
end

class Concurrent::SerializedExecutionDelegator
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

Concurrent::Synchronization::Volatile = Concurrent::Synchronization::MriAttrVolatile

class Concurrent::SynchronizedDelegator
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

module Concurrent::ThreadSafe::Util
  CPU_COUNT = ::T.let(nil, ::T.untyped)
  FIXNUM_BIT_SIZE = ::T.let(nil, ::T.untyped)
  MAX_INT = ::T.let(nil, ::T.untyped)
end

class Concurrent::TimerTask
  EXECUTION_INTERVAL = ::T.let(nil, ::T.untyped)
  TIMEOUT_INTERVAL = ::T.let(nil, ::T.untyped)
end

class Concurrent::Transaction
  ABORTED = ::T.let(nil, ::T.untyped)
end

module Concurrent::Utility::NativeInteger
  MAX_VALUE = ::T.let(nil, ::T.untyped)
  MIN_VALUE = ::T.let(nil, ::T.untyped)
end

class Crass::Parser
  BLOCK_END_TOKENS = ::T.let(nil, ::T.untyped)
end

class Crass::Tokenizer
  RE_COMMENT_CLOSE = ::T.let(nil, ::T.untyped)
  RE_DIGIT = ::T.let(nil, ::T.untyped)
  RE_ESCAPE = ::T.let(nil, ::T.untyped)
  RE_HEX = ::T.let(nil, ::T.untyped)
  RE_NAME = ::T.let(nil, ::T.untyped)
  RE_NAME_START = ::T.let(nil, ::T.untyped)
  RE_NON_PRINTABLE = ::T.let(nil, ::T.untyped)
  RE_NUMBER_DECIMAL = ::T.let(nil, ::T.untyped)
  RE_NUMBER_EXPONENT = ::T.let(nil, ::T.untyped)
  RE_NUMBER_SIGN = ::T.let(nil, ::T.untyped)
  RE_NUMBER_STR = ::T.let(nil, ::T.untyped)
  RE_QUOTED_URL_START = ::T.let(nil, ::T.untyped)
  RE_UNICODE_RANGE_END = ::T.let(nil, ::T.untyped)
  RE_UNICODE_RANGE_START = ::T.let(nil, ::T.untyped)
  RE_WHITESPACE = ::T.let(nil, ::T.untyped)
  RE_WHITESPACE_ANCHORED = ::T.let(nil, ::T.untyped)
end

module Dalli
  VERSION = ::T.let(nil, ::T.untyped)
end

class Dalli::Client
  def add(key, value, ttl=T.unsafe(nil), options=T.unsafe(nil)); end

  def alive!(); end

  def append(key, value); end

  def cas(key, ttl=T.unsafe(nil), options=T.unsafe(nil), &block); end

  def cas!(key, ttl=T.unsafe(nil), options=T.unsafe(nil), &block); end

  def close(); end

  def decr(key, amt=T.unsafe(nil), ttl=T.unsafe(nil), default=T.unsafe(nil)); end

  def delete(key); end

  def fetch(key, ttl=T.unsafe(nil), options=T.unsafe(nil)); end

  def flush(delay=T.unsafe(nil)); end

  def flush_all(delay=T.unsafe(nil)); end

  def get(key, options=T.unsafe(nil)); end

  def get_multi(*keys); end

  def incr(key, amt=T.unsafe(nil), ttl=T.unsafe(nil), default=T.unsafe(nil)); end

  def initialize(servers=T.unsafe(nil), options=T.unsafe(nil)); end

  def multi(); end

  def prepend(key, value); end

  def replace(key, value, ttl=T.unsafe(nil), options=T.unsafe(nil)); end

  def reset(); end

  def reset_stats(); end

  def set(key, value, ttl=T.unsafe(nil), options=T.unsafe(nil)); end

  def stats(type=T.unsafe(nil)); end

  def touch(key, ttl=T.unsafe(nil)); end

  def version(); end

  def with(); end
  CACHE_NILS = ::T.let(nil, ::T.untyped)
end

class Dalli::Client
end

class Dalli::Compressor
end

class Dalli::Compressor
  def self.compress(data); end

  def self.decompress(data); end
end

class Dalli::DalliError
end

class Dalli::DalliError
end

class Dalli::GzipCompressor
end

class Dalli::GzipCompressor
  def self.compress(data); end

  def self.decompress(data); end
end

class Dalli::MarshalError
end

class Dalli::MarshalError
end

class Dalli::NetworkError
end

class Dalli::NetworkError
end

class Dalli::Railtie
end

class Dalli::Railtie
end

class Dalli::Ring
  def continuum(); end

  def continuum=(continuum); end

  def initialize(servers, options); end

  def lock(); end

  def server_for_key(key); end

  def servers(); end

  def servers=(servers); end
  POINTS_PER_SERVER = ::T.let(nil, ::T.untyped)
end

class Dalli::Ring::Entry
  def initialize(val, srv); end

  def server(); end

  def value(); end
end

class Dalli::Ring::Entry
end

class Dalli::Ring
end

class Dalli::RingError
end

class Dalli::RingError
end

class Dalli::Server
  def alive?(); end

  def close(); end

  def compressor(); end

  def hostname(); end

  def hostname=(hostname); end

  def initialize(attribs, options=T.unsafe(nil)); end

  def lock!(); end

  def multi_response_abort(); end

  def multi_response_completed?(); end

  def multi_response_nonblock(); end

  def multi_response_start(); end

  def name(); end

  def options(); end

  def options=(options); end

  def port(); end

  def port=(port); end

  def request(op, *args); end

  def serializer(); end

  def sock(); end

  def socket_type(); end

  def unlock!(); end

  def weight(); end

  def weight=(weight); end
  CAS_HEADER = ::T.let(nil, ::T.untyped)
  DEFAULTS = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
  DEFAULT_WEIGHT = ::T.let(nil, ::T.untyped)
  FLAG_COMPRESSED = ::T.let(nil, ::T.untyped)
  FLAG_SERIALIZED = ::T.let(nil, ::T.untyped)
  FORMAT = ::T.let(nil, ::T.untyped)
  HEADER = ::T.let(nil, ::T.untyped)
  KV_HEADER = ::T.let(nil, ::T.untyped)
  MAX_ACCEPTABLE_EXPIRATION_INTERVAL = ::T.let(nil, ::T.untyped)
  NORMAL_HEADER = ::T.let(nil, ::T.untyped)
  NOT_FOUND = ::T.let(nil, ::T.untyped)
  OPCODES = ::T.let(nil, ::T.untyped)
  OP_FORMAT = ::T.let(nil, ::T.untyped)
  REQUEST = ::T.let(nil, ::T.untyped)
  RESPONSE = ::T.let(nil, ::T.untyped)
  RESPONSE_CODES = ::T.let(nil, ::T.untyped)
end

module Dalli::Server::KSocket
end

module Dalli::Server::KSocket::InstanceMethods
  def read_available(); end

  def readfull(count); end
end

module Dalli::Server::KSocket::InstanceMethods
end

class Dalli::Server::KSocket::TCP
  include ::Dalli::Server::KSocket
  include ::Dalli::Server::KSocket::InstanceMethods
  def options(); end

  def options=(options); end

  def server(); end

  def server=(server); end
end

class Dalli::Server::KSocket::TCP
  extend ::Dalli::Server::TCPSocketOptions
  def self.open(host, port, server, options=T.unsafe(nil)); end
end

class Dalli::Server::KSocket::UNIX
  include ::Dalli::Server::KSocket
  include ::Dalli::Server::KSocket::InstanceMethods
  def options(); end

  def options=(options); end

  def server(); end

  def server=(server); end
end

class Dalli::Server::KSocket::UNIX
  def self.open(path, server, options=T.unsafe(nil)); end
end

module Dalli::Server::KSocket
  def self.included(receiver); end
end

class Dalli::Server::NilObject
end

class Dalli::Server::NilObject
end

module Dalli::Server::TCPSocketOptions
  def setsockopts(sock, options); end
end

module Dalli::Server::TCPSocketOptions
end

class Dalli::Server
end

module Dalli::Threadsafe
  def alive?(); end

  def close(); end

  def init_threadsafe(); end

  def lock!(); end

  def multi_response_abort(); end

  def multi_response_nonblock(); end

  def multi_response_start(); end

  def request(op, *args); end

  def unlock!(); end
end

module Dalli::Threadsafe
  def self.extended(obj); end
end

class Dalli::UnmarshalError
end

class Dalli::UnmarshalError
end

class Dalli::ValueOverMaxSize
end

class Dalli::ValueOverMaxSize
end

module Dalli
  def self.default_logger(); end

  def self.logger(); end

  def self.logger=(logger); end

  def self.rails_logger(); end
end

class Date
  DATE_FORMATS = ::T.let(nil, ::T.untyped)
end

class Date::Infinity
  def initialize(d=T.unsafe(nil)); end
end

module DateAndTime::Calculations
  DAYS_INTO_WEEK = ::T.let(nil, ::T.untyped)
  WEEKEND_DAYS = ::T.let(nil, ::T.untyped)
end

class DayIngredient
  def autosave_associated_records_for_ingredient(*args); end

  def autosave_associated_records_for_op_day(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

class DayIngredient::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::DayIngredient::GeneratedRelationMethods
end

class DayIngredient::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::DayIngredient::GeneratedRelationMethods
end

class DayIngredient::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::DayIngredient::GeneratedRelationMethods
end

module DayIngredient::GeneratedAssociationMethods
  def build_ingredient(*args, &block); end

  def build_op_day(*args, &block); end

  def create_ingredient(*args, &block); end

  def create_ingredient!(*args, &block); end

  def create_op_day(*args, &block); end

  def create_op_day!(*args, &block); end

  def reload_ingredient(); end

  def reload_op_day(); end
end

module DayIngredient::GeneratedRelationMethods
end

module DayIngredient::GeneratedRelationMethods
end

class Delegator
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class DetailedInstruction
  def after_add_for_detailedinstructions_recipe_steps(); end

  def after_add_for_detailedinstructions_recipe_steps=(val); end

  def after_add_for_detailedinstructions_recipe_steps?(); end

  def after_add_for_recipe_steps(); end

  def after_add_for_recipe_steps=(val); end

  def after_add_for_recipe_steps?(); end

  def after_remove_for_detailedinstructions_recipe_steps(); end

  def after_remove_for_detailedinstructions_recipe_steps=(val); end

  def after_remove_for_detailedinstructions_recipe_steps?(); end

  def after_remove_for_recipe_steps(); end

  def after_remove_for_recipe_steps=(val); end

  def after_remove_for_recipe_steps?(); end

  def autosave_associated_records_for_detailedinstructions_recipe_steps(*args); end

  def autosave_associated_records_for_recipe_steps(*args); end

  def before_add_for_detailedinstructions_recipe_steps(); end

  def before_add_for_detailedinstructions_recipe_steps=(val); end

  def before_add_for_detailedinstructions_recipe_steps?(); end

  def before_add_for_recipe_steps(); end

  def before_add_for_recipe_steps=(val); end

  def before_add_for_recipe_steps?(); end

  def before_remove_for_detailedinstructions_recipe_steps(); end

  def before_remove_for_detailedinstructions_recipe_steps=(val); end

  def before_remove_for_detailedinstructions_recipe_steps?(); end

  def before_remove_for_recipe_steps(); end

  def before_remove_for_recipe_steps=(val); end

  def before_remove_for_recipe_steps?(); end

  def validate_associated_records_for_detailedinstructions_recipe_steps(*args); end

  def validate_associated_records_for_recipe_steps(*args); end
end

class DetailedInstruction::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::DetailedInstruction::GeneratedRelationMethods
end

class DetailedInstruction::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::DetailedInstruction::GeneratedRelationMethods
end

class DetailedInstruction::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::DetailedInstruction::GeneratedRelationMethods
end

module DetailedInstruction::GeneratedAssociationMethods
  def recipe_step_ids=(ids); end
end

module DetailedInstruction::GeneratedRelationMethods
end

module DetailedInstruction::GeneratedRelationMethods
end

class DetailedInstruction
  def self.after_add_for_detailedinstructions_recipe_steps(); end

  def self.after_add_for_detailedinstructions_recipe_steps=(val); end

  def self.after_add_for_detailedinstructions_recipe_steps?(); end

  def self.after_add_for_recipe_steps(); end

  def self.after_add_for_recipe_steps=(val); end

  def self.after_add_for_recipe_steps?(); end

  def self.after_remove_for_detailedinstructions_recipe_steps(); end

  def self.after_remove_for_detailedinstructions_recipe_steps=(val); end

  def self.after_remove_for_detailedinstructions_recipe_steps?(); end

  def self.after_remove_for_recipe_steps(); end

  def self.after_remove_for_recipe_steps=(val); end

  def self.after_remove_for_recipe_steps?(); end

  def self.before_add_for_detailedinstructions_recipe_steps(); end

  def self.before_add_for_detailedinstructions_recipe_steps=(val); end

  def self.before_add_for_detailedinstructions_recipe_steps?(); end

  def self.before_add_for_recipe_steps(); end

  def self.before_add_for_recipe_steps=(val); end

  def self.before_add_for_recipe_steps?(); end

  def self.before_remove_for_detailedinstructions_recipe_steps(); end

  def self.before_remove_for_detailedinstructions_recipe_steps=(val); end

  def self.before_remove_for_detailedinstructions_recipe_steps?(); end

  def self.before_remove_for_recipe_steps(); end

  def self.before_remove_for_recipe_steps=(val); end

  def self.before_remove_for_recipe_steps?(); end
end

module Devise
  def allow_unconfirmed_access_for(); end

  def allow_unconfirmed_access_for=(obj); end

  def authentication_keys(); end

  def authentication_keys=(obj); end

  def case_insensitive_keys(); end

  def case_insensitive_keys=(obj); end

  def clean_up_csrf_token_on_authentication(); end

  def clean_up_csrf_token_on_authentication=(obj); end

  def confirm_within(); end

  def confirm_within=(obj); end

  def confirmation_keys(); end

  def confirmation_keys=(obj); end

  def default_scope(); end

  def default_scope=(obj); end

  def email_regexp(); end

  def email_regexp=(obj); end

  def expire_all_remember_me_on_sign_out(); end

  def expire_all_remember_me_on_sign_out=(obj); end

  def extend_remember_period(); end

  def extend_remember_period=(obj); end

  def helpers(); end

  def http_authenticatable(); end

  def http_authenticatable=(obj); end

  def http_authenticatable_on_xhr(); end

  def http_authenticatable_on_xhr=(obj); end

  def http_authentication_key(); end

  def http_authentication_key=(obj); end

  def http_authentication_realm(); end

  def http_authentication_realm=(obj); end

  def last_attempt_warning(); end

  def last_attempt_warning=(obj); end

  def lock_strategy(); end

  def lock_strategy=(obj); end

  def mailer_sender(); end

  def mailer_sender=(obj); end

  def mappings(); end

  def maximum_attempts(); end

  def maximum_attempts=(obj); end

  def navigational_formats(); end

  def navigational_formats=(obj); end

  def omniauth_configs(); end

  def omniauth_path_prefix(); end

  def omniauth_path_prefix=(obj); end

  def params_authenticatable(); end

  def params_authenticatable=(obj); end

  def paranoid(); end

  def paranoid=(obj); end

  def parent_controller(); end

  def parent_controller=(obj); end

  def parent_mailer(); end

  def parent_mailer=(obj); end

  def password_length(); end

  def password_length=(obj); end

  def pepper(); end

  def pepper=(obj); end

  def reconfirmable(); end

  def reconfirmable=(obj); end

  def reload_routes(); end

  def reload_routes=(obj); end

  def remember_for(); end

  def remember_for=(obj); end

  def rememberable_options(); end

  def rememberable_options=(obj); end

  def request_keys(); end

  def request_keys=(obj); end

  def reset_password_keys(); end

  def reset_password_keys=(obj); end

  def reset_password_within(); end

  def reset_password_within=(obj); end

  def router_name(); end

  def router_name=(obj); end

  def scoped_views(); end

  def scoped_views=(obj); end

  def secret_key(); end

  def secret_key=(obj); end

  def send_email_changed_notification(); end

  def send_email_changed_notification=(obj); end

  def send_password_change_notification(); end

  def send_password_change_notification=(obj); end

  def sign_in_after_change_password(); end

  def sign_in_after_change_password=(obj); end

  def sign_in_after_reset_password(); end

  def sign_in_after_reset_password=(obj); end

  def sign_out_all_scopes(); end

  def sign_out_all_scopes=(obj); end

  def sign_out_via(); end

  def sign_out_via=(obj); end

  def skip_session_storage(); end

  def skip_session_storage=(obj); end

  def stretches(); end

  def stretches=(obj); end

  def strip_whitespace_keys(); end

  def strip_whitespace_keys=(obj); end

  def timeout_in(); end

  def timeout_in=(obj); end

  def token_generator(); end

  def token_generator=(obj); end

  def unlock_in(); end

  def unlock_in=(obj); end

  def unlock_keys(); end

  def unlock_keys=(obj); end

  def unlock_strategy(); end

  def unlock_strategy=(obj); end

  def warden_config(); end

  def warden_config=(obj); end
  ALL = ::T.let(nil, ::T.untyped)
  CONTROLLERS = ::T.let(nil, ::T.untyped)
  NO_INPUT = ::T.let(nil, ::T.untyped)
  ROUTES = ::T.let(nil, ::T.untyped)
  STRATEGIES = ::T.let(nil, ::T.untyped)
  TRUE_VALUES = ::T.let(nil, ::T.untyped)
  URL_HELPERS = ::T.let(nil, ::T.untyped)
end

class Devise::ConfirmationsController
  def after_confirmation_path_for(resource_name, resource); end

  def after_resending_confirmation_instructions_path_for(resource_name); end

  def create(); end

  def new(); end

  def show(); end
end

class Devise::ConfirmationsController
end

module Devise::Controllers
end

module Devise::Controllers::Helpers
  include ::Devise::Controllers::SignInOut
  include ::Devise::Controllers::StoreLocation
  def after_sign_in_path_for(resource_or_scope); end

  def after_sign_out_path_for(resource_or_scope); end

  def allow_params_authentication!(); end

  def authenticate_user!(opts=T.unsafe(nil)); end

  def current_user(); end

  def devise_controller?(); end

  def devise_parameter_sanitizer(); end

  def handle_unverified_request(); end

  def is_flashing_format?(); end

  def is_navigational_format?(); end

  def request_format(); end

  def sign_in_and_redirect(resource_or_scope, *args); end

  def sign_out_and_redirect(resource_or_scope); end

  def signed_in_root_path(resource_or_scope); end

  def user_session(); end

  def user_signed_in?(); end

  def warden(); end
end

module Devise::Controllers::Helpers
  extend ::ActiveSupport::Concern
  def self.define_helpers(mapping); end
end

module Devise::Controllers::Rememberable
  def forget_cookie_values(resource); end

  def forget_me(resource); end

  def remember_cookie_values(resource); end

  def remember_key(resource, scope); end

  def remember_me(resource); end

  def remember_me_is_active?(resource); end
end

module Devise::Controllers::Rememberable
  def self.cookie_values(); end
end

module Devise::Controllers::ScopedViews
end

module Devise::Controllers::ScopedViews
  extend ::ActiveSupport::Concern
end

module Devise::Controllers::SignInOut
  def bypass_sign_in(resource, scope: T.unsafe(nil)); end

  def sign_in(resource_or_scope, *args); end

  def sign_out(resource_or_scope=T.unsafe(nil)); end

  def sign_out_all_scopes(lock=T.unsafe(nil)); end

  def signed_in?(scope=T.unsafe(nil)); end
end

module Devise::Controllers::SignInOut
end

module Devise::Controllers::StoreLocation
  def store_location_for(resource_or_scope, location); end

  def stored_location_for(resource_or_scope); end
end

module Devise::Controllers::StoreLocation
end

module Devise::Controllers::UrlHelpers
  def cancel_registration_path(resource_or_scope, *args); end

  def cancel_registration_url(resource_or_scope, *args); end

  def destroy_session_path(resource_or_scope, *args); end

  def destroy_session_url(resource_or_scope, *args); end

  def edit_password_path(resource_or_scope, *args); end

  def edit_password_url(resource_or_scope, *args); end

  def edit_registration_path(resource_or_scope, *args); end

  def edit_registration_url(resource_or_scope, *args); end

  def new_password_path(resource_or_scope, *args); end

  def new_password_url(resource_or_scope, *args); end

  def new_registration_path(resource_or_scope, *args); end

  def new_registration_url(resource_or_scope, *args); end

  def new_session_path(resource_or_scope, *args); end

  def new_session_url(resource_or_scope, *args); end

  def new_unlock_path(resource_or_scope, *args); end

  def new_unlock_url(resource_or_scope, *args); end

  def password_path(resource_or_scope, *args); end

  def password_url(resource_or_scope, *args); end

  def registration_path(resource_or_scope, *args); end

  def registration_url(resource_or_scope, *args); end

  def session_path(resource_or_scope, *args); end

  def session_url(resource_or_scope, *args); end

  def unlock_path(resource_or_scope, *args); end

  def unlock_url(resource_or_scope, *args); end
end

module Devise::Controllers::UrlHelpers
  def self.generate_helpers!(routes=T.unsafe(nil)); end

  def self.remove_helpers!(); end
end

module Devise::Controllers
end

class Devise::Delegator
  def call(env); end

  def failure_app(env); end
end

class Devise::Delegator
end

module Devise::Encryptor
end

module Devise::Encryptor
  def self.compare(klass, hashed_password, password); end

  def self.digest(klass, password); end
end

class Devise::Engine
end

class Devise::Engine
end

class Devise::FailureApp
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::AbstractController::UrlFor
  include ::ActionController::UrlFor
  include ::AbstractController::Logger
  include ::ActiveSupport::Benchmarkable
  include ::ActionController::Redirecting
  include ::ActionDispatch::Routing::RouteSet::MountedHelpers
  include ::Devise::Controllers::StoreLocation
  def attempted_path(); end

  def default_url_options(); end

  def default_url_options=(val); end

  def default_url_options?(); end

  def flash(*args, &block); end

  def http_auth(); end

  def http_auth?(); end

  def http_auth_body(); end

  def http_auth_header?(); end

  def i18n_message(default=T.unsafe(nil)); end

  def i18n_options(options); end

  def is_flashing_format?(); end

  def is_navigational_format?(); end

  def logger(); end

  def logger=(value); end

  def recall(); end

  def recall_app(app); end

  def redirect(); end

  def redirect_url(); end

  def relative_url_root(); end

  def relative_url_root?(); end

  def request_format(); end

  def respond(); end

  def route(scope); end

  def scope(); end

  def scope_class(); end

  def scope_url(); end

  def skip_format?(); end

  def store_location!(); end

  def warden(); end

  def warden_message(); end

  def warden_options(); end
end

class Devise::FailureApp
  extend ::AbstractController::UrlFor::ClassMethods
  def self.call(env); end

  def self.default_url_options(*args); end

  def self.default_url_options=(val); end

  def self.default_url_options?(); end

  def self.logger(); end

  def self.logger=(value); end
end

class Devise::Getter
  def get(); end

  def initialize(name); end
end

class Devise::Getter
end

module Devise::Hooks
end

class Devise::Hooks::Proxy
  include ::Devise::Controllers::Rememberable
  include ::Devise::Controllers::SignInOut
  def cookies(*args, &block); end

  def initialize(warden); end

  def request(*args, &block); end

  def session(); end

  def warden(); end
end

class Devise::Hooks::Proxy
end

module Devise::Hooks
end

module Devise::Mailers
end

module Devise::Mailers::Helpers
  def devise_mail(record, action, opts=T.unsafe(nil), &block); end

  def devise_mapping(); end

  def headers_for(action, opts); end

  def initialize_from_record(record); end

  def mailer_from(mapping); end

  def mailer_reply_to(mapping); end

  def mailer_sender(mapping, sender=T.unsafe(nil)); end

  def resource(); end

  def scope_name(); end

  def subject_for(key); end

  def template_paths(); end
end

module Devise::Mailers::Helpers
  extend ::ActiveSupport::Concern
end

module Devise::Mailers
end

class Devise::Mapping
  def authenticatable?(); end

  def class_name(); end

  def confirmable?(); end

  def controllers(); end

  def database_authenticatable?(); end

  def failure_app(); end

  def format(); end

  def fullpath(); end

  def initialize(name, options); end

  def lockable?(); end

  def modules(); end

  def name(); end

  def no_input_strategies(); end

  def omniauthable?(); end

  def path(); end

  def path_names(); end

  def recoverable?(); end

  def registerable?(); end

  def rememberable?(); end

  def router_name(); end

  def routes(); end

  def scoped_path(); end

  def sign_out_via(); end

  def singular(); end

  def strategies(); end

  def timeoutable?(); end

  def to(); end

  def trackable?(); end

  def used_helpers(); end

  def used_routes(); end

  def validatable?(); end
end

class Devise::Mapping
  def self.add_module(m); end

  def self.find_by_path!(path, path_type=T.unsafe(nil)); end

  def self.find_scope!(obj); end
end

class Devise::MissingWarden
  def initialize(); end
end

class Devise::MissingWarden
end

module Devise::Models
  def devise(*modules); end

  def devise_modules_hook!(); end
end

module Devise::Models::Authenticatable
  def active_for_authentication?(); end

  def apply_to_attribute_or_variable(attr, method); end

  def authenticatable_salt(); end

  def devise_mailer(); end

  def downcase_keys(); end

  def inactive_message(); end

  def inspect(); end

  def send_devise_notification(notification, *args); end

  def serializable_hash(options=T.unsafe(nil)); end

  def strip_whitespace(); end

  def unauthenticated_message(); end

  def valid_for_authentication?(); end
  BLACKLIST_FOR_SERIALIZATION = ::T.let(nil, ::T.untyped)
end

module Devise::Models::Authenticatable::ClassMethods
  def authentication_keys(); end

  def authentication_keys=(value); end

  def case_insensitive_keys(); end

  def case_insensitive_keys=(value); end

  def devise_parameter_filter(); end

  def find_first_by_auth_conditions(tainted_conditions, opts=T.unsafe(nil)); end

  def find_for_authentication(tainted_conditions); end

  def find_or_initialize_with_error_by(attribute, value, error=T.unsafe(nil)); end

  def find_or_initialize_with_errors(required_attributes, attributes, error=T.unsafe(nil)); end

  def http_authenticatable(); end

  def http_authenticatable=(value); end

  def http_authenticatable?(strategy); end

  def http_authentication_key(); end

  def http_authentication_key=(value); end

  def params_authenticatable(); end

  def params_authenticatable=(value); end

  def params_authenticatable?(strategy); end

  def request_keys(); end

  def request_keys=(value); end

  def serialize_from_session(key, salt); end

  def serialize_into_session(record); end

  def skip_session_storage(); end

  def skip_session_storage=(value); end

  def strip_whitespace_keys(); end

  def strip_whitespace_keys=(value); end
end

module Devise::Models::Authenticatable::ClassMethods
  def self.available_configs(); end

  def self.available_configs=(available_configs); end
end

module Devise::Models::Authenticatable
  extend ::ActiveSupport::Concern
  def self.required_fields(klass); end
end

module Devise::Models::Confirmable
  def active_for_authentication?(); end

  def after_confirmation(); end

  def confirm(args=T.unsafe(nil)); end

  def confirmation_period_expired?(); end

  def confirmation_period_valid?(); end

  def confirmation_required?(); end

  def confirmed?(); end

  def generate_confirmation_token(); end

  def generate_confirmation_token!(); end

  def inactive_message(); end

  def initialize(*args, &block); end

  def pending_any_confirmation(); end

  def pending_reconfirmation?(); end

  def postpone_email_change?(); end

  def postpone_email_change_until_confirmation_and_regenerate_confirmation_token(); end

  def reconfirmation_required?(); end

  def resend_confirmation_instructions(); end

  def send_confirmation_instructions(); end

  def send_confirmation_notification?(); end

  def send_email_changed_notification?(); end

  def send_on_create_confirmation_instructions(); end

  def send_reconfirmation_instructions(); end

  def skip_confirmation!(); end

  def skip_confirmation_notification!(); end

  def skip_reconfirmation!(); end

  def skip_reconfirmation_in_callback!(); end
end

module Devise::Models::Confirmable::ClassMethods
  def allow_unconfirmed_access_for(); end

  def allow_unconfirmed_access_for=(value); end

  def confirm_by_token(confirmation_token); end

  def confirm_within(); end

  def confirm_within=(value); end

  def confirmation_keys(); end

  def confirmation_keys=(value); end

  def find_by_unconfirmed_email_with_errors(attributes=T.unsafe(nil)); end

  def reconfirmable(); end

  def reconfirmable=(value); end

  def send_confirmation_instructions(attributes=T.unsafe(nil)); end
end

module Devise::Models::Confirmable::ClassMethods
  def self.available_configs(); end

  def self.available_configs=(available_configs); end
end

module Devise::Models::Confirmable
  extend ::ActiveSupport::Concern
  def self.required_fields(klass); end
end

module Devise::Models::DatabaseAuthenticatable
  def after_database_authentication(); end

  def authenticatable_salt(); end

  def clean_up_passwords(); end

  def destroy_with_password(current_password); end

  def initialize(*args, &block); end

  def password=(new_password); end

  def password_digest(password); end

  def send_email_changed_notification(); end

  def send_email_changed_notification?(); end

  def send_password_change_notification(); end

  def send_password_change_notification?(); end

  def skip_email_changed_notification!(); end

  def skip_password_change_notification!(); end

  def update_with_password(params, *options); end

  def update_without_password(params, *options); end

  def valid_password?(password); end
end

module Devise::Models::DatabaseAuthenticatable::ClassMethods
  def find_for_database_authentication(conditions); end

  def pepper(); end

  def pepper=(value); end

  def send_email_changed_notification(); end

  def send_email_changed_notification=(value); end

  def send_password_change_notification(); end

  def send_password_change_notification=(value); end

  def stretches(); end

  def stretches=(value); end
end

module Devise::Models::DatabaseAuthenticatable::ClassMethods
  def self.available_configs(); end

  def self.available_configs=(available_configs); end
end

module Devise::Models::DatabaseAuthenticatable
  extend ::ActiveSupport::Concern
  def self.required_fields(klass); end
end

module Devise::Models::Lockable
  def access_locked?(); end

  def active_for_authentication?(); end

  def attempts_exceeded?(); end

  def if_access_locked(); end

  def inactive_message(); end

  def increment_failed_attempts(); end

  def last_attempt?(); end

  def lock_access!(opts=T.unsafe(nil)); end

  def lock_expired?(); end

  def lock_strategy_enabled?(*args, &block); end

  def resend_unlock_instructions(); end

  def send_unlock_instructions(); end

  def unauthenticated_message(); end

  def unlock_access!(); end

  def unlock_strategy_enabled?(*args, &block); end

  def valid_for_authentication?(); end
end

module Devise::Models::Lockable::ClassMethods
  def last_attempt_warning(); end

  def last_attempt_warning=(value); end

  def lock_strategy(); end

  def lock_strategy=(value); end

  def lock_strategy_enabled?(strategy); end

  def maximum_attempts(); end

  def maximum_attempts=(value); end

  def send_unlock_instructions(attributes=T.unsafe(nil)); end

  def unlock_access_by_token(unlock_token); end

  def unlock_in(); end

  def unlock_in=(value); end

  def unlock_keys(); end

  def unlock_keys=(value); end

  def unlock_strategy(); end

  def unlock_strategy=(value); end

  def unlock_strategy_enabled?(strategy); end
  BOTH_STRATEGIES = ::T.let(nil, ::T.untyped)
end

module Devise::Models::Lockable::ClassMethods
  def self.available_configs(); end

  def self.available_configs=(available_configs); end
end

module Devise::Models::Lockable
  extend ::ActiveSupport::Concern
  def self.required_fields(klass); end
end

class Devise::Models::MissingAttribute
  def initialize(attributes); end
end

class Devise::Models::MissingAttribute
end

module Devise::Models::Recoverable
  def clear_reset_password_token(); end

  def clear_reset_password_token?(); end

  def reset_password(new_password, new_password_confirmation); end

  def reset_password_period_valid?(); end

  def send_reset_password_instructions(); end

  def send_reset_password_instructions_notification(token); end

  def set_reset_password_token(); end
end

module Devise::Models::Recoverable::ClassMethods
  def reset_password_by_token(attributes=T.unsafe(nil)); end

  def reset_password_keys(); end

  def reset_password_keys=(value); end

  def reset_password_within(); end

  def reset_password_within=(value); end

  def send_reset_password_instructions(attributes=T.unsafe(nil)); end

  def sign_in_after_reset_password(); end

  def sign_in_after_reset_password=(value); end

  def with_reset_password_token(token); end
end

module Devise::Models::Recoverable::ClassMethods
  def self.available_configs(); end

  def self.available_configs=(available_configs); end
end

module Devise::Models::Recoverable
  extend ::ActiveSupport::Concern
  def self.required_fields(klass); end
end

module Devise::Models::Registerable
end

module Devise::Models::Registerable::ClassMethods
  def new_with_session(params, session); end

  def sign_in_after_change_password(); end

  def sign_in_after_change_password=(value); end
end

module Devise::Models::Registerable::ClassMethods
  def self.available_configs(); end

  def self.available_configs=(available_configs); end
end

module Devise::Models::Registerable
  extend ::ActiveSupport::Concern
  def self.required_fields(klass); end
end

module Devise::Models::Rememberable
  def after_remembered(); end

  def extend_remember_period(); end

  def forget_me!(); end

  def remember_expires_at(); end

  def remember_me(); end

  def remember_me!(); end

  def remember_me=(remember_me); end

  def remember_me?(token, generated_at); end

  def rememberable_options(); end

  def rememberable_value(); end
end

module Devise::Models::Rememberable::ClassMethods
  def expire_all_remember_me_on_sign_out(); end

  def expire_all_remember_me_on_sign_out=(value); end

  def extend_remember_period(); end

  def extend_remember_period=(value); end

  def remember_for(); end

  def remember_for=(value); end

  def remember_token(); end

  def rememberable_options(); end

  def rememberable_options=(value); end

  def serialize_from_cookie(*args); end

  def serialize_into_cookie(record); end
end

module Devise::Models::Rememberable::ClassMethods
  def self.available_configs(); end

  def self.available_configs=(available_configs); end
end

module Devise::Models::Rememberable
  extend ::ActiveSupport::Concern
  def self.required_fields(klass); end
end

module Devise::Models::Timeoutable
  def timedout?(last_access); end

  def timeout_in(); end
end

module Devise::Models::Timeoutable::ClassMethods
  def timeout_in(); end

  def timeout_in=(value); end
end

module Devise::Models::Timeoutable::ClassMethods
  def self.available_configs(); end

  def self.available_configs=(available_configs); end
end

module Devise::Models::Timeoutable
  extend ::ActiveSupport::Concern
  def self.required_fields(klass); end
end

module Devise::Models::Trackable
  def extract_ip_from(request); end

  def update_tracked_fields(request); end

  def update_tracked_fields!(request); end
end

module Devise::Models::Trackable
  def self.required_fields(klass); end
end

module Devise::Models::Validatable
  def email_required?(); end

  def password_required?(); end
  VALIDATIONS = ::T.let(nil, ::T.untyped)
end

module Devise::Models::Validatable::ClassMethods
  def email_regexp(); end

  def email_regexp=(value); end

  def password_length(); end

  def password_length=(value); end
end

module Devise::Models::Validatable::ClassMethods
  def self.available_configs(); end

  def self.available_configs=(available_configs); end
end

module Devise::Models::Validatable
  def self.assert_validations_api!(base); end

  def self.included(base); end

  def self.required_fields(klass); end
end

module Devise::Models
  def self.check_fields!(klass); end

  def self.config(mod, *accessors); end
end

class Devise::ParameterFilter
  def filter(conditions); end

  def filtered_hash_by_method_for_given_keys(conditions, method, condition_keys); end

  def initialize(case_insensitive_keys, strip_whitespace_keys); end

  def stringify_params(conditions); end
end

class Devise::ParameterFilter
end

class Devise::ParameterSanitizer
  def initialize(resource_class, resource_name, params); end

  def permit(action, keys: T.unsafe(nil), except: T.unsafe(nil), &block); end

  def sanitize(action); end
  DEFAULT_PERMITTED_ATTRIBUTES = ::T.let(nil, ::T.untyped)
end

class Devise::ParameterSanitizer
end

class Devise::PasswordsController
  def after_resetting_password_path_for(resource); end

  def after_sending_reset_password_instructions_path_for(resource_name); end

  def assert_reset_token_passed(); end

  def create(); end

  def edit(); end

  def new(); end

  def unlockable?(resource); end

  def update(); end
end

class Devise::PasswordsController
end

class Devise::RegistrationsController
  def account_update_params(); end

  def after_inactive_sign_up_path_for(resource); end

  def after_sign_up_path_for(resource); end

  def after_update_path_for(resource); end

  def authenticate_scope!(); end

  def build_resource(hash=T.unsafe(nil)); end

  def cancel(); end

  def create(); end

  def destroy(); end

  def edit(); end

  def new(); end

  def sign_up(resource_name, resource); end

  def sign_up_params(); end

  def update(); end

  def update_needs_confirmation?(resource, previous); end

  def update_resource(resource, params); end
end

class Devise::RegistrationsController
end

module Devise::RouteSet
  def finalize!(); end
end

module Devise::RouteSet
end

class Devise::SecretKeyFinder
  def find(); end

  def initialize(application); end
end

class Devise::SecretKeyFinder
end

class Devise::SessionsController
  def auth_options(); end

  def create(); end

  def destroy(); end

  def new(); end

  def serialize_options(resource); end

  def sign_in_params(); end
end

class Devise::SessionsController
end

module Devise::Strategies
end

class Devise::Strategies::Authenticatable
  def authentication_hash(); end

  def authentication_hash=(authentication_hash); end

  def authentication_type(); end

  def authentication_type=(authentication_type); end

  def clean_up_csrf?(); end

  def password(); end

  def password=(password); end
end

class Devise::Strategies::Authenticatable
end

class Devise::Strategies::Base
  def mapping(); end
end

class Devise::Strategies::Base
end

class Devise::Strategies::DatabaseAuthenticatable
  def authenticate!(); end
end

class Devise::Strategies::DatabaseAuthenticatable
end

class Devise::Strategies::Rememberable
  def authenticate!(); end
end

class Devise::Strategies::Rememberable
end

module Devise::Strategies
end

module Devise::Test
end

module Devise::Test::ControllerHelpers
  def _catch_warden(&block); end

  def _process_unauthenticated(env, options=T.unsafe(nil)); end

  def process(*_); end

  def setup_controller_for_warden(); end

  def sign_in(resource, deprecated=T.unsafe(nil), scope: T.unsafe(nil)); end

  def sign_out(resource_or_scope); end

  def warden(); end
end

module Devise::Test::ControllerHelpers
  extend ::ActiveSupport::Concern
end

module Devise::Test::IntegrationHelpers
  def setup_integration_for_devise(); end

  def sign_in(resource, scope: T.unsafe(nil)); end

  def sign_out(resource_or_scope); end

  def teardown_integration_for_devise(); end
end

module Devise::Test::IntegrationHelpers
  def self.included(base); end
end

module Devise::Test
end

module Devise::TestHelpers
end

module Devise::TestHelpers
  def self.included(base); end
end

class Devise::TimeInflector
  include ::ActionView::Helpers::DateHelper
end

class Devise::TimeInflector
  def self.instance(); end

  def self.time_ago_in_words(*args, &block); end
end

class Devise::TokenGenerator
  def digest(klass, column, value); end

  def generate(klass, column); end

  def initialize(key_generator, digest=T.unsafe(nil)); end
end

class Devise::TokenGenerator
end

class Devise::UnlocksController
  def after_sending_unlock_instructions_path_for(resource); end

  def after_unlock_path_for(resource); end

  def create(); end

  def new(); end

  def show(); end
end

class Devise::UnlocksController
end

module Devise
  def self.activerecord51?(); end

  def self.add_mapping(resource, options); end

  def self.add_module(module_name, options=T.unsafe(nil)); end

  def self.allow_unconfirmed_access_for(); end

  def self.allow_unconfirmed_access_for=(obj); end

  def self.authentication_keys(); end

  def self.authentication_keys=(obj); end

  def self.available_router_name(); end

  def self.case_insensitive_keys(); end

  def self.case_insensitive_keys=(obj); end

  def self.clean_up_csrf_token_on_authentication(); end

  def self.clean_up_csrf_token_on_authentication=(obj); end

  def self.configure_warden!(); end

  def self.confirm_within(); end

  def self.confirm_within=(obj); end

  def self.confirmation_keys(); end

  def self.confirmation_keys=(obj); end

  def self.default_scope(); end

  def self.default_scope=(obj); end

  def self.email_regexp(); end

  def self.email_regexp=(obj); end

  def self.expire_all_remember_me_on_sign_out(); end

  def self.expire_all_remember_me_on_sign_out=(obj); end

  def self.extend_remember_period(); end

  def self.extend_remember_period=(obj); end

  def self.friendly_token(length=T.unsafe(nil)); end

  def self.helpers(); end

  def self.http_authenticatable(); end

  def self.http_authenticatable=(obj); end

  def self.http_authenticatable_on_xhr(); end

  def self.http_authenticatable_on_xhr=(obj); end

  def self.http_authentication_key(); end

  def self.http_authentication_key=(obj); end

  def self.http_authentication_realm(); end

  def self.http_authentication_realm=(obj); end

  def self.include_helpers(scope); end

  def self.last_attempt_warning(); end

  def self.last_attempt_warning=(obj); end

  def self.lock_strategy(); end

  def self.lock_strategy=(obj); end

  def self.mailer(); end

  def self.mailer=(class_name); end

  def self.mailer_sender(); end

  def self.mailer_sender=(obj); end

  def self.mappings(); end

  def self.maximum_attempts(); end

  def self.maximum_attempts=(obj); end

  def self.navigational_formats(); end

  def self.navigational_formats=(obj); end

  def self.omniauth(provider, *args); end

  def self.omniauth_configs(); end

  def self.omniauth_path_prefix(); end

  def self.omniauth_path_prefix=(obj); end

  def self.omniauth_providers(); end

  def self.params_authenticatable(); end

  def self.params_authenticatable=(obj); end

  def self.paranoid(); end

  def self.paranoid=(obj); end

  def self.parent_controller(); end

  def self.parent_controller=(obj); end

  def self.parent_mailer(); end

  def self.parent_mailer=(obj); end

  def self.password_length(); end

  def self.password_length=(obj); end

  def self.pepper(); end

  def self.pepper=(obj); end

  def self.reconfirmable(); end

  def self.reconfirmable=(obj); end

  def self.ref(arg); end

  def self.regenerate_helpers!(); end

  def self.reload_routes(); end

  def self.reload_routes=(obj); end

  def self.remember_for(); end

  def self.remember_for=(obj); end

  def self.rememberable_options(); end

  def self.rememberable_options=(obj); end

  def self.request_keys(); end

  def self.request_keys=(obj); end

  def self.reset_password_keys(); end

  def self.reset_password_keys=(obj); end

  def self.reset_password_within(); end

  def self.reset_password_within=(obj); end

  def self.router_name(); end

  def self.router_name=(obj); end

  def self.scoped_views(); end

  def self.scoped_views=(obj); end

  def self.secret_key(); end

  def self.secret_key=(obj); end

  def self.secure_compare(a, b); end

  def self.send_email_changed_notification(); end

  def self.send_email_changed_notification=(obj); end

  def self.send_password_change_notification(); end

  def self.send_password_change_notification=(obj); end

  def self.setup(); end

  def self.sign_in_after_change_password(); end

  def self.sign_in_after_change_password=(obj); end

  def self.sign_in_after_reset_password(); end

  def self.sign_in_after_reset_password=(obj); end

  def self.sign_out_all_scopes(); end

  def self.sign_out_all_scopes=(obj); end

  def self.sign_out_via(); end

  def self.sign_out_via=(obj); end

  def self.skip_session_storage(); end

  def self.skip_session_storage=(obj); end

  def self.stretches(); end

  def self.stretches=(obj); end

  def self.strip_whitespace_keys(); end

  def self.strip_whitespace_keys=(obj); end

  def self.timeout_in(); end

  def self.timeout_in=(obj); end

  def self.token_generator(); end

  def self.token_generator=(obj); end

  def self.unlock_in(); end

  def self.unlock_in=(obj); end

  def self.unlock_keys(); end

  def self.unlock_keys=(obj); end

  def self.unlock_strategy(); end

  def self.unlock_strategy=(obj); end

  def self.warden(&block); end

  def self.warden_config(); end

  def self.warden_config=(obj); end
end

class DeviseController
  include ::Devise::Controllers::ScopedViews
  def assert_is_devise_resource!(); end

  def clean_up_passwords(object); end

  def devise_i18n_options(options); end

  def devise_mapping(); end

  def find_message(kind, options=T.unsafe(nil)); end

  def navigational_formats(); end

  def require_no_authentication(); end

  def resource(); end

  def resource=(new_resource); end

  def resource_class(); end

  def resource_name(); end

  def resource_params(); end

  def respond_with_navigational(*args, &block); end

  def scope_name(); end

  def set_flash_message(key, kind, options=T.unsafe(nil)); end

  def set_flash_message!(key, kind, options=T.unsafe(nil)); end

  def set_minimum_password_length(); end

  def signed_in_resource(); end

  def successfully_sent?(resource); end

  def translation_scope(); end

  def unknown_action!(msg); end
end

class DeviseController
end

module DeviseHelper
  def devise_error_messages!(); end
end

class DidYouMean::ClassNameChecker
  def class_name(); end

  def class_names(); end

  def corrections(); end

  def initialize(exception); end

  def scopes(); end
end

module DidYouMean::Correctable
  def corrections(); end

  def original_message(); end

  def spell_checker(); end

  def to_s(); end
end

class DidYouMean::DeprecatedIgnoredCallers
  def +(*_); end

  def <<(*_); end
end

class DidYouMean::DeprecatedIgnoredCallers
end

module DidYouMean::Jaro
  def self.distance(str1, str2); end
end

module DidYouMean::JaroWinkler
  def self.distance(str1, str2); end
end

class DidYouMean::KeyErrorChecker
  def corrections(); end

  def initialize(key_error); end
end

class DidYouMean::KeyErrorChecker
end

module DidYouMean::Levenshtein
  def self.distance(str1, str2); end

  def self.min3(a, b, c); end
end

class DidYouMean::MethodNameChecker
  def corrections(); end

  def initialize(exception); end

  def method_name(); end

  def method_names(); end

  def receiver(); end
end

class DidYouMean::NullChecker
  def corrections(); end

  def initialize(*_); end
end

class DidYouMean::PlainFormatter
  def message_for(corrections); end
end

class DidYouMean::PlainFormatter
end

class DidYouMean::VariableNameChecker
  def corrections(); end

  def cvar_names(); end

  def initialize(exception); end

  def ivar_names(); end

  def lvar_names(); end

  def method_names(); end

  def name(); end
  RB_PREDEFINED_OBJECTS = ::T.let(nil, ::T.untyped)
end

module DidYouMean
  def self.formatter(); end

  def self.formatter=(formatter); end
end

module Digest::UUID
  DNS_NAMESPACE = ::T.let(nil, ::T.untyped)
  OID_NAMESPACE = ::T.let(nil, ::T.untyped)
  URL_NAMESPACE = ::T.let(nil, ::T.untyped)
  X500_NAMESPACE = ::T.let(nil, ::T.untyped)
end

class Dir
  def self.exists?(_); end

end

class ERB
  def def_method(mod, methodname, fname=T.unsafe(nil)); end

  def def_module(methodname=T.unsafe(nil)); end
end

class ERB::Compiler::Scanner
  DEFAULT_ETAGS = ::T.let(nil, ::T.untyped)
  DEFAULT_STAGS = ::T.let(nil, ::T.untyped)
end

module ERB::Util
  HTML_ESCAPE = ::T.let(nil, ::T.untyped)
  HTML_ESCAPE_ONCE_REGEXP = ::T.let(nil, ::T.untyped)
  JSON_ESCAPE = ::T.let(nil, ::T.untyped)
  JSON_ESCAPE_REGEXP = ::T.let(nil, ::T.untyped)
end

class Encoding
  def _dump(*_); end
end

class Encoding::Converter
  def initialize(*_); end
end

class Encoding
  def self._load(_); end
end

module Enumerable
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def sum(identity=T.unsafe(nil), &block); end
end

class Enumerator
  def each_with_index(); end
end

class Enumerator::Generator
  def each(*_, &blk); end

  def initialize(*_); end
end

class Errno::EAUTH
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EAUTH
end

class Errno::EBADRPC
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EBADRPC
end

Errno::ECAPMODE = Errno::NOERROR

Errno::EDEADLOCK = Errno::NOERROR

Errno::EDOOFUS = Errno::NOERROR

class Errno::EFTYPE
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EFTYPE
end

Errno::EIPSEC = Errno::NOERROR

class Errno::ENEEDAUTH
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::ENEEDAUTH
end

class Errno::ENOATTR
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::ENOATTR
end

Errno::ENOTCAPABLE = Errno::NOERROR

class Errno::ENOTSUP
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::ENOTSUP
end

class Errno::EPROCLIM
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EPROCLIM
end

class Errno::EPROCUNAVAIL
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EPROCUNAVAIL
end

class Errno::EPROGMISMATCH
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EPROGMISMATCH
end

class Errno::EPROGUNAVAIL
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EPROGUNAVAIL
end

class Errno::ERPCMISMATCH
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::ERPCMISMATCH
end

module Erubi
  RANGE_ALL = ::T.let(nil, ::T.untyped)
  RANGE_FIRST = ::T.let(nil, ::T.untyped)
  RANGE_LAST = ::T.let(nil, ::T.untyped)
  TEXT_END = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Etc::Group
  def gid(); end

  def gid=(_); end

  def mem(); end

  def mem=(_); end

  def name(); end

  def name=(_); end

  def passwd(); end

  def passwd=(_); end
end

class Etc::Group
  extend ::Enumerable
  def self.[](*_); end

  def self.each(&blk); end

  def self.members(); end
end

class Etc::Passwd
  def change(); end

  def change=(_); end

  def dir=(_); end

  def expire(); end

  def expire=(_); end

  def gecos(); end

  def gecos=(_); end

  def gid=(_); end

  def name=(_); end

  def passwd=(_); end

  def shell=(_); end

  def uclass(); end

  def uclass=(_); end

  def uid=(_); end
end

class Etc::Passwd
  extend ::Enumerable
  def self.[](*_); end

  def self.each(&blk); end

  def self.members(); end
end

module Exception2MessageMapper
  def bind(cl); end

end

Exception2MessageMapper::E2MM = Exception2MessageMapper

class Exception2MessageMapper::ErrNotRegisteredException
end

class Exception2MessageMapper::ErrNotRegisteredException
end

module Exception2MessageMapper
  def self.Fail(klass=T.unsafe(nil), err=T.unsafe(nil), *rest); end

  def self.Raise(klass=T.unsafe(nil), err=T.unsafe(nil), *rest); end

  def self.def_e2message(k, c, m); end

  def self.def_exception(k, n, m, s=T.unsafe(nil)); end

  def self.e2mm_message(klass, exp); end

  def self.extend_object(cl); end

  def self.message(klass, exp); end
end

class ExitCalledError
end

class ExitCalledError
end

module FFI
  CURRENT_PROCESS = ::T.let(nil, ::T.untyped)
  SizeTypes = ::T.let(nil, ::T.untyped)
  TYPE_BOOL = ::T.let(nil, ::T.untyped)
  TYPE_BUFFER_IN = ::T.let(nil, ::T.untyped)
  TYPE_BUFFER_INOUT = ::T.let(nil, ::T.untyped)
  TYPE_BUFFER_OUT = ::T.let(nil, ::T.untyped)
  TYPE_FLOAT32 = ::T.let(nil, ::T.untyped)
  TYPE_FLOAT64 = ::T.let(nil, ::T.untyped)
  TYPE_INT16 = ::T.let(nil, ::T.untyped)
  TYPE_INT32 = ::T.let(nil, ::T.untyped)
  TYPE_INT64 = ::T.let(nil, ::T.untyped)
  TYPE_INT8 = ::T.let(nil, ::T.untyped)
  TYPE_LONG = ::T.let(nil, ::T.untyped)
  TYPE_LONGDOUBLE = ::T.let(nil, ::T.untyped)
  TYPE_POINTER = ::T.let(nil, ::T.untyped)
  TYPE_STRING = ::T.let(nil, ::T.untyped)
  TYPE_UINT16 = ::T.let(nil, ::T.untyped)
  TYPE_UINT32 = ::T.let(nil, ::T.untyped)
  TYPE_UINT64 = ::T.let(nil, ::T.untyped)
  TYPE_UINT8 = ::T.let(nil, ::T.untyped)
  TYPE_ULONG = ::T.let(nil, ::T.untyped)
  TYPE_VARARGS = ::T.let(nil, ::T.untyped)
  TYPE_VOID = ::T.let(nil, ::T.untyped)
  TypeDefs = ::T.let(nil, ::T.untyped)
  USE_THIS_PROCESS_AS_LIBRARY = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

FFI::CallbackInfo = FFI::FunctionType

class FFI::DynamicLibrary
  RTLD_ALL_MASK = ::T.let(nil, ::T.untyped)
  RTLD_BINDING_MASK = ::T.let(nil, ::T.untyped)
  RTLD_DEEPBIND = ::T.let(nil, ::T.untyped)
  RTLD_FIRST = ::T.let(nil, ::T.untyped)
  RTLD_GLOBAL = ::T.let(nil, ::T.untyped)
  RTLD_LAZY = ::T.let(nil, ::T.untyped)
  RTLD_LOCAL = ::T.let(nil, ::T.untyped)
  RTLD_LOCATION_MASK = ::T.let(nil, ::T.untyped)
  RTLD_MEMBER = ::T.let(nil, ::T.untyped)
  RTLD_NODELETE = ::T.let(nil, ::T.untyped)
  RTLD_NOLOAD = ::T.let(nil, ::T.untyped)
  RTLD_NOW = ::T.let(nil, ::T.untyped)
end

FFI::FunctionInfo = FFI::FunctionType

module FFI::Library
  CURRENT_PROCESS = ::T.let(nil, ::T.untyped)
  FlagsMap = ::T.let(nil, ::T.untyped)
  LIBC = ::T.let(nil, ::T.untyped)
end

FFI::NativeLibrary = FFI::DynamicLibrary

module FFI::NativeType
  BOOL = ::T.let(nil, ::T.untyped)
  BUFFER_IN = ::T.let(nil, ::T.untyped)
  BUFFER_INOUT = ::T.let(nil, ::T.untyped)
  BUFFER_OUT = ::T.let(nil, ::T.untyped)
  FLOAT32 = ::T.let(nil, ::T.untyped)
  FLOAT64 = ::T.let(nil, ::T.untyped)
  INT16 = ::T.let(nil, ::T.untyped)
  INT32 = ::T.let(nil, ::T.untyped)
  INT64 = ::T.let(nil, ::T.untyped)
  INT8 = ::T.let(nil, ::T.untyped)
  LONG = ::T.let(nil, ::T.untyped)
  LONGDOUBLE = ::T.let(nil, ::T.untyped)
  POINTER = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  UINT16 = ::T.let(nil, ::T.untyped)
  UINT32 = ::T.let(nil, ::T.untyped)
  UINT64 = ::T.let(nil, ::T.untyped)
  UINT8 = ::T.let(nil, ::T.untyped)
  ULONG = ::T.let(nil, ::T.untyped)
  VARARGS = ::T.let(nil, ::T.untyped)
  VOID = ::T.let(nil, ::T.untyped)
end

module FFI::NativeType
end

class FFI::NullPointerError
end

class FFI::NullPointerError
end

module FFI::Platform
  ADDRESS_ALIGN = ::T.let(nil, ::T.untyped)
  ADDRESS_SIZE = ::T.let(nil, ::T.untyped)
  ARCH = ::T.let(nil, ::T.untyped)
  BIG_ENDIAN = ::T.let(nil, ::T.untyped)
  BYTE_ORDER = ::T.let(nil, ::T.untyped)
  CONF_DIR = ::T.let(nil, ::T.untyped)
  CPU = ::T.let(nil, ::T.untyped)
  DOUBLE_ALIGN = ::T.let(nil, ::T.untyped)
  DOUBLE_SIZE = ::T.let(nil, ::T.untyped)
  FLOAT_ALIGN = ::T.let(nil, ::T.untyped)
  FLOAT_SIZE = ::T.let(nil, ::T.untyped)
  INT16_ALIGN = ::T.let(nil, ::T.untyped)
  INT16_SIZE = ::T.let(nil, ::T.untyped)
  INT32_ALIGN = ::T.let(nil, ::T.untyped)
  INT32_SIZE = ::T.let(nil, ::T.untyped)
  INT64_ALIGN = ::T.let(nil, ::T.untyped)
  INT64_SIZE = ::T.let(nil, ::T.untyped)
  INT8_ALIGN = ::T.let(nil, ::T.untyped)
  INT8_SIZE = ::T.let(nil, ::T.untyped)
  IS_BSD = ::T.let(nil, ::T.untyped)
  IS_DRAGONFLYBSD = ::T.let(nil, ::T.untyped)
  IS_FREEBSD = ::T.let(nil, ::T.untyped)
  IS_GNU = ::T.let(nil, ::T.untyped)
  IS_LINUX = ::T.let(nil, ::T.untyped)
  IS_MAC = ::T.let(nil, ::T.untyped)
  IS_NETBSD = ::T.let(nil, ::T.untyped)
  IS_OPENBSD = ::T.let(nil, ::T.untyped)
  IS_SOLARIS = ::T.let(nil, ::T.untyped)
  IS_WINDOWS = ::T.let(nil, ::T.untyped)
  LIBC = ::T.let(nil, ::T.untyped)
  LIBPREFIX = ::T.let(nil, ::T.untyped)
  LIBSUFFIX = ::T.let(nil, ::T.untyped)
  LITTLE_ENDIAN = ::T.let(nil, ::T.untyped)
  LONG_ALIGN = ::T.let(nil, ::T.untyped)
  LONG_DOUBLE_ALIGN = ::T.let(nil, ::T.untyped)
  LONG_DOUBLE_SIZE = ::T.let(nil, ::T.untyped)
  LONG_SIZE = ::T.let(nil, ::T.untyped)
  NAME = ::T.let(nil, ::T.untyped)
  OS = ::T.let(nil, ::T.untyped)
  OSVERSION = ::T.let(nil, ::T.untyped)
end

class FFI::Pointer
  NULL = ::T.let(nil, ::T.untyped)
  SIZE = ::T.let(nil, ::T.untyped)
end

class FFI::Struct::InlineArray
  include ::Enumerable
end

class FFI::StructLayout::Number
end

class FFI::StructLayout::Number
end

class FFI::StructLayout::Pointer
end

class FFI::StructLayout::Pointer
end

class FFI::StructLayout::String
end

class FFI::StructLayout::String
end

class FFI::StructLayoutBuilder
  NUMBER_TYPES = ::T.let(nil, ::T.untyped)
end

class FFI::Type
  BOOL = ::T.let(nil, ::T.untyped)
  BUFFER_IN = ::T.let(nil, ::T.untyped)
  BUFFER_INOUT = ::T.let(nil, ::T.untyped)
  BUFFER_OUT = ::T.let(nil, ::T.untyped)
  CHAR = ::T.let(nil, ::T.untyped)
  DOUBLE = ::T.let(nil, ::T.untyped)
  FLOAT = ::T.let(nil, ::T.untyped)
  FLOAT32 = ::T.let(nil, ::T.untyped)
  FLOAT64 = ::T.let(nil, ::T.untyped)
  INT = ::T.let(nil, ::T.untyped)
  INT16 = ::T.let(nil, ::T.untyped)
  INT32 = ::T.let(nil, ::T.untyped)
  INT64 = ::T.let(nil, ::T.untyped)
  INT8 = ::T.let(nil, ::T.untyped)
  LONG = ::T.let(nil, ::T.untyped)
  LONGDOUBLE = ::T.let(nil, ::T.untyped)
  LONG_LONG = ::T.let(nil, ::T.untyped)
  POINTER = ::T.let(nil, ::T.untyped)
  SCHAR = ::T.let(nil, ::T.untyped)
  SHORT = ::T.let(nil, ::T.untyped)
  SINT = ::T.let(nil, ::T.untyped)
  SLONG = ::T.let(nil, ::T.untyped)
  SLONG_LONG = ::T.let(nil, ::T.untyped)
  SSHORT = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  UCHAR = ::T.let(nil, ::T.untyped)
  UINT = ::T.let(nil, ::T.untyped)
  UINT16 = ::T.let(nil, ::T.untyped)
  UINT32 = ::T.let(nil, ::T.untyped)
  UINT64 = ::T.let(nil, ::T.untyped)
  UINT8 = ::T.let(nil, ::T.untyped)
  ULONG = ::T.let(nil, ::T.untyped)
  ULONG_LONG = ::T.let(nil, ::T.untyped)
  USHORT = ::T.let(nil, ::T.untyped)
  VARARGS = ::T.let(nil, ::T.untyped)
  VOID = ::T.let(nil, ::T.untyped)
end

FFI::Type::Array = FFI::ArrayType

FFI::Type::Function = FFI::FunctionType

FFI::Type::Struct = FFI::StructByValue

class FSEvent
  VERSION = ::T.let(nil, ::T.untyped)
end

class FalseClass
  include ::JSON::Ext::Generator::GeneratorMethods::FalseClass
end

module Faraday
  METHODS_WITH_BODY = ::T.let(nil, ::T.untyped)
  METHODS_WITH_QUERY = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Faraday::Adapter
  CONTENT_LENGTH = ::T.let(nil, ::T.untyped)
  TIMEOUT_KEYS = ::T.let(nil, ::T.untyped)
end

class Faraday::Adapter::EMHttp
  include ::Faraday::Adapter::EMHttp::Options
  def create_request(env); end

  def error_message(client); end

  def parallel?(env); end

  def perform_request(env); end

  def perform_single_request(env); end

  def raise_error(msg); end

  def timeout_message?(msg); end
end

class Faraday::Adapter::EMHttp::Manager
  def add(&block); end

  def check_finished(); end

  def perform_request(); end

  def reset(); end

  def run(); end

  def running?(); end
end

class Faraday::Adapter::EMHttp::Manager
end

module Faraday::Adapter::EMHttp::Options
  def configure_compression(options, env); end

  def configure_proxy(options, env); end

  def configure_socket(options, env); end

  def configure_ssl(options, env); end

  def configure_timeout(options, env); end

  def connection_config(env); end

  def read_body(env); end

  def request_config(env); end

  def request_options(env); end
end

module Faraday::Adapter::EMHttp::Options
end

class Faraday::Adapter::EMHttp
  def self.setup_parallel_manager(_options=T.unsafe(nil)); end
end

class Faraday::Adapter::EMSynchrony
  include ::Faraday::Adapter::EMHttp::Options
  def create_request(env); end
end

class Faraday::Adapter::EMSynchrony::ParallelManager
  def add(request, method, *args, &block); end

  def run(); end
end

class Faraday::Adapter::EMSynchrony::ParallelManager
end

class Faraday::Adapter::EMSynchrony
  def self.setup_parallel_manager(_options=T.unsafe(nil)); end
end

class Faraday::Adapter::Excon
  def build_connection(env); end

  def read_body(env); end
  OPTS_KEYS = ::T.let(nil, ::T.untyped)
end

class Faraday::Adapter::Excon
end

class Faraday::Adapter::HTTPClient
  def build_connection(env); end

  def configure_client(client); end

  def configure_proxy(client, proxy); end

  def configure_socket(client, bind); end

  def configure_ssl(client, ssl); end

  def configure_timeouts(client, req); end

  def ssl_cert_store(ssl); end

  def ssl_verify_mode(ssl); end
end

class Faraday::Adapter::HTTPClient
end

class Faraday::Adapter::NetHttp
  def build_connection(env); end

  def initialize(app=T.unsafe(nil), opts=T.unsafe(nil), &block); end

  def net_http_connection(env); end
  NET_HTTP_EXCEPTIONS = ::T.let(nil, ::T.untyped)
end

class Faraday::Adapter::NetHttp
end

class Faraday::Adapter::NetHttpPersistent
  SSL_CONFIGURATIONS = ::T.let(nil, ::T.untyped)
end

class Faraday::Adapter::NetHttpPersistent
end

class Faraday::Adapter::Patron
  def build_connection(env); end

  def configure_proxy(session, proxy); end

  def configure_ssl(session, ssl); end

  def configure_timeouts(session, req); end
  CURL_TIMEOUT_MESSAGES = ::T.let(nil, ::T.untyped)
end

class Faraday::Adapter::Patron
end

class Faraday::Adapter::Rack
  def initialize(faraday_app, rack_app); end
  SPECIAL_HEADERS = ::T.let(nil, ::T.untyped)
end

class Faraday::Adapter::Rack
end

class Faraday::Adapter::Test
  def configure(); end

  def initialize(app, stubs=T.unsafe(nil), &block); end

  def stubs(); end

  def stubs=(stubs); end
end

class Faraday::Adapter::Test::Stub
  def headers_match?(request_headers); end

  def initialize(host, full, headers, body, block); end

  def matches?(request_host, request_uri, request_headers, request_body); end

  def params_match?(request_params); end

  def path_match?(request_path, meta); end
end

class Faraday::Adapter::Test::Stub
end

class Faraday::Adapter::Test::Stubs
  def delete(path, headers=T.unsafe(nil), &block); end

  def empty?(); end

  def get(path, headers=T.unsafe(nil), &block); end

  def head(path, headers=T.unsafe(nil), &block); end

  def match(request_method, host, path, headers, body); end

  def matches?(stack, host, path, headers, body); end

  def new_stub(request_method, path, headers=T.unsafe(nil), body=T.unsafe(nil), &block); end

  def options(path, headers=T.unsafe(nil), &block); end

  def patch(path, body=T.unsafe(nil), headers=T.unsafe(nil), &block); end

  def post(path, body=T.unsafe(nil), headers=T.unsafe(nil), &block); end

  def put(path, body=T.unsafe(nil), headers=T.unsafe(nil), &block); end

  def verify_stubbed_calls(); end
end

class Faraday::Adapter::Test::Stubs::NotFound
end

class Faraday::Adapter::Test::Stubs::NotFound
end

class Faraday::Adapter::Test::Stubs
end

class Faraday::Adapter::Test
end

class Faraday::Adapter::Typhoeus
  def call(); end
end

class Faraday::Adapter::Typhoeus
end

class Faraday::Connection
  METHODS = ::T.let(nil, ::T.untyped)
end

module Faraday::DecodeMethods
  SUBKEYS_REGEX = ::T.let(nil, ::T.untyped)
end

class Faraday::Env
  ContentLength = ::T.let(nil, ::T.untyped)
  MethodsWithBodies = ::T.let(nil, ::T.untyped)
  StatusesWithoutBody = ::T.let(nil, ::T.untyped)
  SuccessfulStatuses = ::T.let(nil, ::T.untyped)
end

Faraday::FilePart = UploadIO

Faraday::Parts = Parts

class Faraday::RackBuilder
  LOCK_ERR = ::T.let(nil, ::T.untyped)
  NO_ARGUMENT = ::T.let(nil, ::T.untyped)
end

class Faraday::RackBuilder::Handler
  REGISTRY = ::T.let(nil, ::T.untyped)
end

class Faraday::Request::Authorization
  def call(env); end

  def initialize(app, type, token); end
  KEY = ::T.let(nil, ::T.untyped)
end

class Faraday::Request::Authorization
  def self.build_hash(type, hash); end

  def self.header(type, token); end
end

class Faraday::Request::BasicAuthentication
end

class Faraday::Request::BasicAuthentication
  def self.header(login, pass); end
end

class Faraday::Request::Instrumentation
  def call(env); end

  def initialize(app, options=T.unsafe(nil)); end
end

class Faraday::Request::Instrumentation::Options
end

class Faraday::Request::Instrumentation::Options
end

class Faraday::Request::Instrumentation
end

class Faraday::Request::Multipart
  DEFAULT_BOUNDARY_PREFIX = ::T.let(nil, ::T.untyped)
end

class Faraday::Request::Retry
  def build_exception_matcher(exceptions); end

  def calculate_sleep_amount(retries, env); end

  def call(env); end

  def initialize(app, options=T.unsafe(nil)); end
  DEFAULT_EXCEPTIONS = ::T.let(nil, ::T.untyped)
  IDEMPOTENT_METHODS = ::T.let(nil, ::T.untyped)
end

class Faraday::Request::Retry::Options
  DEFAULT_CHECK = ::T.let(nil, ::T.untyped)
end

class Faraday::Request::Retry::Options
end

class Faraday::Request::Retry
end

class Faraday::Request::TokenAuthentication
  def initialize(app, token, options=T.unsafe(nil)); end
end

class Faraday::Request::TokenAuthentication
  def self.header(token, options=T.unsafe(nil)); end
end

class Faraday::Request::UrlEncoded
  CONTENT_TYPE = ::T.let(nil, ::T.untyped)
end

class Faraday::Response::Logger
  def initialize(app, logger=T.unsafe(nil), options=T.unsafe(nil)); end
end

class Faraday::Response::Logger
end

class Faraday::Response::RaiseError
  ClientErrorStatuses = ::T.let(nil, ::T.untyped)
  ServerErrorStatuses = ::T.let(nil, ::T.untyped)
end

Faraday::Timer = Timeout

Faraday::UploadIO = UploadIO

module Faraday::Utils
  DEFAULT_SEP = ::T.let(nil, ::T.untyped)
  ESCAPE_RE = ::T.let(nil, ::T.untyped)
end

class Faraday::Utils::Headers
  KeyMap = ::T.let(nil, ::T.untyped)
end

class Fiber
  def transfer(*_); end
end

class Fiber
  def self.current(); end
end

class Figaro::Application
  FIGARO_ENV_PREFIX = ::T.let(nil, ::T.untyped)
end

class File
  def self.exists?(_); end

  def self.probe_stat_in(dir); end
end

FileList = Rake::FileList

module FileUtils
  include ::FileUtils::StreamUtils_
  LN_SUPPORTED = ::T.let(nil, ::T.untyped)
  RUBY = ::T.let(nil, ::T.untyped)
end

module FileUtils::DryRun
  include ::FileUtils
  include ::FileUtils::StreamUtils_
  include ::FileUtils::LowMethods
end

module FileUtils::DryRun
  extend ::FileUtils::DryRun
  extend ::FileUtils
  extend ::FileUtils::StreamUtils_
  extend ::FileUtils::LowMethods
end

module FileUtils::NoWrite
  include ::FileUtils
  include ::FileUtils::StreamUtils_
  include ::FileUtils::LowMethods
end

module FileUtils::NoWrite
  extend ::FileUtils::NoWrite
  extend ::FileUtils
  extend ::FileUtils::StreamUtils_
  extend ::FileUtils::LowMethods
end

module FileUtils::Verbose
  include ::FileUtils
  include ::FileUtils::StreamUtils_
end

module FileUtils::Verbose
  extend ::FileUtils::Verbose
  extend ::FileUtils
  extend ::FileUtils::StreamUtils_
end

module FileUtils
  extend ::FileUtils::StreamUtils_
end

class Float
  include ::JSON::Ext::Generator::GeneratorMethods::Float
  include ::ActiveSupport::NumericWithFormat
end

module Formtastic
  def deprecation(); end

  def deprecation=(obj); end
end

class Formtastic::ActionClassFinder
  def initialize(builder); end
end

class Formtastic::ActionClassFinder
end

module Formtastic::Actions
end

module Formtastic::Actions::Base
  include ::Formtastic::LocalizedString
  def accesskey(); end

  def builder(); end

  def builder=(builder); end

  def button_html(); end

  def button_html_from_options(); end

  def check_supported_methods!(); end

  def default_button_html(); end

  def default_wrapper_classes(); end

  def default_wrapper_html_options(); end

  def default_wrapper_id(); end

  def extra_button_html_options(); end

  def i18n_key(); end

  def initialize(builder, template, object, object_name, method, options); end

  def method(); end

  def method=(method); end

  def new_or_persisted_object?(); end

  def object(); end

  def object=(object); end

  def object_name(); end

  def object_name=(object_name); end

  def options(); end

  def options=(options); end

  def sanitized_object_name(); end

  def submit_i18n_key(); end

  def supported_methods(); end

  def template(); end

  def template=(template); end

  def text(); end

  def to_html(); end

  def wrapper(&block); end

  def wrapper_class(); end

  def wrapper_classes_from_options(); end

  def wrapper_html_options(); end

  def wrapper_html_options_from_options(); end

  def wrapper_id(); end

  def wrapper_id_from_options(); end
end

module Formtastic::Actions::Base
end

class Formtastic::Actions::ButtonAction
  include ::Formtastic::Actions::Base
  include ::Formtastic::LocalizedString
  include ::Formtastic::Actions::Buttonish
end

class Formtastic::Actions::ButtonAction
end

module Formtastic::Actions::Buttonish
  def extra_button_html_options(); end

  def supported_methods(); end
end

module Formtastic::Actions::Buttonish
end

class Formtastic::Actions::InputAction
  include ::Formtastic::Actions::Base
  include ::Formtastic::LocalizedString
  include ::Formtastic::Actions::Buttonish
end

class Formtastic::Actions::InputAction
end

class Formtastic::Actions::LinkAction
  include ::Formtastic::Actions::Base
  include ::Formtastic::LocalizedString
  def url(); end
end

class Formtastic::Actions::LinkAction
end

module Formtastic::Actions
  extend ::ActiveSupport::Autoload
end

Formtastic::Deprecation = ActiveSupport::Deprecation

class Formtastic::Engine
end

class Formtastic::Engine
end

class Formtastic::FormBuilder
  include ::Formtastic::HtmlAttributes
  include ::Formtastic::Helpers::InputHelper
  include ::Formtastic::Helpers::InputsHelper
  include ::Formtastic::Helpers::ActionHelper
  include ::Formtastic::Helpers::ActionsHelper
  include ::Formtastic::Helpers::FieldsetWrapper
  include ::Formtastic::Helpers::ErrorsHelper
  include ::Formtastic::Helpers::FileColumnDetection
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Helpers::Enum
  include ::Formtastic::LocalizedString
  def action_class_finder(); end

  def action_class_finder=(val); end

  def action_class_finder?(); end

  def action_namespaces(); end

  def action_namespaces=(val); end

  def action_namespaces?(); end

  def all_fields_required_by_default(); end

  def all_fields_required_by_default=(val); end

  def all_fields_required_by_default?(); end

  def auto_index(); end

  def collection_label_methods(); end

  def collection_label_methods=(val); end

  def collection_label_methods?(); end

  def collection_value_methods(); end

  def collection_value_methods=(val); end

  def collection_value_methods?(); end

  def custom_namespace(); end

  def custom_namespace=(val); end

  def custom_namespace?(); end

  def default_commit_button_accesskey(); end

  def default_commit_button_accesskey=(val); end

  def default_commit_button_accesskey?(); end

  def default_error_list_class(); end

  def default_error_list_class=(val); end

  def default_error_list_class?(); end

  def default_hint_class(); end

  def default_hint_class=(val); end

  def default_hint_class?(); end

  def default_inline_error_class(); end

  def default_inline_error_class=(val); end

  def default_inline_error_class?(); end

  def default_text_area_height(); end

  def default_text_area_height=(val); end

  def default_text_area_height?(); end

  def default_text_area_width(); end

  def default_text_area_width=(val); end

  def default_text_area_width?(); end

  def default_text_field_size(); end

  def default_text_field_size=(val); end

  def default_text_field_size?(); end

  def escape_html_entities_in_hints_and_labels(); end

  def escape_html_entities_in_hints_and_labels=(val); end

  def escape_html_entities_in_hints_and_labels?(); end

  def file_metadata_suffixes(); end

  def file_metadata_suffixes=(val); end

  def file_metadata_suffixes?(); end

  def file_methods(); end

  def file_methods=(val); end

  def file_methods?(); end

  def i18n_cache_lookups(); end

  def i18n_cache_lookups=(val); end

  def i18n_cache_lookups?(); end

  def i18n_localizer(); end

  def i18n_localizer=(val); end

  def i18n_localizer?(); end

  def i18n_lookups_by_default(); end

  def i18n_lookups_by_default=(val); end

  def i18n_lookups_by_default?(); end

  def include_blank_for_select_by_default(); end

  def include_blank_for_select_by_default=(val); end

  def include_blank_for_select_by_default?(); end

  def initialize(object_name, object, template, options, block=T.unsafe(nil)); end

  def inline_errors(); end

  def inline_errors=(val); end

  def inline_errors?(); end

  def input_class_finder(); end

  def input_class_finder=(val); end

  def input_class_finder?(); end

  def input_namespaces(); end

  def input_namespaces=(val); end

  def input_namespaces?(); end

  def label_str_method(); end

  def label_str_method=(val); end

  def label_str_method?(); end

  def optional_string(); end

  def optional_string=(val); end

  def optional_string?(); end

  def perform_browser_validations(); end

  def perform_browser_validations=(val); end

  def perform_browser_validations?(); end

  def priority_countries(); end

  def priority_countries=(val); end

  def priority_countries?(); end

  def priority_time_zones(); end

  def priority_time_zones=(val); end

  def priority_time_zones?(); end

  def required_string(); end

  def required_string=(val); end

  def required_string?(); end

  def semantic_fields_for(record_or_name_or_array, *args, &block); end

  def skipped_columns(); end

  def skipped_columns=(val); end

  def skipped_columns?(); end

  def template(); end

  def use_required_attribute(); end

  def use_required_attribute=(val); end

  def use_required_attribute?(); end
end

class Formtastic::FormBuilder
  def self.action_class_finder(); end

  def self.action_class_finder=(val); end

  def self.action_class_finder?(); end

  def self.action_namespaces(); end

  def self.action_namespaces=(val); end

  def self.action_namespaces?(); end

  def self.all_fields_required_by_default(); end

  def self.all_fields_required_by_default=(val); end

  def self.all_fields_required_by_default?(); end

  def self.collection_label_methods(); end

  def self.collection_label_methods=(val); end

  def self.collection_label_methods?(); end

  def self.collection_value_methods(); end

  def self.collection_value_methods=(val); end

  def self.collection_value_methods?(); end

  def self.configure(name, default=T.unsafe(nil)); end

  def self.custom_namespace(); end

  def self.custom_namespace=(val); end

  def self.custom_namespace?(); end

  def self.default_commit_button_accesskey(); end

  def self.default_commit_button_accesskey=(val); end

  def self.default_commit_button_accesskey?(); end

  def self.default_error_list_class(); end

  def self.default_error_list_class=(val); end

  def self.default_error_list_class?(); end

  def self.default_hint_class(); end

  def self.default_hint_class=(val); end

  def self.default_hint_class?(); end

  def self.default_inline_error_class(); end

  def self.default_inline_error_class=(val); end

  def self.default_inline_error_class?(); end

  def self.default_text_area_height(); end

  def self.default_text_area_height=(val); end

  def self.default_text_area_height?(); end

  def self.default_text_area_width(); end

  def self.default_text_area_width=(val); end

  def self.default_text_area_width?(); end

  def self.default_text_field_size(); end

  def self.default_text_field_size=(val); end

  def self.default_text_field_size?(); end

  def self.escape_html_entities_in_hints_and_labels(); end

  def self.escape_html_entities_in_hints_and_labels=(val); end

  def self.escape_html_entities_in_hints_and_labels?(); end

  def self.file_metadata_suffixes(); end

  def self.file_metadata_suffixes=(val); end

  def self.file_metadata_suffixes?(); end

  def self.file_methods(); end

  def self.file_methods=(val); end

  def self.file_methods?(); end

  def self.i18n_cache_lookups(); end

  def self.i18n_cache_lookups=(val); end

  def self.i18n_cache_lookups?(); end

  def self.i18n_localizer(); end

  def self.i18n_localizer=(val); end

  def self.i18n_localizer?(); end

  def self.i18n_lookups_by_default(); end

  def self.i18n_lookups_by_default=(val); end

  def self.i18n_lookups_by_default?(); end

  def self.include_blank_for_select_by_default(); end

  def self.include_blank_for_select_by_default=(val); end

  def self.include_blank_for_select_by_default?(); end

  def self.inline_errors(); end

  def self.inline_errors=(val); end

  def self.inline_errors?(); end

  def self.input_class_finder(); end

  def self.input_class_finder=(val); end

  def self.input_class_finder?(); end

  def self.input_namespaces(); end

  def self.input_namespaces=(val); end

  def self.input_namespaces?(); end

  def self.label_str_method(); end

  def self.label_str_method=(val); end

  def self.label_str_method?(); end

  def self.optional_string(); end

  def self.optional_string=(val); end

  def self.optional_string?(); end

  def self.perform_browser_validations(); end

  def self.perform_browser_validations=(val); end

  def self.perform_browser_validations?(); end

  def self.priority_countries(); end

  def self.priority_countries=(val); end

  def self.priority_countries?(); end

  def self.priority_time_zones(); end

  def self.priority_time_zones=(val); end

  def self.priority_time_zones?(); end

  def self.required_string(); end

  def self.required_string=(val); end

  def self.required_string?(); end

  def self.skipped_columns(); end

  def self.skipped_columns=(val); end

  def self.skipped_columns?(); end

  def self.use_required_attribute(); end

  def self.use_required_attribute=(val); end

  def self.use_required_attribute?(); end
end

module Formtastic::Helpers
end

module Formtastic::Helpers::ActionHelper
  def action(method, options=T.unsafe(nil)); end

  def action_class(as); end

  def custom_action_class_name(as); end

  def default_action_type(method, options=T.unsafe(nil)); end

  def namespaced_action_class(as); end

  def standard_action_class_name(as); end
end

module Formtastic::Helpers::ActionHelper
end

module Formtastic::Helpers::ActionsHelper
  include ::Formtastic::Helpers::FieldsetWrapper
  def actions(*args, &block); end

  def default_actions(); end
end

module Formtastic::Helpers::ActionsHelper
end

module Formtastic::Helpers::Enum
  def enum_for(method); end
end

module Formtastic::Helpers::Enum
end

module Formtastic::Helpers::ErrorsHelper
  include ::Formtastic::Helpers::FileColumnDetection
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::LocalizedString
  def error_keys(method, options); end

  def has_errors?(method, options); end

  def render_inline_errors?(); end

  def semantic_errors(*args); end
  INLINE_ERROR_TYPES = ::T.let(nil, ::T.untyped)
end

module Formtastic::Helpers::ErrorsHelper
end

module Formtastic::Helpers::FieldsetWrapper
  def field_set_and_list_wrapping(*args, &block); end

  def field_set_legend(html_options); end

  def parent_child_index(parent); end
end

module Formtastic::Helpers::FieldsetWrapper
end

module Formtastic::Helpers::FileColumnDetection
  def is_file?(method, options=T.unsafe(nil)); end
end

module Formtastic::Helpers::FileColumnDetection
end

module Formtastic::Helpers::FormHelper
  def builder(); end

  def builder=(obj); end

  def default_form_class(); end

  def default_form_class=(obj); end

  def default_form_model_class_proc(); end

  def default_form_model_class_proc=(obj); end

  def formtastic_field_error_proc(); end

  def formtastic_field_error_proc=(obj); end

  def semantic_fields_for(record_name, record_object=T.unsafe(nil), options=T.unsafe(nil), &block); end

  def semantic_form_for(record_or_name_or_array, *args, &proc); end

  def with_custom_field_error_proc(&block); end
end

module Formtastic::Helpers::FormHelper
  def self.builder(); end

  def self.builder=(obj); end

  def self.default_form_class(); end

  def self.default_form_class=(obj); end

  def self.default_form_model_class_proc(); end

  def self.default_form_model_class_proc=(obj); end

  def self.formtastic_field_error_proc(); end

  def self.formtastic_field_error_proc=(obj); end
end

module Formtastic::Helpers::InputHelper
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Helpers::Enum
  include ::Formtastic::Helpers::FileColumnDetection
  def column_for(method); end

  def custom_input_class_name(as); end

  def default_input_type(method, options=T.unsafe(nil)); end

  def input(method, options=T.unsafe(nil)); end

  def input_class(as); end

  def input_class_by_trying(as); end

  def input_class_with_const_defined(as); end

  def namespaced_input_class(as); end

  def standard_input_class_name(as); end
end

module Formtastic::Helpers::InputHelper
end

module Formtastic::Helpers::InputsHelper
  include ::Formtastic::Helpers::FieldsetWrapper
  include ::Formtastic::LocalizedString
  def association_columns(*by_associations); end

  def content_columns(); end

  def default_columns_for_object(); end

  def field_set_title_from_args(*args); end

  def fieldset_contents_from_column_list(columns); end

  def inputs(*args, &block); end

  def inputs_for_nested_attributes(*args, &block); end
end

module Formtastic::Helpers::InputsHelper
end

module Formtastic::Helpers::Reflection
  def association_macro_for_method(method); end

  def association_primary_key_for_method(method); end

  def reflection_for(method); end
end

module Formtastic::Helpers::Reflection
end

module Formtastic::Helpers
end

module Formtastic::HtmlAttributes
  def dom_id_namespace(); end

  def humanized_attribute_name(method); end
end

module Formtastic::HtmlAttributes
end

module Formtastic::I18n
  DEFAULT_SCOPE = ::T.let(nil, ::T.untyped)
  DEFAULT_VALUES = ::T.let(nil, ::T.untyped)
  SCOPES = ::T.let(nil, ::T.untyped)
end

module Formtastic::I18n
  def self.t(*args); end

  def self.translate(*args); end
end

class Formtastic::InputClassFinder
  def initialize(builder); end
end

class Formtastic::InputClassFinder
end

module Formtastic::Inputs
end

module Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  def builder(); end

  def builder=(builder); end

  def initialize(builder, template, object, object_name, method, options); end

  def input_wrapping(&block); end

  def method(); end

  def method=(method); end

  def object(); end

  def object=(object); end

  def object_name(); end

  def object_name=(object_name); end

  def options(); end

  def options=(options); end

  def removed_option!(old_option_name); end

  def template(); end

  def template=(template); end

  def warn_and_correct_option!(old_option_name, new_option_name); end

  def warn_deprecated_option!(old_option_name, instructions); end
end

module Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  def association(); end

  def association_primary_key(); end

  def belongs_to?(); end

  def has_many?(); end

  def reflection(); end
end

module Formtastic::Inputs::Base::Associations
end

module Formtastic::Inputs::Base::Choices
  def choice_html(choice); end

  def choice_html_options(choice); end

  def choice_html_safe_value(choice); end

  def choice_input_dom_id(choice); end

  def choice_label(choice); end

  def choice_value(choice); end

  def choice_wrapping(html_options, &block); end

  def choice_wrapping_html_options(choice); end

  def choices_group_wrapping(&block); end

  def choices_group_wrapping_html_options(); end

  def choices_wrapping(&block); end

  def choices_wrapping_html_options(); end

  def custom_choice_html_options(choice); end

  def default_choice_html_options(choice); end

  def label_html_options(); end

  def legend_html(); end

  def value_as_class?(); end
end

module Formtastic::Inputs::Base::Choices
end

module Formtastic::Inputs::Base::Collections
  def collection(); end

  def collection_for_boolean(); end

  def collection_from_association(); end

  def collection_from_enum(); end

  def collection_from_enum?(); end

  def collection_from_options(); end

  def label_and_value_method(); end

  def label_and_value_method_from_collection(_collection); end

  def label_method(); end

  def label_method_from_options(); end

  def raw_collection(); end

  def send_or_call(duck, object); end

  def send_or_call_or_object(duck, object); end

  def value_method(); end

  def value_method_from_options(); end
end

module Formtastic::Inputs::Base::Collections
end

module Formtastic::Inputs::Base::Database
  def column(); end

  def column?(); end
end

module Formtastic::Inputs::Base::Database
end

module Formtastic::Inputs::Base::DatetimePickerish
  include ::Formtastic::Inputs::Base::Placeholder
  def default_maxlength(); end

  def default_size(); end

  def default_step(); end

  def extra_input_html_options(); end

  def html_input_type(); end

  def input_html_options(); end

  def maxlength(); end

  def size(); end

  def step(); end

  def step_from_macro(sym); end

  def value(); end
end

module Formtastic::Inputs::Base::DatetimePickerish
end

module Formtastic::Inputs::Base::Errors
  def error_first_html(); end

  def error_html(); end

  def error_keys(); end

  def error_list_html(); end

  def error_none_html(); end

  def error_sentence_html(); end

  def errors(); end

  def errors?(); end
end

module Formtastic::Inputs::Base::Errors
end

module Formtastic::Inputs::Base::Fileish
  def file?(); end
end

module Formtastic::Inputs::Base::Fileish
end

module Formtastic::Inputs::Base::Hints
  def hint?(); end

  def hint_html(); end

  def hint_text(); end

  def hint_text_from_options(); end
end

module Formtastic::Inputs::Base::Hints
end

module Formtastic::Inputs::Base::Html
  def dom_id(); end

  def dom_index(); end

  def input_html_options(); end

  def to_html(); end
end

module Formtastic::Inputs::Base::Html
end

module Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  def label_from_options(); end

  def label_html(); end

  def label_html_options(); end

  def label_text(); end

  def localized_label(); end

  def render_label?(); end

  def requirement_text(); end

  def requirement_text_or_proc(); end
end

module Formtastic::Inputs::Base::Labelling
end

module Formtastic::Inputs::Base::Naming
  def as(); end

  def attributized_method_name(); end

  def humanized_method_name(); end

  def input_name(); end

  def sanitized_method_name(); end

  def sanitized_object_name(); end
end

module Formtastic::Inputs::Base::Naming
end

module Formtastic::Inputs::Base::Numeric
  def in_option(); end

  def input_html_options(); end

  def max_option(); end

  def min_option(); end

  def step_option(); end

  def wrapper_html_options(); end
end

module Formtastic::Inputs::Base::Numeric
end

module Formtastic::Inputs::Base::Options
  def formtastic_options(); end

  def input_options(); end
end

module Formtastic::Inputs::Base::Options
end

module Formtastic::Inputs::Base::Placeholder
  def input_html_options(); end

  def placeholder_text(); end
end

module Formtastic::Inputs::Base::Placeholder
end

module Formtastic::Inputs::Base::Stringish
  def input_html_options(); end

  def maxlength(); end

  def size(); end

  def to_html(); end

  def wrapper_html_options(); end
end

module Formtastic::Inputs::Base::Stringish
end

module Formtastic::Inputs::Base::Timeish
  def date_fragments(); end

  def default_date_fragments(); end

  def fragment_id(fragment); end

  def fragment_input_html(fragment); end

  def fragment_label(fragment); end

  def fragment_label_html(fragment); end

  def fragment_name(fragment); end

  def fragment_prefix(); end

  def fragment_wrapping(&block); end

  def fragment_wrapping_html_options(); end

  def fragments(); end

  def fragments_inner_wrapping(&block); end

  def fragments_label(); end

  def fragments_wrapping(&block); end

  def fragments_wrapping_html_options(); end

  def hidden_field_name(fragment); end

  def hidden_fragments(); end

  def i18n_date_fragments(); end

  def include_blank?(); end

  def position(fragment); end

  def positions(); end

  def time_fragments(); end

  def to_html(); end

  def value(); end
end

module Formtastic::Inputs::Base::Timeish
end

module Formtastic::Inputs::Base::Validations
  def autofocus?(); end

  def column_limit(); end

  def limit(); end

  def not_required_through_negated_validation!(); end

  def not_required_through_negated_validation?(); end

  def optional?(); end

  def readonly?(); end

  def readonly_attribute?(); end

  def readonly_from_options?(); end

  def required?(); end

  def required_attribute?(); end

  def responds_to_global_required?(); end

  def validation_integer_only?(); end

  def validation_limit(); end

  def validation_max(); end

  def validation_min(); end

  def validation_step(); end

  def validations(); end

  def validations?(); end

  def validator_relevant?(validator); end
end

module Formtastic::Inputs::Base::Validations
end

module Formtastic::Inputs::Base::Wrapping
  def input_wrapping(&block); end

  def wrapper_classes(); end

  def wrapper_classes_raw(); end

  def wrapper_dom_id(); end

  def wrapper_html_options(); end

  def wrapper_html_options_raw(); end
end

module Formtastic::Inputs::Base::Wrapping
end

module Formtastic::Inputs::Base
  extend ::ActiveSupport::Autoload
end

class Formtastic::Inputs::BooleanInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  def check_box_html(); end

  def checked?(); end

  def checked_value(); end

  def hidden_field_html(); end

  def input_html_options_name(); end

  def label_text_with_embedded_checkbox(); end

  def label_with_nested_checkbox(); end

  def unchecked_value(); end
end

class Formtastic::Inputs::BooleanInput
end

class Formtastic::Inputs::CheckBoxesInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  include ::Formtastic::Inputs::Base::Collections
  include ::Formtastic::Inputs::Base::Choices
  def check_box_with_hidden_input(choice); end

  def check_box_without_hidden_input(choice); end

  def checkbox_input(choice); end

  def checked?(value); end

  def disabled?(value); end

  def disabled_values(); end

  def extra_html_options(choice); end

  def hidden_field_for_all(); end

  def hidden_fields?(); end

  def initialize(*args); end

  def make_selected_values(); end

  def selected_values(); end

  def unchecked_value(); end
end

class Formtastic::Inputs::CheckBoxesInput
end

class Formtastic::Inputs::ColorInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  include ::Formtastic::Inputs::Base::Stringish
  include ::Formtastic::Inputs::Base::Placeholder
end

class Formtastic::Inputs::ColorInput
end

class Formtastic::Inputs::CountryInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  def priority_countries(); end
end

class Formtastic::Inputs::CountryInput::CountrySelectPluginMissing
end

class Formtastic::Inputs::CountryInput::CountrySelectPluginMissing
end

class Formtastic::Inputs::CountryInput
end

class Formtastic::Inputs::DatalistInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  include ::Formtastic::Inputs::Base::Stringish
  include ::Formtastic::Inputs::Base::Collections
  def data_list_html(); end

  def html_id_of_datalist(); end
end

class Formtastic::Inputs::DatalistInput
end

class Formtastic::Inputs::DatePickerInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  include ::Formtastic::Inputs::Base::Stringish
  include ::Formtastic::Inputs::Base::DatetimePickerish
  include ::Formtastic::Inputs::Base::Placeholder
end

class Formtastic::Inputs::DatePickerInput
end

class Formtastic::Inputs::DateSelectInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  include ::Formtastic::Inputs::Base::Timeish
  def fragment_value(fragment); end

  def hidden_date_fragments(); end
end

class Formtastic::Inputs::DateSelectInput
end

class Formtastic::Inputs::DatetimePickerInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  include ::Formtastic::Inputs::Base::Stringish
  include ::Formtastic::Inputs::Base::DatetimePickerish
  include ::Formtastic::Inputs::Base::Placeholder
end

class Formtastic::Inputs::DatetimePickerInput
end

class Formtastic::Inputs::DatetimeSelectInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  include ::Formtastic::Inputs::Base::Timeish
end

class Formtastic::Inputs::DatetimeSelectInput
end

class Formtastic::Inputs::EmailInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  include ::Formtastic::Inputs::Base::Stringish
  include ::Formtastic::Inputs::Base::Placeholder
end

class Formtastic::Inputs::EmailInput
end

class Formtastic::Inputs::FileInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
end

class Formtastic::Inputs::FileInput
end

class Formtastic::Inputs::HiddenInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
end

class Formtastic::Inputs::HiddenInput
end

class Formtastic::Inputs::NumberInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  include ::Formtastic::Inputs::Base::Numeric
  include ::Formtastic::Inputs::Base::Placeholder
end

class Formtastic::Inputs::NumberInput
end

class Formtastic::Inputs::PasswordInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  include ::Formtastic::Inputs::Base::Stringish
  include ::Formtastic::Inputs::Base::Placeholder
end

class Formtastic::Inputs::PasswordInput
end

class Formtastic::Inputs::PhoneInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  include ::Formtastic::Inputs::Base::Stringish
  include ::Formtastic::Inputs::Base::Placeholder
end

class Formtastic::Inputs::PhoneInput
end

class Formtastic::Inputs::RadioInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  include ::Formtastic::Inputs::Base::Collections
  include ::Formtastic::Inputs::Base::Choices
end

class Formtastic::Inputs::RadioInput
end

class Formtastic::Inputs::RangeInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  include ::Formtastic::Inputs::Base::Numeric
end

class Formtastic::Inputs::RangeInput
end

class Formtastic::Inputs::SearchInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  include ::Formtastic::Inputs::Base::Stringish
  include ::Formtastic::Inputs::Base::Placeholder
end

class Formtastic::Inputs::SearchInput
end

class Formtastic::Inputs::SelectInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  include ::Formtastic::Inputs::Base::Collections
  def extra_input_html_options(); end

  def include_blank(); end

  def initialize(*args); end

  def input_html_options_name(); end

  def input_html_options_name_multiple(); end

  def multiple?(); end

  def multiple_by_association?(); end

  def multiple_by_options?(); end

  def prompt?(); end

  def select_html(); end

  def single?(); end
end

class Formtastic::Inputs::SelectInput
end

class Formtastic::Inputs::StringInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  include ::Formtastic::Inputs::Base::Stringish
  include ::Formtastic::Inputs::Base::Placeholder
end

class Formtastic::Inputs::StringInput
end

class Formtastic::Inputs::TextInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  include ::Formtastic::Inputs::Base::Placeholder
end

class Formtastic::Inputs::TextInput
end

class Formtastic::Inputs::TimePickerInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  include ::Formtastic::Inputs::Base::Stringish
  include ::Formtastic::Inputs::Base::DatetimePickerish
  include ::Formtastic::Inputs::Base::Placeholder
end

class Formtastic::Inputs::TimePickerInput
end

class Formtastic::Inputs::TimeSelectInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  include ::Formtastic::Inputs::Base::Timeish
  def fragment_value(fragment); end

  def value_or_default_value(); end
end

class Formtastic::Inputs::TimeSelectInput
end

class Formtastic::Inputs::TimeZoneInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  def priority_zones(); end
end

class Formtastic::Inputs::TimeZoneInput
end

class Formtastic::Inputs::UrlInput
  include ::Formtastic::Inputs::Base
  include ::Formtastic::Inputs::Base::Html
  include ::Formtastic::Inputs::Base::Options
  include ::Formtastic::Inputs::Base::Database
  include ::Formtastic::Inputs::Base::Errors
  include ::Formtastic::Inputs::Base::Hints
  include ::Formtastic::Inputs::Base::Naming
  include ::Formtastic::Inputs::Base::Validations
  include ::Formtastic::Inputs::Base::Fileish
  include ::Formtastic::Inputs::Base::Associations
  include ::Formtastic::Helpers::Reflection
  include ::Formtastic::Inputs::Base::Labelling
  include ::Formtastic::LocalizedString
  include ::Formtastic::Inputs::Base::Wrapping
  include ::Formtastic::Inputs::Base::Stringish
  include ::Formtastic::Inputs::Base::Placeholder
end

class Formtastic::Inputs::UrlInput
end

module Formtastic::Inputs
  extend ::ActiveSupport::Autoload
end

module Formtastic::LocalizedString
  def localized_string(key, value, type, options=T.unsafe(nil)); end

  def model_name(); end
end

module Formtastic::LocalizedString
end

class Formtastic::Localizer
  def builder(); end

  def builder=(builder); end

  def escape_html_entities(string); end

  def i18n_cache_lookups(); end

  def i18n_lookups_by_default(); end

  def initialize(current_builder); end

  def localize(key, value, type, options=T.unsafe(nil)); end

  def normalize_model_name(name); end
end

class Formtastic::Localizer::Cache
  def cache(); end

  def clear!(); end

  def get(key); end

  def has_key?(key); end

  def set(key, result); end
end

class Formtastic::Localizer::Cache
end

class Formtastic::Localizer
  def self.cache(); end
end

class Formtastic::NamespacedClassFinder
  def class_name(as); end

  def find(as); end

  def initialize(namespaces); end

  def namespaces(); end

  def resolve(as); end
end

class Formtastic::NamespacedClassFinder::NotFoundError
end

class Formtastic::NamespacedClassFinder::NotFoundError
end

class Formtastic::NamespacedClassFinder
  def self.use_const_defined?(); end
end

class Formtastic::PolymorphicInputWithoutCollectionError
end

class Formtastic::PolymorphicInputWithoutCollectionError
end

class Formtastic::UnknownActionError
end

class Formtastic::UnknownActionError
end

class Formtastic::UnknownInputError
end

class Formtastic::UnknownInputError
end

class Formtastic::UnsupportedEnumCollection
end

class Formtastic::UnsupportedEnumCollection
end

class Formtastic::UnsupportedMethodForAction
end

class Formtastic::UnsupportedMethodForAction
end

module Formtastic::Util
  def deprecated_version_of_rails?(); end

  def html_safe(text); end

  def match?(version, dependency); end

  def minimum_version_of_rails(); end

  def rails3?(); end

  def rails4?(); end

  def rails4_0?(); end

  def rails4_1?(); end

  def rails_version(); end
end

module Formtastic::Util
  extend ::Formtastic::Util
end

module Formtastic
  extend ::ActiveSupport::Autoload
  def self.deprecation(); end

  def self.deprecation=(obj); end
end

module FormtasticI18n
  VERSION = ::T.let(nil, ::T.untyped)
end

class FormtasticI18n::Engine
end

class FormtasticI18n::Engine
end

module FormtasticI18n
end

module Forwardable
  def self._compile_method(src, file, line); end

  def self._delegator_method(obj, accessor, method, ali); end

  def self._valid_method?(method); end

  def self.debug(); end

  def self.debug=(debug); end
end

module GC
  def garbage_collect(*_); end
end

module Gem
  ConfigMap = ::T.let(nil, ::T.untyped)
  RbConfigPriorities = ::T.let(nil, ::T.untyped)
  RubyGemsPackageVersion = ::T.let(nil, ::T.untyped)
  RubyGemsVersion = ::T.let(nil, ::T.untyped)
  USE_BUNDLER_FOR_GEMDEPS = ::T.let(nil, ::T.untyped)
end

module Gem::BundlerVersionFinder
  def self.without_filtering(); end
end

class Gem::DependencyInstaller
  def _deprecated_add_found_dependencies(to_do, dependency_list); end

  def _deprecated_gather_dependencies(); end

  def _deprecated_gems_to_install(); end

  def add_found_dependencies(*args, &block); end

  def gather_dependencies(*args, &block); end

  def gems_to_install(*args, &block); end
end

Gem::DependencyResolver = Gem::Resolver

class Gem::Exception
  extend ::Gem::Deprecate
end

class Gem::Ext::BuildError
end

class Gem::Ext::BuildError
end

class Gem::Ext::Builder
  def self.redirector(); end
end

class Gem::Ext::ExtConfBuilder
end

Gem::Ext::ExtConfBuilder::FileEntry = FileUtils::Entry_

class Gem::Ext::ExtConfBuilder
  def self.build(extension, directory, dest_path, results, args=T.unsafe(nil), lib_dir=T.unsafe(nil)); end

  def self.get_relative_path(path); end
end

class Gem::Installer
  def verify_spec_name(); end
end

class Gem::Package
  def realpath(file); end
end

class Gem::Package::DigestIO
  def digests(); end

  def initialize(io, digests); end

  def write(data); end
end

class Gem::Package::DigestIO
  def self.wrap(io, digests); end
end

class Gem::Package::FileSource
  def initialize(path); end

  def path(); end

  def start(); end

  def with_read_io(&block); end

  def with_write_io(&block); end
end

class Gem::Package::FileSource
end

class Gem::Package::IOSource
  def initialize(io); end

  def io(); end

  def path(); end

  def start(); end

  def with_read_io(); end

  def with_write_io(); end
end

class Gem::Package::IOSource
end

class Gem::Package::Old
  def extract_files(destination_dir); end

  def file_list(io); end

  def read_until_dashes(io); end

  def skip_ruby(io); end
end

class Gem::Package::Old
end

class Gem::Package::Source
end

class Gem::Package::Source
end

class Gem::Package::TarHeader
  def ==(other); end

  def checksum(); end

  def devmajor(); end

  def devminor(); end

  def empty?(); end

  def gid(); end

  def gname(); end

  def initialize(vals); end

  def linkname(); end

  def magic(); end

  def mode(); end

  def mtime(); end

  def name(); end

  def prefix(); end

  def size(); end

  def typeflag(); end

  def uid(); end

  def uname(); end

  def update_checksum(); end

  def version(); end
  EMPTY_HEADER = ::T.let(nil, ::T.untyped)
  FIELDS = ::T.let(nil, ::T.untyped)
  PACK_FORMAT = ::T.let(nil, ::T.untyped)
  UNPACK_FORMAT = ::T.let(nil, ::T.untyped)
end

class Gem::Package::TarHeader
  def self.from(stream); end

  def self.strict_oct(str); end
end

class Gem::Package::TarReader::Entry
  def bytes_read(); end

  def check_closed(); end

  def close(); end

  def closed?(); end

  def directory?(); end

  def eof?(); end

  def file?(); end

  def full_name(); end

  def getc(); end

  def header(); end

  def initialize(header, io); end

  def pos(); end

  def read(len=T.unsafe(nil)); end

  def readpartial(len=T.unsafe(nil)); end

  def rewind(); end

  def symlink?(); end
end

class Gem::Package::TarReader::Entry
end

class Gem::Package::TarReader
  def self.new(io); end
end

class Gem::Package::TarWriter
  def self.new(io); end
end

class Gem::Package
  def self.new(gem, security_policy=T.unsafe(nil)); end
end

class Gem::PathSupport
  def home(); end

  def initialize(env); end

  def path(); end

  def spec_cache_dir(); end
end

class Gem::RemoteFetcher
  def api_endpoint(uri); end

  def correct_for_windows_path(path); end

  def s3_expiration(); end

  def sign_s3_url(uri, expiration=T.unsafe(nil)); end
  BASE64_URI_TRANSLATE = ::T.let(nil, ::T.untyped)
end

class Gem::Request
  extend ::Gem::UserInteraction
  extend ::Gem::DefaultUserInteraction
  extend ::Gem::Text
end

Gem::RequestSet::GemDepedencyAPI = Gem::RequestSet::GemDependencyAPI

class Gem::Resolver::ActivationRequest
  def others_possible?(); end
end

class Gem::Resolver::CurrentSet
end

class Gem::Resolver::CurrentSet
end

class Gem::Resolver::LocalSpecification
end

class Gem::Resolver::LocalSpecification
end

class Gem::Resolver::Molinillo::DependencyGraph::Log
  def add_edge_no_circular(graph, origin, destination, requirement); end

  def add_vertex(graph, name, payload, root); end

  def delete_edge(graph, origin_name, destination_name, requirement); end

  def detach_vertex_named(graph, name); end

  def each(&blk); end

  def pop!(graph); end

  def reverse_each(); end

  def rewind_to(graph, tag); end

  def set_payload(graph, name, payload); end

  def tag(graph, tag); end
end

class Gem::Resolver::Molinillo::DependencyGraph::Log
  extend ::Enumerable
end

class Gem::RuntimeRequirementNotMetError
  def suggestion(); end

  def suggestion=(suggestion); end
end

class Gem::RuntimeRequirementNotMetError
end

class Gem::Security::Exception
end

class Gem::Security::Exception
end

Gem::Security::KEY_ALGORITHM = OpenSSL::PKey::RSA

class Gem::Security::Policy
  include ::Gem::UserInteraction
  include ::Gem::DefaultUserInteraction
  include ::Gem::Text
  def check_cert(signer, issuer, time); end

  def check_chain(chain, time); end

  def check_data(public_key, digest, signature, data); end

  def check_key(signer, key); end

  def check_root(chain, time); end

  def check_trust(chain, digester, trust_dir); end

  def initialize(name, policy=T.unsafe(nil), opt=T.unsafe(nil)); end

  def name(); end

  def only_signed(); end

  def only_signed=(only_signed); end

  def only_trusted(); end

  def only_trusted=(only_trusted); end

  def subject(certificate); end

  def verify(chain, key=T.unsafe(nil), digests=T.unsafe(nil), signatures=T.unsafe(nil), full_name=T.unsafe(nil)); end

  def verify_chain(); end

  def verify_chain=(verify_chain); end

  def verify_data(); end

  def verify_data=(verify_data); end

  def verify_root(); end

  def verify_root=(verify_root); end

  def verify_signatures(spec, digests, signatures); end

  def verify_signer(); end

  def verify_signer=(verify_signer); end
end

class Gem::Security::Policy
end

class Gem::Security::Signer
  def cert_chain(); end

  def cert_chain=(cert_chain); end

  def digest_algorithm(); end

  def digest_name(); end

  def extract_name(cert); end

  def initialize(key, cert_chain, passphrase=T.unsafe(nil)); end

  def key(); end

  def key=(key); end

  def load_cert_chain(); end

  def re_sign_key(); end

  def sign(data); end
end

class Gem::Security::TrustDir
  def cert_path(certificate); end

  def dir(); end

  def each_certificate(); end

  def initialize(dir, permissions=T.unsafe(nil)); end

  def issuer_of(certificate); end

  def load_certificate(certificate_file); end

  def name_path(name); end

  def trust_cert(certificate); end

  def verify(); end
end

module Gem::Security
  def self.alt_name_or_x509_entry(certificate, x509_entry); end

  def self.create_cert(subject, key, age=T.unsafe(nil), extensions=T.unsafe(nil), serial=T.unsafe(nil)); end

  def self.create_cert_email(email, key, age=T.unsafe(nil), extensions=T.unsafe(nil)); end

  def self.create_cert_self_signed(subject, key, age=T.unsafe(nil), extensions=T.unsafe(nil), serial=T.unsafe(nil)); end

  def self.create_key(length=T.unsafe(nil), algorithm=T.unsafe(nil)); end

  def self.email_to_name(email_address); end

  def self.re_sign(expired_certificate, private_key, age=T.unsafe(nil), extensions=T.unsafe(nil)); end

  def self.reset(); end

  def self.sign(certificate, signing_key, signing_cert, age=T.unsafe(nil), extensions=T.unsafe(nil), serial=T.unsafe(nil)); end

  def self.trust_dir(); end

  def self.trusted_certificates(&block); end

  def self.write(pemmable, path, permissions=T.unsafe(nil), passphrase=T.unsafe(nil), cipher=T.unsafe(nil)); end
end

class Gem::Source
  def api_uri(); end
end

class Gem::SpecFetcher
  include ::Gem::UserInteraction
  include ::Gem::DefaultUserInteraction
  include ::Gem::Text
  def available_specs(type); end

  def detect(type=T.unsafe(nil)); end

  def initialize(sources=T.unsafe(nil)); end

  def latest_specs(); end

  def prerelease_specs(); end

  def search_for_dependency(dependency, matching_platform=T.unsafe(nil)); end

  def sources(); end

  def spec_for_dependency(dependency, matching_platform=T.unsafe(nil)); end

  def specs(); end

  def suggest_gems_from_name(gem_name, type=T.unsafe(nil)); end

  def tuples_for(source, type, gracefully_ignore=T.unsafe(nil)); end
end

class Gem::SpecFetcher
  def self.fetcher(); end

  def self.fetcher=(fetcher); end
end

class Gem::Specification
  include ::Bundler::MatchPlatform
  include ::Bundler::GemHelpers
  def bundled_gem_in_old_ruby?(); end

  def rubyforge_project(); end

  def to_ruby(); end

  def warning(statement); end
end

class Gem::Specification
  extend ::Gem::Deprecate
  extend ::Enumerable
  def self.add_spec(spec); end

  def self.add_specs(*specs); end

  def self.remove_spec(spec); end
end

class Gem::StreamUI
  def _deprecated_debug(statement); end
end

class Gem::StubSpecification
  def build_extensions(); end

  def extensions(); end

  def initialize(filename, base_dir, gems_dir, default_gem); end

  def missing_extensions?(); end

  def valid?(); end
end

class Gem::StubSpecification::StubLine
  def extensions(); end

  def full_name(); end

  def initialize(data, extensions); end

  def name(); end

  def platform(); end

  def require_paths(); end

  def version(); end
end

class Gem::StubSpecification
  def self.default_gemspec_stub(filename, base_dir, gems_dir); end

  def self.gemspec_stub(filename, base_dir, gems_dir); end
end

Gem::UnsatisfiableDepedencyError = Gem::UnsatisfiableDependencyError

module Gem::Util
  NULL_DEVICE = ::T.let(nil, ::T.untyped)
end

Gem::Version::Requirement = Gem::Requirement

module Gem
  def self._deprecated_datadir(gem_name); end

  def self.default_gems_use_full_paths?(); end

  def self.remove_unresolved_default_spec(spec); end
end

module GeneratedUrlHelpers
  def rails_info_path(*args); end

  def rails_info_properties_path(*args); end

  def rails_info_properties_url(*args); end

  def rails_info_routes_path(*args); end

  def rails_info_routes_url(*args); end

  def rails_info_url(*args); end

  def rails_mailers_path(*args); end

  def rails_mailers_url(*args); end
end

module GlobalID::Locator
  DEFAULT_LOCATOR = ::T.let(nil, ::T.untyped)
end

class GlobalID::Locator::BaseLocator
  def locate(gid); end

  def locate_many(gids, options=T.unsafe(nil)); end
end

class GlobalID::Locator::BaseLocator
end

class GlobalID::Locator::BlockLocator
  def initialize(block); end

  def locate(gid); end

  def locate_many(gids, options=T.unsafe(nil)); end
end

class GlobalID::Locator::BlockLocator
end

class GlobalID::Locator::UnscopedLocator
end

class GlobalID::Locator::UnscopedLocator
end

module GlobalID::Locator
  def self.locate(gid, options=T.unsafe(nil)); end

  def self.locate_many(gids, options=T.unsafe(nil)); end

  def self.locate_many_signed(sgids, options=T.unsafe(nil)); end

  def self.locate_signed(sgid, options=T.unsafe(nil)); end

  def self.use(app, locator=T.unsafe(nil), &locator_block); end
end

class HTMLSelector
  NO_STRIP = ::T.let(nil, ::T.untyped)
end

class Hash
  include ::JSON::Ext::Generator::GeneratorMethods::Hash
end

class Hash
  def self.from_trusted_xml(xml); end
end

HashWithIndifferentAccess = ActiveSupport::HashWithIndifferentAccess

module I18n
  DEFAULT_INTERPOLATION_PATTERNS = ::T.let(nil, ::T.untyped)
  EMPTY_HASH = ::T.let(nil, ::T.untyped)
  INTERPOLATION_PATTERN = ::T.let(nil, ::T.untyped)
  RESERVED_KEYS = ::T.let(nil, ::T.untyped)
  RESERVED_KEYS_PATTERN = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module I18n::Backend::Cache
  def _fetch(cache_key, &block); end

  def cache_key(locale, key, options); end

  def fetch(cache_key, &block); end

  def translate(locale, key, options=T.unsafe(nil)); end
end

module I18n::Backend::Cache
end

module I18n::Backend::CacheFile
  def load_file(filename); end

  def normalized_path(file); end

  def path_roots(); end

  def path_roots=(path_roots); end
end

module I18n::Backend::CacheFile
end

module I18n::Backend::Cascade
  def lookup(locale, key, scope=T.unsafe(nil), options=T.unsafe(nil)); end
end

module I18n::Backend::Cascade
end

class I18n::Backend::Chain
  include ::I18n::Backend::Chain::Implementation
  include ::I18n::Backend::Base
  include ::I18n::Backend::Transliterator
end

module I18n::Backend::Chain::Implementation
  include ::I18n::Backend::Base
  include ::I18n::Backend::Transliterator
  def available_locales(); end

  def backends(); end

  def backends=(backends); end

  def eager_load!(); end

  def exists?(locale, key, options=T.unsafe(nil)); end

  def init_translations(); end

  def initialize(*backends); end

  def initialized?(); end

  def localize(locale, object, format=T.unsafe(nil), options=T.unsafe(nil)); end

  def namespace_lookup?(result, options); end

  def reload!(); end

  def store_translations(locale, data, options=T.unsafe(nil)); end

  def translate(locale, key, default_options=T.unsafe(nil)); end

  def translations(); end
end

module I18n::Backend::Chain::Implementation
end

class I18n::Backend::Chain
end

module I18n::Backend::Fallbacks
  def exists?(locale, key, options=T.unsafe(nil)); end

  def extract_non_symbol_default!(options); end

  def translate(locale, key, options=T.unsafe(nil)); end
end

module I18n::Backend::Fallbacks
end

module I18n::Backend::Flatten
  def escape_default_separator(key); end

  def find_link(locale, key); end

  def flatten_keys(hash, escape, prev_key=T.unsafe(nil), &block); end

  def flatten_translations(locale, data, escape, subtree); end

  def links(); end

  def normalize_flat_keys(locale, key, scope, separator); end

  def resolve_link(locale, key); end

  def store_link(locale, key, link); end
  FLATTEN_SEPARATOR = ::T.let(nil, ::T.untyped)
  SEPARATOR_ESCAPE_CHAR = ::T.let(nil, ::T.untyped)
end

module I18n::Backend::Flatten
  def self.escape_default_separator(key); end

  def self.normalize_flat_keys(locale, key, scope, separator); end
end

module I18n::Backend::Gettext
  def load_po(filename); end

  def normalize(locale, data); end

  def normalize_pluralization(locale, key, value); end

  def parse(filename); end
end

class I18n::Backend::Gettext::PoData
  def set_comment(msgid_or_sym, comment); end
end

class I18n::Backend::Gettext::PoData
end

module I18n::Backend::Gettext
end

module I18n::Backend::InterpolationCompiler
  def compile_all_strings_in(data); end

  def interpolate(locale, string, values); end

  def store_translations(locale, data, options=T.unsafe(nil)); end
end

module I18n::Backend::InterpolationCompiler::Compiler
  def compile_if_an_interpolation(string); end

  def compile_interpolation_token(key); end

  def compiled_interpolation_body(str); end

  def direct_key(key); end

  def escape_key_sym(key); end

  def escape_plain_str(str); end

  def handle_interpolation_token(interpolation, matchdata); end

  def interpolate_key(key); end

  def interpolate_or_raise_missing(key); end

  def interpolated_str?(str); end

  def missing_key(key); end

  def nil_key(key); end

  def reserved_key(key); end

  def tokenize(str); end
  INTERPOLATION_SYNTAX_PATTERN = ::T.let(nil, ::T.untyped)
  TOKENIZER = ::T.let(nil, ::T.untyped)
end

module I18n::Backend::InterpolationCompiler::Compiler
  extend ::I18n::Backend::InterpolationCompiler::Compiler
end

module I18n::Backend::InterpolationCompiler
end

class I18n::Backend::KeyValue
  include ::I18n::Backend::KeyValue::Implementation
  include ::I18n::Backend::Flatten
  include ::I18n::Backend::Base
  include ::I18n::Backend::Transliterator
end

module I18n::Backend::KeyValue::Implementation
  include ::I18n::Backend::Flatten
  include ::I18n::Backend::Base
  include ::I18n::Backend::Transliterator
  def available_locales(); end

  def init_translations(); end

  def initialize(store, subtrees=T.unsafe(nil)); end

  def initialized?(); end

  def lookup(locale, key, scope=T.unsafe(nil), options=T.unsafe(nil)); end

  def pluralize(locale, entry, count); end

  def store(); end

  def store=(store); end

  def store_translations(locale, data, options=T.unsafe(nil)); end

  def subtrees?(); end

  def translations(); end
end

module I18n::Backend::KeyValue::Implementation
end

class I18n::Backend::KeyValue::SubtreeProxy
  def [](key); end

  def has_key?(key); end

  def initialize(master_key, store); end

  def instance_of?(klass); end

  def is_a?(klass); end

  def kind_of?(klass); end
end

class I18n::Backend::KeyValue::SubtreeProxy
end

class I18n::Backend::KeyValue
end

module I18n::Backend::Memoize
  def available_locales(); end

  def eager_load!(); end

  def lookup(locale, key, scope=T.unsafe(nil), options=T.unsafe(nil)); end

  def memoized_lookup(); end

  def reload!(); end

  def reset_memoizations!(locale=T.unsafe(nil)); end

  def store_translations(locale, data, options=T.unsafe(nil)); end
end

module I18n::Backend::Memoize
end

module I18n::Backend::Metadata
  def interpolate(locale, entry, values=T.unsafe(nil)); end

  def pluralize(locale, entry, count); end

  def translate(locale, key, options=T.unsafe(nil)); end

  def with_metadata(metadata, &block); end
end

module I18n::Backend::Metadata
  def self.included(base); end
end

module I18n::Backend::Pluralization
  def pluralize(locale, entry, count); end

  def pluralizer(locale); end

  def pluralizers(); end
end

module I18n::Backend::Pluralization
end

module I18n::Backend::Transliterator
  DEFAULT_REPLACEMENT_CHAR = ::T.let(nil, ::T.untyped)
end

class I18n::Backend::Transliterator::HashTransliterator
  DEFAULT_APPROXIMATIONS = ::T.let(nil, ::T.untyped)
end

module I18n::Gettext
  CONTEXT_SEPARATOR = ::T.let(nil, ::T.untyped)
  PLURAL_SEPARATOR = ::T.let(nil, ::T.untyped)
end

module I18n::Gettext::Helpers
  def N_(msgsid); end

  def _(msgid, options=T.unsafe(nil)); end

  def gettext(msgid, options=T.unsafe(nil)); end

  def n_(msgid, msgid_plural, n=T.unsafe(nil)); end

  def ngettext(msgid, msgid_plural, n=T.unsafe(nil)); end

  def np_(msgctxt, msgid, msgid_plural, n=T.unsafe(nil)); end

  def npgettext(msgctxt, msgid, msgid_plural, n=T.unsafe(nil)); end

  def ns_(msgid, msgid_plural, n=T.unsafe(nil), separator=T.unsafe(nil)); end

  def nsgettext(msgid, msgid_plural, n=T.unsafe(nil), separator=T.unsafe(nil)); end

  def p_(msgctxt, msgid); end

  def pgettext(msgctxt, msgid); end

  def s_(msgid, separator=T.unsafe(nil)); end

  def sgettext(msgid, separator=T.unsafe(nil)); end
end

module I18n::Gettext::Helpers
end

module I18n::Gettext
  def self.extract_scope(msgid, separator); end

  def self.plural_keys(*args); end
end

module I18n::Locale
end

class I18n::Locale::Fallbacks
  def [](locale); end

  def compute(tags, include_defaults=T.unsafe(nil), exclude=T.unsafe(nil)); end

  def defaults(); end

  def defaults=(defaults); end

  def initialize(*mappings); end

  def map(mappings); end
end

class I18n::Locale::Fallbacks
end

module I18n::Locale::Tag
  RFC4646_FORMATS = ::T.let(nil, ::T.untyped)
  RFC4646_SUBTAGS = ::T.let(nil, ::T.untyped)
end

module I18n::Locale::Tag::Parents
  def parent(); end

  def parents(); end

  def self_and_parents(); end
end

module I18n::Locale::Tag::Parents
end

class I18n::Locale::Tag::Rfc4646
  include ::I18n::Locale::Tag::Parents
  def to_sym(); end
end

module I18n::Locale::Tag::Rfc4646::Parser
  PATTERN = ::T.let(nil, ::T.untyped)
end

module I18n::Locale::Tag::Rfc4646::Parser
  def self.match(tag); end
end

class I18n::Locale::Tag::Rfc4646
  def self.parser(); end

  def self.parser=(parser); end

  def self.tag(tag); end
end

class I18n::Locale::Tag::Simple
  include ::I18n::Locale::Tag::Parents
  def initialize(*tag); end

  def subtags(); end

  def tag(); end

  def to_a(); end

  def to_sym(); end
end

class I18n::Locale::Tag::Simple
  def self.tag(tag); end
end

module I18n::Locale::Tag
  def self.implementation(); end

  def self.implementation=(implementation); end

  def self.tag(tag); end
end

module I18n::Locale
end

class I18n::Middleware
  def call(env); end

  def initialize(app); end
end

class I18n::Middleware
end

module I18n::Tests
end

module I18n::Tests::Localization
end

module I18n::Tests::Localization
  def self.included(base); end
end

module I18n::Tests
end

module I18n
  def self.cache_key_digest(); end

  def self.cache_key_digest=(key_digest); end

  def self.cache_namespace(); end

  def self.cache_namespace=(namespace); end

  def self.cache_store(); end

  def self.cache_store=(store); end

  def self.fallbacks(); end

  def self.fallbacks=(fallbacks); end

  def self.perform_caching?(); end
end

module INotify
  VERSION = ::T.let(nil, ::T.untyped)
end

class IO
  def nonblock(*_); end

  def nonblock=(nonblock); end

  def nonblock?(); end

  def nread(); end

  def pathconf(_); end

  def ready?(); end

  def wait(*_); end

  def wait_readable(*_); end

  def wait_writable(*_); end
end

IO::EWOULDBLOCKWaitReadable = IO::EAGAINWaitReadable

IO::EWOULDBLOCKWaitWritable = IO::EAGAINWaitWritable

class IPAddr
  def ==(other); end

  def initialize(addr=T.unsafe(nil), family=T.unsafe(nil)); end
end

module IRB
  IRBRC_EXT = ::T.let(nil, ::T.untyped)
  MagicFile = ::T.let(nil, ::T.untyped)
  STDIN_FILE_NAME = ::T.let(nil, ::T.untyped)
end

class IRB::Context
  def __exit__(*_); end

  def __inspect__(); end

  def __to_s__(); end

  def evaluate(line, line_no); end

  def initialize(irb, workspace=T.unsafe(nil), input_method=T.unsafe(nil), output_method=T.unsafe(nil)); end

  def inspect_last_value(); end
  IDNAME_IVARS = ::T.let(nil, ::T.untyped)
  NOPRINTING_IVARS = ::T.let(nil, ::T.untyped)
  NO_INSPECTING_IVARS = ::T.let(nil, ::T.untyped)
end

class IRB::DefaultEncodings
  def external(); end

  def external=(_); end

  def internal(); end

  def internal=(_); end
end

class IRB::DefaultEncodings
  def self.[](*_); end

  def self.members(); end
end

module IRB::ExtendCommandBundle
  def irb(*opts, &b); end

  def irb_change_workspace(*opts, &b); end

  def irb_current_working_workspace(*opts, &b); end

  def irb_fg(*opts, &b); end

  def irb_help(*opts, &b); end

  def irb_jobs(*opts, &b); end

  def irb_kill(*opts, &b); end

  def irb_pop_workspace(*opts, &b); end

  def irb_push_workspace(*opts, &b); end

  def irb_source(*opts, &b); end

  def irb_workspaces(*opts, &b); end
end

IRB::ExtendCommandBundle::EXCB = IRB::ExtendCommandBundle

module IRB::ExtendCommandBundle
  def self.irb_original_method_name(method_name); end
end

class IRB::FileInputMethod
  def initialize(file); end
end

class IRB::InputMethod
  def initialize(file=T.unsafe(nil)); end
end

class IRB::Inspector
  def initialize(inspect_proc, init_proc=T.unsafe(nil)); end
end

class IRB::Irb
  def initialize(workspace=T.unsafe(nil), input_method=T.unsafe(nil), output_method=T.unsafe(nil)); end

  def output_value(); end

  def prompt(prompt, ltype, indent, line_no); end
end

class IRB::Locale
  def String(mes); end

  def encoding(); end

  def find(file, paths=T.unsafe(nil)); end

  def format(*opts); end

  def gets(*rs); end

  def initialize(locale=T.unsafe(nil)); end

  def lang(); end

  def load(file, priv=T.unsafe(nil)); end

  def modifier(); end

  def print(*opts); end

  def printf(*opts); end

  def puts(*opts); end

  def readline(*rs); end

  def require(file, priv=T.unsafe(nil)); end

  def territory(); end
  LOCALE_DIR = ::T.let(nil, ::T.untyped)
  LOCALE_NAME_RE = ::T.let(nil, ::T.untyped)
end

class IRB::Locale
end

class IRB::Notifier::AbstractNotifier
  def initialize(prefix, base_notifier); end
end

class IRB::Notifier::LeveledNotifier
  def initialize(base, level, prefix); end
end

class IRB::Notifier::NoMsgNotifier
  def initialize(); end
end

class IRB::ReadlineInputMethod
  def initialize(); end
end

class IRB::SLex
  def Fail(err=T.unsafe(nil), *rest); end

  def Raise(err=T.unsafe(nil), *rest); end

  def create(token, preproc=T.unsafe(nil), postproc=T.unsafe(nil)); end

  def def_rule(token, preproc=T.unsafe(nil), postproc=T.unsafe(nil), &block); end

  def def_rules(*tokens, &block); end

  def match(token); end

  def postproc(token); end

  def preproc(token, proc); end

  def search(token); end
  DOUT = ::T.let(nil, ::T.untyped)
  D_DEBUG = ::T.let(nil, ::T.untyped)
  D_DETAIL = ::T.let(nil, ::T.untyped)
  D_WARN = ::T.let(nil, ::T.untyped)
end

class IRB::SLex::ErrNodeAlreadyExists
end

class IRB::SLex::ErrNodeAlreadyExists
end

class IRB::SLex::ErrNodeNothing
end

class IRB::SLex::ErrNodeNothing
end

class IRB::SLex::Node
  def create_subnode(chrs, preproc=T.unsafe(nil), postproc=T.unsafe(nil)); end

  def initialize(preproc=T.unsafe(nil), postproc=T.unsafe(nil)); end

  def match(chrs, op=T.unsafe(nil)); end

  def match_io(io, op=T.unsafe(nil)); end

  def postproc(); end

  def postproc=(postproc); end

  def preproc(); end

  def preproc=(preproc); end

  def search(chrs, opt=T.unsafe(nil)); end
end

class IRB::SLex::Node
end

class IRB::SLex
  extend ::Exception2MessageMapper
  def self.included(mod); end
end

class IRB::StdioInputMethod
  def initialize(); end
end

class IRB::WorkSpace
  def initialize(*main); end
end

module IRB
  def self.Inspector(inspect, init=T.unsafe(nil)); end

  def self.delete_caller(); end

  def self.init_config(ap_path); end

  def self.init_error(); end

  def self.load_modules(); end

  def self.parse_opts(argv: T.unsafe(nil)); end

  def self.rc_file(ext=T.unsafe(nil)); end

  def self.rc_file_generators(); end

  def self.run_config(); end

  def self.setup(ap_path, argv: T.unsafe(nil)); end
end

class Ingredient
  def after_add_for_step_inputs(); end

  def after_add_for_step_inputs=(val); end

  def after_add_for_step_inputs?(); end

  def after_remove_for_step_inputs(); end

  def after_remove_for_step_inputs=(val); end

  def after_remove_for_step_inputs?(); end

  def autosave_associated_records_for_step_inputs(*args); end

  def before_add_for_step_inputs(); end

  def before_add_for_step_inputs=(val); end

  def before_add_for_step_inputs?(); end

  def before_remove_for_step_inputs(); end

  def before_remove_for_step_inputs=(val); end

  def before_remove_for_step_inputs?(); end

  def validate_associated_records_for_step_inputs(*args); end
end

class Ingredient::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Ingredient::GeneratedRelationMethods
end

class Ingredient::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Ingredient::GeneratedRelationMethods
end

class Ingredient::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Ingredient::GeneratedRelationMethods
end

module Ingredient::GeneratedAssociationMethods
  def step_input_ids=(ids); end
end

module Ingredient::GeneratedRelationMethods
end

module Ingredient::GeneratedRelationMethods
end

class Ingredient
  def self.after_add_for_step_inputs(); end

  def self.after_add_for_step_inputs=(val); end

  def self.after_add_for_step_inputs?(); end

  def self.after_remove_for_step_inputs(); end

  def self.after_remove_for_step_inputs=(val); end

  def self.after_remove_for_step_inputs?(); end

  def self.before_add_for_step_inputs(); end

  def self.before_add_for_step_inputs=(val); end

  def self.before_add_for_step_inputs?(); end

  def self.before_remove_for_step_inputs(); end

  def self.before_remove_for_step_inputs=(val); end

  def self.before_remove_for_step_inputs?(); end
end

class IngredientAmount
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
  def self.inherited(s); end
end

module InheritedResources
  ACTIONS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module InheritedResources::Actions
  def create(options=T.unsafe(nil), &block); end

  def create!(options=T.unsafe(nil), &block); end

  def destroy(options=T.unsafe(nil), &block); end

  def destroy!(options=T.unsafe(nil), &block); end

  def edit(options=T.unsafe(nil), &block); end

  def edit!(options=T.unsafe(nil), &block); end

  def index(options=T.unsafe(nil), &block); end

  def index!(options=T.unsafe(nil), &block); end

  def new(options=T.unsafe(nil), &block); end

  def new!(options=T.unsafe(nil), &block); end

  def show(options=T.unsafe(nil), &block); end

  def show!(options=T.unsafe(nil), &block); end

  def update(options=T.unsafe(nil), &block); end

  def update!(options=T.unsafe(nil), &block); end
end

module InheritedResources::Actions
end

class InheritedResources::Base
  include ::InheritedResources::Actions
  include ::InheritedResources::BaseHelpers
  def parents_symbols(); end

  def parents_symbols?(); end

  def resource_class(); end

  def resource_class?(); end

  def resources_configuration(); end

  def resources_configuration?(); end
end

class InheritedResources::Base
  extend ::InheritedResources::ClassMethods
  extend ::InheritedResources::UrlHelpers
  def self.inherit_resources(base); end

  def self.parents_symbols(); end

  def self.parents_symbols=(val); end

  def self.parents_symbols?(); end

  def self.resource_class(); end

  def self.resource_class=(val); end

  def self.resource_class?(); end

  def self.resources_configuration(); end

  def self.resources_configuration=(val); end

  def self.resources_configuration?(); end
end

module InheritedResources::BaseHelpers
  def association_chain(); end

  def begin_of_association_chain(); end

  def build_resource(); end

  def collection(); end

  def create_resource(object); end

  def destroy_resource(object); end

  def parent?(); end

  def resource(); end

  def update_resource(object, attributes); end
end

module InheritedResources::BaseHelpers
end

module InheritedResources::BelongsToHelpers
  def parent(); end

  def parent?(); end

  def parent_type(); end
end

module InheritedResources::BelongsToHelpers
end

class InheritedResources::BlankSlate
  def method_missing(*args); end
end

class InheritedResources::BlankSlate
end

module InheritedResources::ClassMethods
  def actions(*actions_to_keep); end

  def belongs_to(*symbols, &block); end

  def custom_actions(options); end

  def defaults(options); end

  def nested_belongs_to(*symbols, &block); end

  def optional_belongs_to(*symbols, &block); end

  def polymorphic_belongs_to(*symbols, &block); end

  def singleton_belongs_to(*symbols, &block); end

  def with_role(role); end

  def without_protection(flag); end
end

module InheritedResources::ClassMethods
end

module InheritedResources::DSL
end

module InheritedResources::DSL
  def self.included(base); end
end

module InheritedResources::PolymorphicHelpers
  def parent(); end

  def parent?(); end

  def parent_class(); end

  def parent_type(); end
end

module InheritedResources::PolymorphicHelpers
end

class InheritedResources::Railtie
end

class InheritedResources::Railtie
end

class InheritedResources::Responder
  include ::Responders::FlashResponder
end

class InheritedResources::Responder
end

module InheritedResources::ShallowHelpers
end

module InheritedResources::ShallowHelpers
end

module InheritedResources::SingletonHelpers
  def collection(); end

  def resource(); end
end

module InheritedResources::SingletonHelpers
end

module InheritedResources::UrlHelpers
  def create_resources_url_helpers!(); end

  def define_helper_method(prefix, name, suffix, segments); end

  def define_params_helper(prefix, name, singleton, polymorphic, parent_index, ivars); end

  def generate_url_and_path_helpers(prefix, name, resource_segments, resource_ivars); end

  def handle_shallow_resource(prefix, name, segments, ivars); end
end

module InheritedResources::UrlHelpers
end

module InheritedResources
  def self.flash_keys=(array); end
end

class Integer
  include ::JSON::Ext::Generator::GeneratorMethods::Integer
  include ::ActiveSupport::NumericWithFormat
  def to_bn(); end
  GMP_VERSION = ::T.let(nil, ::T.untyped)
end

class JSON::Ext::Generator::State
  def self.from_state(_); end
end

class JSON::Ext::Parser
  def initialize(*_); end
end

JSON::Parser = JSON::Ext::Parser

JSON::State = JSON::Ext::Generator::State

JSON::UnparserError = JSON::GeneratorError

class Jbuilder
  BLANK = ::T.let(nil, ::T.untyped)
  NON_ENUMERABLES = ::T.let(nil, ::T.untyped)
end

module Jbuilder::DependencyTrackerMethods
  DIRECT_RENDERS = ::T.let(nil, ::T.untyped)
  INDIRECT_RENDERS = ::T.let(nil, ::T.untyped)
end

module Jquery
end

module Jquery::Rails
  JQUERY_2_VERSION = ::T.let(nil, ::T.untyped)
  JQUERY_3_VERSION = ::T.let(nil, ::T.untyped)
  JQUERY_UJS_VERSION = ::T.let(nil, ::T.untyped)
  JQUERY_VERSION = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Jquery::Rails::Engine
end

class Jquery::Rails::Engine
end

module Jquery::Rails
end

module Jquery
end

module Kaminari
end

module Kaminari::ActionViewExtension
end

module Kaminari::ActionViewExtension::LogSubscriberSilencer
  def render_partial(*_); end
end

module Kaminari::ActionViewExtension::LogSubscriberSilencer
end

module Kaminari::ActionViewExtension
end

module Kaminari::Actionview
  VERSION = ::T.let(nil, ::T.untyped)
end

module Kaminari::Actionview
end

module Kaminari::ActiveRecordExtension
end

module Kaminari::ActiveRecordExtension
  extend ::ActiveSupport::Concern
end

module Kaminari::ActiveRecordModelExtension
end

module Kaminari::ActiveRecordModelExtension
  extend ::ActiveSupport::Concern
end

module Kaminari::ActiveRecordRelationMethods
  def entry_name(options=T.unsafe(nil)); end

  def reset(); end

  def total_count(column_name=T.unsafe(nil), _options=T.unsafe(nil)); end

  def without_count(); end
end

module Kaminari::ActiveRecordRelationMethods
end

module Kaminari::Activerecord
  VERSION = ::T.let(nil, ::T.untyped)
end

module Kaminari::Activerecord
end

class Kaminari::Config
  def default_per_page(); end

  def default_per_page=(default_per_page); end

  def left(); end

  def left=(left); end

  def max_pages(); end

  def max_pages=(max_pages); end

  def max_per_page(); end

  def max_per_page=(max_per_page); end

  def outer_window(); end

  def outer_window=(outer_window); end

  def page_method_name(); end

  def page_method_name=(page_method_name); end

  def param_name(); end

  def param_name=(param_name); end

  def params_on_first_page(); end

  def params_on_first_page=(params_on_first_page); end

  def right(); end

  def right=(right); end

  def window(); end

  def window=(window); end
end

class Kaminari::Config
end

module Kaminari::ConfigurationMethods
end

module Kaminari::ConfigurationMethods::ClassMethods
  def default_per_page(); end

  def max_pages(val=T.unsafe(nil)); end

  def max_pages_per(val); end

  def max_paginates_per(val); end

  def max_per_page(); end

  def paginates_per(val); end
end

module Kaminari::ConfigurationMethods::ClassMethods
end

module Kaminari::ConfigurationMethods
  extend ::ActiveSupport::Concern
end

class Kaminari::Engine
end

class Kaminari::Engine
end

module Kaminari::Helpers
  PARAM_KEY_EXCEPT_LIST = ::T.let(nil, ::T.untyped)
end

class Kaminari::Helpers::FirstPage
  include ::Kaminari::Helpers::Link
end

class Kaminari::Helpers::FirstPage
end

class Kaminari::Helpers::Gap
end

class Kaminari::Helpers::Gap
end

module Kaminari::Helpers::HelperMethods
  include ::Kaminari::Helpers::UrlHelper
  def link_to_next_page(scope, name, **options); end

  def link_to_prev_page(scope, name, **options); end

  def link_to_previous_page(scope, name, **options); end

  def page_entries_info(collection, entry_name: T.unsafe(nil)); end

  def paginate(scope, paginator_class: T.unsafe(nil), template: T.unsafe(nil), **options); end

  def rel_next_prev_link_tags(scope, options=T.unsafe(nil)); end
end

module Kaminari::Helpers::HelperMethods
end

class Kaminari::Helpers::LastPage
  include ::Kaminari::Helpers::Link
end

class Kaminari::Helpers::LastPage
end

module Kaminari::Helpers::Link
  def page(); end

  def to_s(locals=T.unsafe(nil)); end

  def url(); end
end

module Kaminari::Helpers::Link
end

class Kaminari::Helpers::NextPage
  include ::Kaminari::Helpers::Link
end

class Kaminari::Helpers::NextPage
end

class Kaminari::Helpers::Page
  include ::Kaminari::Helpers::Link
end

class Kaminari::Helpers::Page
end

class Kaminari::Helpers::Paginator
  include ::ActionView::Context
  include ::ActionView::CompiledTemplates
  def each_page(); end

  def each_relevant_page(); end

  def first_page_tag(); end

  def gap_tag(); end

  def initialize(template, window: T.unsafe(nil), outer_window: T.unsafe(nil), left: T.unsafe(nil), right: T.unsafe(nil), inner_window: T.unsafe(nil), **options); end

  def last_page_tag(); end

  def next_page_tag(); end

  def page_tag(page); end

  def prev_page_tag(); end

  def render(&block); end

  def to_s(); end
end

class Kaminari::Helpers::Paginator::PageProxy
  include ::Comparable
  def +(other); end

  def -(other); end

  def current?(); end

  def display_tag?(); end

  def first?(); end

  def initialize(options, page, last); end

  def inside_window?(); end

  def last?(); end

  def left_outer?(); end

  def next?(); end

  def number(); end

  def out_of_range?(); end

  def prev?(); end

  def rel(); end

  def right_outer?(); end

  def single_gap?(); end

  def to_i(); end

  def was_truncated?(); end
end

class Kaminari::Helpers::Paginator::PageProxy
end

class Kaminari::Helpers::Paginator
end

class Kaminari::Helpers::PrevPage
  include ::Kaminari::Helpers::Link
end

class Kaminari::Helpers::PrevPage
end

class Kaminari::Helpers::Tag
  def initialize(template, params: T.unsafe(nil), param_name: T.unsafe(nil), theme: T.unsafe(nil), views_prefix: T.unsafe(nil), **options); end

  def page_url_for(page); end

  def to_s(locals=T.unsafe(nil)); end
end

class Kaminari::Helpers::Tag
end

module Kaminari::Helpers::UrlHelper
  def next_page_path(scope, options=T.unsafe(nil)); end

  def next_page_url(scope, options=T.unsafe(nil)); end

  def path_to_next_page(scope, options=T.unsafe(nil)); end

  def path_to_next_url(scope, options=T.unsafe(nil)); end

  def path_to_prev_page(scope, options=T.unsafe(nil)); end

  def path_to_previous_page(scope, options=T.unsafe(nil)); end

  def prev_page_path(scope, options=T.unsafe(nil)); end

  def prev_page_url(scope, options=T.unsafe(nil)); end

  def previous_page_path(scope, options=T.unsafe(nil)); end

  def previous_page_url(scope, options=T.unsafe(nil)); end

  def url_to_prev_page(scope, options=T.unsafe(nil)); end

  def url_to_previous_page(scope, options=T.unsafe(nil)); end
end

module Kaminari::Helpers::UrlHelper
end

module Kaminari::Helpers
end

module Kaminari::PageScopeMethods
  def current_page(); end

  def current_per_page(); end

  def first_page?(); end

  def last_page?(); end

  def max_paginates_per(new_max_per_page); end

  def next_page(); end

  def out_of_range?(); end

  def padding(num); end

  def per(num, max_per_page: T.unsafe(nil)); end

  def prev_page(); end

  def total_pages(); end
end

module Kaminari::PageScopeMethods
end

class Kaminari::PaginatableArray
  include ::Kaminari::ConfigurationMethods::ClassMethods
  def entry_name(options=T.unsafe(nil)); end

  def initialize(original_array=T.unsafe(nil), limit: T.unsafe(nil), offset: T.unsafe(nil), total_count: T.unsafe(nil), padding: T.unsafe(nil)); end

  def limit(num); end

  def limit_value(); end

  def limit_value=(limit_value); end

  def offset(num); end

  def offset_value(); end

  def offset_value=(offset_value); end

  def page(num=T.unsafe(nil)); end

  def total_count(); end
  ENTRY = ::T.let(nil, ::T.untyped)
end

class Kaminari::PaginatableArray
end

module Kaminari::PaginatableWithoutCount
  def last_page?(); end

  def load(); end

  def out_of_range?(); end

  def total_count(); end
end

module Kaminari::PaginatableWithoutCount::LimitValueSetter
end

module Kaminari::PaginatableWithoutCount::LimitValueSetter
end

module Kaminari::PaginatableWithoutCount
end

class Kaminari::Railtie
end

class Kaminari::Railtie
end

class Kaminari::ZeroPerPageOperation
end

class Kaminari::ZeroPerPageOperation
end

module Kaminari
  def self.config(); end

  def self.configure(); end

  def self.paginate_array(array, limit: T.unsafe(nil), offset: T.unsafe(nil), total_count: T.unsafe(nil), padding: T.unsafe(nil)); end
end

module Kernel
  def itself(); end

  def object_id(); end

  def pretty_inspect(); end

  def yield_self(); end
end

module Kernel
  def self.`(_); end

  def self.at_exit(); end

  def self.load(*_); end

  def self.require(_); end
end

class KeyError
  include ::DidYouMean::Correctable
end

module Launchy
  VERSION = ::T.let(nil, ::T.untyped)
end

module Launchy::Version
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PATCH = ::T.let(nil, ::T.untyped)
end

class LetterOpener::Configuration
  def location(); end

  def location=(location); end

  def message_template(); end

  def message_template=(message_template); end
end

class LetterOpener::Configuration
end

class LetterOpener::Message
  def attachment_filename(attachment); end

  def auto_link(text); end

  def bcc(); end

  def body(); end

  def cc(); end

  def content_type(); end

  def encoding(); end

  def filepath(); end

  def from(); end

  def h(content); end

  def initialize(mail, options=T.unsafe(nil)); end

  def mail(); end

  def render(); end

  def reply_to(); end

  def sender(); end

  def template(); end

  def to(); end

  def type(); end
  ERROR_MSG = ::T.let(nil, ::T.untyped)
end

class LetterOpener::Message
  def self.rendered_messages(mail, options=T.unsafe(nil)); end
end

module Listen
  VERSION = ::T.let(nil, ::T.untyped)
end

module Listen::Adapter
  OPTIMIZED_ADAPTERS = ::T.let(nil, ::T.untyped)
  POLLING_FALLBACK_MESSAGE = ::T.let(nil, ::T.untyped)
end

class Listen::Adapter::BSD
  BUNDLER_DECLARE_GEM = ::T.let(nil, ::T.untyped)
  DEFAULTS = ::T.let(nil, ::T.untyped)
  OS_REGEXP = ::T.let(nil, ::T.untyped)
end

class Listen::Adapter::Base
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Listen::Adapter::Darwin
  DEFAULTS = ::T.let(nil, ::T.untyped)
  INCOMPATIBLE_GEM_VERSION = ::T.let(nil, ::T.untyped)
  OS_REGEXP = ::T.let(nil, ::T.untyped)
end

class Listen::Adapter::Linux
  DEFAULTS = ::T.let(nil, ::T.untyped)
  INOTIFY_LIMIT_MESSAGE = ::T.let(nil, ::T.untyped)
  OS_REGEXP = ::T.let(nil, ::T.untyped)
  WIKI_URL = ::T.let(nil, ::T.untyped)
end

class Listen::Adapter::Polling
  DEFAULTS = ::T.let(nil, ::T.untyped)
  OS_REGEXP = ::T.let(nil, ::T.untyped)
end

class Listen::Adapter::Windows
  BUNDLER_DECLARE_GEM = ::T.let(nil, ::T.untyped)
  OS_REGEXP = ::T.let(nil, ::T.untyped)
end

module Listen::FSM
  DEFAULT_STATE = ::T.let(nil, ::T.untyped)
end

class Listen::Listener::Config
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Listen::Record::SymlinkDetector
  SYMLINK_LOOP_ERROR = ::T.let(nil, ::T.untyped)
  WIKI = ::T.let(nil, ::T.untyped)
end

class Listen::Silencer
  DEFAULT_IGNORED_DIRECTORIES = ::T.let(nil, ::T.untyped)
  DEFAULT_IGNORED_EXTENSIONS = ::T.let(nil, ::T.untyped)
end

class Logger
  SEV_LABEL = ::T.let(nil, ::T.untyped)
end

class Logger::Formatter
  Format = ::T.let(nil, ::T.untyped)
end

class Logger::LogDevice
  include ::MonitorMixin
end

module Logger::Period
  SiD = ::T.let(nil, ::T.untyped)
end

module Loofah
  VERSION = ::T.let(nil, ::T.untyped)
end

module Loofah::Elements
  BLOCK_LEVEL = ::T.let(nil, ::T.untyped)
  LOOSE_BLOCK_LEVEL = ::T.let(nil, ::T.untyped)
  STRICT_BLOCK_LEVEL = ::T.let(nil, ::T.untyped)
  STRICT_BLOCK_LEVEL_HTML4 = ::T.let(nil, ::T.untyped)
  STRICT_BLOCK_LEVEL_HTML5 = ::T.let(nil, ::T.untyped)
end

module Loofah::HTML5::SafeList
  ACCEPTABLE_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_CSS_FUNCTIONS = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_CSS_KEYWORDS = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_CSS_PROPERTIES = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_ELEMENTS = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_PROTOCOLS = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_SVG_PROPERTIES = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_URI_DATA_MEDIATYPES = ::T.let(nil, ::T.untyped)
  ALLOWED_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  ALLOWED_CSS_FUNCTIONS = ::T.let(nil, ::T.untyped)
  ALLOWED_CSS_KEYWORDS = ::T.let(nil, ::T.untyped)
  ALLOWED_CSS_PROPERTIES = ::T.let(nil, ::T.untyped)
  ALLOWED_ELEMENTS = ::T.let(nil, ::T.untyped)
  ALLOWED_ELEMENTS_WITH_LIBXML2 = ::T.let(nil, ::T.untyped)
  ALLOWED_PROTOCOLS = ::T.let(nil, ::T.untyped)
  ALLOWED_SVG_PROPERTIES = ::T.let(nil, ::T.untyped)
  ALLOWED_URI_DATA_MEDIATYPES = ::T.let(nil, ::T.untyped)
  ATTR_VAL_IS_URI = ::T.let(nil, ::T.untyped)
  MATHML_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  MATHML_ELEMENTS = ::T.let(nil, ::T.untyped)
  PROTOCOL_SEPARATOR = ::T.let(nil, ::T.untyped)
  SHORTHAND_CSS_PROPERTIES = ::T.let(nil, ::T.untyped)
  SVG_ALLOW_LOCAL_HREF = ::T.let(nil, ::T.untyped)
  SVG_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  SVG_ATTR_VAL_ALLOWS_REF = ::T.let(nil, ::T.untyped)
  SVG_ELEMENTS = ::T.let(nil, ::T.untyped)
  TAGS_SAFE_WITH_LIBXML2 = ::T.let(nil, ::T.untyped)
  VOID_ELEMENTS = ::T.let(nil, ::T.untyped)
end

module Loofah::HTML5::Scrub
  CONTROL_CHARACTERS = ::T.let(nil, ::T.untyped)
  CRASS_SEMICOLON = ::T.let(nil, ::T.untyped)
  CSS_KEYWORDISH = ::T.let(nil, ::T.untyped)
end

Loofah::HTML5::WhiteList = Loofah::HTML5::SafeList

module Loofah::LibxmlWorkarounds
  BROKEN_ESCAPING_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  BROKEN_ESCAPING_ATTRIBUTES_QUALIFYING_TAG = ::T.let(nil, ::T.untyped)
end

class Loofah::Scrubber
  CONTINUE = ::T.let(nil, ::T.untyped)
  STOP = ::T.let(nil, ::T.untyped)
end

module Loofah::Scrubbers
  MAP = ::T.let(nil, ::T.untyped)
end

module Mail
  RANDOM_TAG = ::T.let(nil, ::T.untyped)
end

class Mail::Address
  include ::Mail::Utilities
  include ::Mail::Constants
  def address(output_type=T.unsafe(nil)); end

  def address=(value); end

  def comments(); end

  def decoded(); end

  def display_name(output_type=T.unsafe(nil)); end

  def display_name=(str); end

  def domain(output_type=T.unsafe(nil)); end

  def encoded(); end

  def format(output_type=T.unsafe(nil)); end

  def group(); end

  def initialize(value=T.unsafe(nil)); end

  def local(output_type=T.unsafe(nil)); end

  def name(); end

  def raw(); end
end

class Mail::Address
end

class Mail::AddressList
  def addresses(); end

  def addresses_grouped_by_group(); end

  def group_names(); end

  def initialize(string); end
end

class Mail::AddressList
end

class Mail::BccField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::CcField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::CommentsField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

module Mail::CommonField
  FILENAME_RE = ::T.let(nil, ::T.untyped)
end

module Mail::Constants
  ASTERISK = ::T.let(nil, ::T.untyped)
  ATOM_UNSAFE = ::T.let(nil, ::T.untyped)
  B_VALUES = ::T.let(nil, ::T.untyped)
  CAPITAL_M = ::T.let(nil, ::T.untyped)
  COLON = ::T.let(nil, ::T.untyped)
  CONTROL_CHAR = ::T.let(nil, ::T.untyped)
  CR = ::T.let(nil, ::T.untyped)
  CRLF = ::T.let(nil, ::T.untyped)
  CR_ENCODED = ::T.let(nil, ::T.untyped)
  EMPTY = ::T.let(nil, ::T.untyped)
  ENCODED_VALUE = ::T.let(nil, ::T.untyped)
  EQUAL_LF = ::T.let(nil, ::T.untyped)
  FIELD_BODY = ::T.let(nil, ::T.untyped)
  FIELD_LINE = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
  FIELD_PREFIX = ::T.let(nil, ::T.untyped)
  FIELD_SPLIT = ::T.let(nil, ::T.untyped)
  FULL_ENCODED_VALUE = ::T.let(nil, ::T.untyped)
  FWS = ::T.let(nil, ::T.untyped)
  HEADER_LINE = ::T.let(nil, ::T.untyped)
  HEADER_SPLIT = ::T.let(nil, ::T.untyped)
  HYPHEN = ::T.let(nil, ::T.untyped)
  LF = ::T.let(nil, ::T.untyped)
  LF_ENCODED = ::T.let(nil, ::T.untyped)
  NULL_SENDER = ::T.let(nil, ::T.untyped)
  PHRASE_UNSAFE = ::T.let(nil, ::T.untyped)
  QP_SAFE = ::T.let(nil, ::T.untyped)
  QP_UNSAFE = ::T.let(nil, ::T.untyped)
  Q_VALUES = ::T.let(nil, ::T.untyped)
  SPACE = ::T.let(nil, ::T.untyped)
  TEXT = ::T.let(nil, ::T.untyped)
  TOKEN_UNSAFE = ::T.let(nil, ::T.untyped)
  UNDERSCORE = ::T.let(nil, ::T.untyped)
  WSP = ::T.let(nil, ::T.untyped)
end

class Mail::ContentDescriptionField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ContentDispositionElement
  def disposition_type(); end

  def initialize(string); end

  def parameters(); end
end

class Mail::ContentDispositionElement
end

class Mail::ContentDispositionField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ContentIdField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ContentLocationElement
  def initialize(string); end

  def location(); end

  def to_s(*args); end
end

class Mail::ContentLocationElement
end

class Mail::ContentLocationField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ContentTransferEncodingElement
  def encoding(); end

  def initialize(string); end
end

class Mail::ContentTransferEncodingElement
end

class Mail::ContentTransferEncodingField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ContentTypeElement
  def initialize(string); end

  def main_type(); end

  def parameters(); end

  def sub_type(); end
end

class Mail::ContentTypeElement
end

class Mail::ContentTypeField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::DateField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::DateTimeElement
  def date_string(); end

  def initialize(string); end

  def time_string(); end
end

class Mail::DateTimeElement
end

class Mail::Encodings::Base64
  NAME = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::Binary
  NAME = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::EightBit
  NAME = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::QuotedPrintable
  NAME = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::SevenBit
  NAME = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::TransferEncoding
  NAME = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::UnixToUnix
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::EnvelopeFromElement
  def address(); end

  def date_time(); end

  def formatted_date_time(); end

  def initialize(string); end
end

class Mail::EnvelopeFromElement
end

class Mail::Exim
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Mail::Exim
end

class Mail::Field
  FIELDS_MAP = ::T.let(nil, ::T.untyped)
  FIELD_NAME_MAP = ::T.let(nil, ::T.untyped)
  FIELD_ORDER = ::T.let(nil, ::T.untyped)
  FIELD_ORDER_LOOKUP = ::T.let(nil, ::T.untyped)
  KNOWN_FIELDS = ::T.let(nil, ::T.untyped)
  STRUCTURED_FIELDS = ::T.let(nil, ::T.untyped)
end

class Mail::FromField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::Header
  LIMITED_FIELDS = ::T.let(nil, ::T.untyped)
end

class Mail::IMAP
  def connection(&block); end

  def delete_all(mailbox=T.unsafe(nil)); end

  def find(options=T.unsafe(nil), &block); end

  def initialize(values); end

  def settings(); end

  def settings=(settings); end
end

class Mail::IMAP
end

class Mail::InReplyToField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::KeywordsField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::LoggerDelivery
  include ::Mail::CheckDeliveryParams
  def deliver!(mail); end

  def initialize(settings); end

  def logger(); end

  def settings(); end

  def severity(); end
end

class Mail::LoggerDelivery
end

class Mail::Message
  HEADER_SEPARATOR = ::T.let(nil, ::T.untyped)
end

class Mail::MessageIdField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::MessageIdsElement
  def initialize(string); end

  def message_id(); end

  def message_ids(); end
end

class Mail::MessageIdsElement
end

class Mail::MimeVersionElement
  def initialize(string); end

  def major(); end

  def minor(); end
end

class Mail::MimeVersionElement
end

class Mail::MimeVersionField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

module Mail::Multibyte
  VALID_CHARACTER = ::T.let(nil, ::T.untyped)
end

module Mail::Multibyte::Unicode
  HANGUL_JAMO_FIRST = ::T.let(nil, ::T.untyped)
  HANGUL_JAMO_LAST = ::T.let(nil, ::T.untyped)
  HANGUL_LBASE = ::T.let(nil, ::T.untyped)
  HANGUL_LCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_NCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_SBASE = ::T.let(nil, ::T.untyped)
  HANGUL_SCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_SLAST = ::T.let(nil, ::T.untyped)
  HANGUL_TBASE = ::T.let(nil, ::T.untyped)
  HANGUL_TCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_VBASE = ::T.let(nil, ::T.untyped)
  HANGUL_VCOUNT = ::T.let(nil, ::T.untyped)
  LEADERS_AND_TRAILERS = ::T.let(nil, ::T.untyped)
  LEADERS_PAT = ::T.let(nil, ::T.untyped)
  NORMALIZATION_FORMS = ::T.let(nil, ::T.untyped)
  TRAILERS_PAT = ::T.let(nil, ::T.untyped)
  UNICODE_VERSION = ::T.let(nil, ::T.untyped)
  WHITESPACE = ::T.let(nil, ::T.untyped)
end

class Mail::Multibyte::Unicode::UnicodeDatabase
  ATTRIBUTES = ::T.let(nil, ::T.untyped)
end

class Mail::OptionalField
end

class Mail::OptionalField
end

class Mail::POP3
  def connection(&block); end

  def delete_all(); end

  def find(options=T.unsafe(nil), &block); end

  def initialize(values); end

  def settings(); end

  def settings=(settings); end
end

class Mail::POP3
end

module Mail::Parsers
end

module Mail::Parsers::AddressListsParser
end

class Mail::Parsers::AddressListsParser::AddressListStruct
  def addresses(); end

  def addresses=(_); end

  def error(); end

  def error=(_); end

  def group_names(); end

  def group_names=(_); end
end

class Mail::Parsers::AddressListsParser::AddressListStruct
  def self.[](*_); end

  def self.members(); end
end

class Mail::Parsers::AddressListsParser::AddressStruct
  def comments(); end

  def comments=(_); end

  def display_name(); end

  def display_name=(_); end

  def domain(); end

  def domain=(_); end

  def error(); end

  def error=(_); end

  def group(); end

  def group=(_); end

  def local(); end

  def local=(_); end

  def obs_domain_list(); end

  def obs_domain_list=(_); end

  def raw(); end

  def raw=(_); end
end

class Mail::Parsers::AddressListsParser::AddressStruct
  def self.[](*_); end

  def self.members(); end
end

module Mail::Parsers::AddressListsParser
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers::ContentDispositionParser
end

class Mail::Parsers::ContentDispositionParser::ContentDispositionStruct
  def disposition_type(); end

  def disposition_type=(_); end

  def error(); end

  def error=(_); end

  def parameters(); end

  def parameters=(_); end
end

class Mail::Parsers::ContentDispositionParser::ContentDispositionStruct
  def self.[](*_); end

  def self.members(); end
end

module Mail::Parsers::ContentDispositionParser
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers::ContentLocationParser
end

class Mail::Parsers::ContentLocationParser::ContentLocationStruct
  def error(); end

  def error=(_); end

  def location(); end

  def location=(_); end
end

class Mail::Parsers::ContentLocationParser::ContentLocationStruct
  def self.[](*_); end

  def self.members(); end
end

module Mail::Parsers::ContentLocationParser
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers::ContentTransferEncodingParser
end

class Mail::Parsers::ContentTransferEncodingParser::ContentTransferEncodingStruct
  def encoding(); end

  def encoding=(_); end

  def error(); end

  def error=(_); end
end

class Mail::Parsers::ContentTransferEncodingParser::ContentTransferEncodingStruct
  def self.[](*_); end

  def self.members(); end
end

module Mail::Parsers::ContentTransferEncodingParser
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers::ContentTypeParser
end

class Mail::Parsers::ContentTypeParser::ContentTypeStruct
  def error(); end

  def error=(_); end

  def main_type(); end

  def main_type=(_); end

  def parameters(); end

  def parameters=(_); end

  def sub_type(); end

  def sub_type=(_); end
end

class Mail::Parsers::ContentTypeParser::ContentTypeStruct
  def self.[](*_); end

  def self.members(); end
end

module Mail::Parsers::ContentTypeParser
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers::DateTimeParser
end

class Mail::Parsers::DateTimeParser::DateTimeStruct
  def date_string(); end

  def date_string=(_); end

  def error(); end

  def error=(_); end

  def time_string(); end

  def time_string=(_); end
end

class Mail::Parsers::DateTimeParser::DateTimeStruct
  def self.[](*_); end

  def self.members(); end
end

module Mail::Parsers::DateTimeParser
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers::EnvelopeFromParser
end

class Mail::Parsers::EnvelopeFromParser::EnvelopeFromStruct
  def address(); end

  def address=(_); end

  def ctime_date(); end

  def ctime_date=(_); end

  def error(); end

  def error=(_); end
end

class Mail::Parsers::EnvelopeFromParser::EnvelopeFromStruct
  def self.[](*_); end

  def self.members(); end
end

module Mail::Parsers::EnvelopeFromParser
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers::MessageIdsParser
end

class Mail::Parsers::MessageIdsParser::MessageIdsStruct
  def error(); end

  def error=(_); end

  def message_ids(); end

  def message_ids=(_); end
end

class Mail::Parsers::MessageIdsParser::MessageIdsStruct
  def self.[](*_); end

  def self.members(); end
end

module Mail::Parsers::MessageIdsParser
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers::MimeVersionParser
end

class Mail::Parsers::MimeVersionParser::MimeVersionStruct
  def error(); end

  def error=(_); end

  def major(); end

  def major=(_); end

  def minor(); end

  def minor=(_); end
end

class Mail::Parsers::MimeVersionParser::MimeVersionStruct
  def self.[](*_); end

  def self.members(); end
end

module Mail::Parsers::MimeVersionParser
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

class Mail::Parsers::PhraseListsParser
end

class Mail::Parsers::PhraseListsParser::PhraseListsStruct
  def error(); end

  def error=(_); end

  def phrases(); end

  def phrases=(_); end
end

class Mail::Parsers::PhraseListsParser::PhraseListsStruct
  def self.[](*_); end

  def self.members(); end
end

class Mail::Parsers::PhraseListsParser
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers::ReceivedParser
end

class Mail::Parsers::ReceivedParser::ReceivedStruct
  def date(); end

  def date=(_); end

  def error(); end

  def error=(_); end

  def info(); end

  def info=(_); end

  def time(); end

  def time=(_); end
end

class Mail::Parsers::ReceivedParser::ReceivedStruct
  def self.[](*_); end

  def self.members(); end
end

module Mail::Parsers::ReceivedParser
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers
end

class Mail::PartsList
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Mail::PhraseList
  def initialize(string); end

  def phrases(); end
end

class Mail::PhraseList
end

class Mail::ReceivedElement
  include ::Mail::Utilities
  include ::Mail::Constants
  def date_time(); end

  def info(); end

  def initialize(string); end

  def to_s(*args); end
end

class Mail::ReceivedElement
end

class Mail::ReceivedField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ReferencesField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ReplyToField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentBccField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentCcField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentDateField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentFromField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentMessageIdField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentSenderField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentToField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ReturnPathField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

Mail::RubyVer = Mail::Ruby19

class Mail::SMTP
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Mail::SMTPConnection
  def deliver!(mail); end

  def initialize(values); end

  def settings(); end

  def settings=(settings); end

  def smtp(); end

  def smtp=(smtp); end
end

class Mail::SMTPConnection
end

class Mail::SenderField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::Sendmail
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Mail::SubjectField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

class Mail::TestRetriever
  def find(options=T.unsafe(nil), &block); end

  def initialize(values); end
end

class Mail::TestRetriever
  def self.emails(); end

  def self.emails=(val); end
end

class Mail::ToField
  CAPITALIZED_FIELD = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
end

module Mail::Utilities
  CRLF = ::T.let(nil, ::T.untyped)
  LF = ::T.let(nil, ::T.untyped)
  TO_CRLF_REGEX = ::T.let(nil, ::T.untyped)
end

module Mail::VERSION
  BUILD = ::T.let(nil, ::T.untyped)
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PATCH = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
end

module Marcel
  VERSION = ::T.let(nil, ::T.untyped)
end

class Marcel::MimeType
  BINARY = ::T.let(nil, ::T.untyped)
end

class Marcel::MimeType
  def self.extend(type, extensions: T.unsafe(nil), parents: T.unsafe(nil), magic: T.unsafe(nil)); end

  def self.for(pathname_or_io=T.unsafe(nil), name: T.unsafe(nil), extension: T.unsafe(nil), declared_type: T.unsafe(nil)); end
end

module Marshal
  extend ::ActiveSupport::MarshalWithAutoloading
end

module MethodOrProcHelper
  def call_method_or_exec_proc(symbol_or_proc, *args); end

  def call_method_or_proc_on(receiver, *args); end

  def render_in_context(context, obj, *args); end

  def render_or_call_method_or_proc_on(obj, string_symbol_or_proc, options=T.unsafe(nil)); end
end

module MethodOrProcHelper
  extend ::MethodOrProcHelper
end

module MethodSource
  VERSION = ::T.let(nil, ::T.untyped)
end

module MethodSource::CodeHelpers::IncompleteExpression
  GENERIC_REGEXPS = ::T.let(nil, ::T.untyped)
  RBX_ONLY_REGEXPS = ::T.let(nil, ::T.untyped)
end

module Mime
  ALL = ::T.let(nil, ::T.untyped)
  EXTENSION_LOOKUP = ::T.let(nil, ::T.untyped)
  LOOKUP = ::T.let(nil, ::T.untyped)
  SET = ::T.let(nil, ::T.untyped)
end

module MiniMime
  VERSION = ::T.let(nil, ::T.untyped)
end

class MiniMime::Db
  LOCK = ::T.let(nil, ::T.untyped)
end

class MiniMime::Db::RandomAccessDb
  MAX_CACHED = ::T.let(nil, ::T.untyped)
end

class MiniMime::Info
  BINARY_ENCODINGS = ::T.let(nil, ::T.untyped)
end

MiniTest = Minitest

module Minitest
  ENCS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Minitest::Assertions
  E = ::T.let(nil, ::T.untyped)
  UNDEFINED = ::T.let(nil, ::T.untyped)
end

class Minitest::BacktraceFilter
  MT_RE = ::T.let(nil, ::T.untyped)
end

class Minitest::Runnable
  SIGNALS = ::T.let(nil, ::T.untyped)
end

class Minitest::Spec
  TYPES = ::T.let(nil, ::T.untyped)
end

module Minitest::Spec::DSL
  TYPES = ::T.let(nil, ::T.untyped)
end

class Minitest::Test
  PASSTHROUGH_EXCEPTIONS = ::T.let(nil, ::T.untyped)
  TEARDOWN_METHODS = ::T.let(nil, ::T.untyped)
end

class Minitest::Unit
  VERSION = ::T.let(nil, ::T.untyped)
end

module Mocha
  PRE_RUBY_V19 = ::T.let(nil, ::T.untyped)
  RUBY_V2_PLUS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Mocha::BacktraceFilter
  LIB_DIRECTORY = ::T.let(nil, ::T.untyped)
end

class Mocha::Cardinality
  INFINITY = ::T.let(nil, ::T.untyped)
end

class Mocha::Configuration
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

module Mocha::Debug
  OPTIONS = ::T.let(nil, ::T.untyped)
end

class Module
  DELEGATION_RESERVED_KEYWORDS = ::T.let(nil, ::T.untyped)
  DELEGATION_RESERVED_METHOD_NAMES = ::T.let(nil, ::T.untyped)
  RUBY_RESERVED_KEYWORDS = ::T.let(nil, ::T.untyped)
end

class Monitor
  def enter(); end

  def exit(); end

  def try_enter(); end
end

module MonitorMixin
  def initialize(*args); end
end

class MonitorMixin::ConditionVariable
  def initialize(monitor); end
end

module NIO
  ENGINE = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class NIO::ByteBuffer
  include ::Enumerable
end

class NIO::ByteBuffer::MarkUnsetError
end

class NIO::ByteBuffer::MarkUnsetError
end

class NIO::ByteBuffer::OverflowError
end

class NIO::ByteBuffer::OverflowError
end

class NIO::ByteBuffer::UnderflowError
end

class NIO::ByteBuffer::UnderflowError
end

class NameError
  include ::DidYouMean::Correctable
end

class Net::APOP
end

class Net::APOP
end

Net::APOPSession = Net::APOP

class Net::HTTP
  def max_retries(); end

  def max_retries=(retries); end

  def max_version(); end

  def max_version=(max_version); end

  def min_version(); end

  def min_version=(min_version); end
  ENVIRONMENT_VARIABLE_IS_MULTIUSER_SAFE = ::T.let(nil, ::T.untyped)
end

class Net::HTTPAlreadyReported
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPAlreadyReported
end

Net::HTTPClientErrorCode = Net::HTTPClientError

Net::HTTPFatalErrorCode = Net::HTTPClientError

class Net::HTTPInformation
end

Net::HTTPInformationCode::EXCEPTION_TYPE = Net::HTTPError

class Net::HTTPInformation
end

class Net::HTTPLoopDetected
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPLoopDetected
end

class Net::HTTPMisdirectedRequest
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPMisdirectedRequest
end

Net::HTTPMovedTemporarily = Net::HTTPFound

Net::HTTPMultipleChoice = Net::HTTPMultipleChoices

class Net::HTTPNotExtended
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPNotExtended
end

class Net::HTTPProcessing
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPProcessing
end

Net::HTTPRedirectionCode = Net::HTTPRedirection

Net::HTTPRequestURITooLarge = Net::HTTPRequestURITooLong

Net::HTTPResponceReceiver = Net::HTTPResponse

Net::HTTPRetriableCode = Net::HTTPRedirection

Net::HTTPServerErrorCode = Net::HTTPServerError

Net::HTTPSession = Net::HTTP

class Net::HTTPSuccess
end

Net::HTTPSuccessCode::EXCEPTION_TYPE = Net::HTTPError

class Net::HTTPSuccess
end

Net::HTTPUnknownResponse::EXCEPTION_TYPE = Net::HTTPError

class Net::HTTPVariantAlsoNegotiates
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPVariantAlsoNegotiates
end

class Net::IMAP
  def open_timeout(); end

  RESPONSE_ERRORS = ::T.let(nil, ::T.untyped)
end

module Net::IMAP::NumValidator
  def self.ensure_mod_sequence_value(num); end

  def self.valid_mod_sequence_value?(num); end
end

Net::NetPrivate::HTTPRequest = Net::HTTPRequest

Net::NetPrivate::Socket = Net::InternetMessageIO

Net::POP = Net::POP3

class Net::POP3
  def active?(); end

  def address(); end

  def apop?(); end

  def auth_only(account, password); end

  def delete_all(); end

  def disable_ssl(); end

  def each(&block); end

  def each_mail(&block); end

  def enable_ssl(verify_or_params=T.unsafe(nil), certs=T.unsafe(nil), port=T.unsafe(nil)); end

  def finish(); end

  def initialize(addr, port=T.unsafe(nil), isapop=T.unsafe(nil)); end

  def logging(msg); end

  def mails(); end

  def n_bytes(); end

  def n_mails(); end

  def open_timeout(); end

  def open_timeout=(open_timeout); end

  def port(); end

  def read_timeout(); end

  def read_timeout=(sec); end

  def reset(); end

  def set_all_uids(); end

  def set_debug_output(arg); end

  def start(account, password); end

  def started?(); end

  def use_ssl?(); end
  Revision = ::T.let(nil, ::T.untyped)
end

class Net::POP3
  def self.APOP(isapop); end

  def self.auth_only(address, port=T.unsafe(nil), account=T.unsafe(nil), password=T.unsafe(nil), isapop=T.unsafe(nil)); end

  def self.certs(); end

  def self.create_ssl_params(verify_or_params=T.unsafe(nil), certs=T.unsafe(nil)); end

  def self.default_pop3_port(); end

  def self.default_pop3s_port(); end

  def self.default_port(); end

  def self.delete_all(address, port=T.unsafe(nil), account=T.unsafe(nil), password=T.unsafe(nil), isapop=T.unsafe(nil), &block); end

  def self.disable_ssl(); end

  def self.enable_ssl(*args); end

  def self.foreach(address, port=T.unsafe(nil), account=T.unsafe(nil), password=T.unsafe(nil), isapop=T.unsafe(nil), &block); end

  def self.socket_type(); end

  def self.ssl_params(); end

  def self.start(address, port=T.unsafe(nil), account=T.unsafe(nil), password=T.unsafe(nil), isapop=T.unsafe(nil), &block); end

  def self.use_ssl?(); end

  def self.verify(); end
end

class Net::POP3Command
  def apop(account, password); end

  def auth(account, password); end

  def dele(num); end

  def initialize(sock); end

  def list(); end

  def quit(); end

  def retr(num, &block); end

  def rset(); end

  def socket(); end

  def stat(); end

  def top(num, lines=T.unsafe(nil), &block); end

  def uidl(num=T.unsafe(nil)); end
end

class Net::POP3Command
end

Net::POP3Session = Net::POP3

class Net::POPAuthenticationError
end

class Net::POPAuthenticationError
end

class Net::POPBadResponse
end

class Net::POPBadResponse
end

class Net::POPError
end

class Net::POPError
end

class Net::POPMail
  def all(dest=T.unsafe(nil), &block); end

  def delete(); end

  def delete!(); end

  def deleted?(); end

  def header(dest=T.unsafe(nil)); end

  def initialize(num, len, pop, cmd); end

  def length(); end

  def mail(dest=T.unsafe(nil), &block); end

  def number(); end

  def pop(dest=T.unsafe(nil), &block); end

  def size(); end

  def top(lines, dest=T.unsafe(nil)); end

  def uid=(uid); end

  def uidl(); end

  def unique_id(); end
end

class Net::POPMail
end

Net::POPSession = Net::POP3

Net::ProtocRetryError = Net::ProtoRetriableError

Net::SMTPSession = Net::SMTP

class NilClass
  include ::JSON::Ext::Generator::GeneratorMethods::NilClass
end

module Nokogiri
  LIBXML_ICONV_ENABLED = ::T.let(nil, ::T.untyped)
  LIBXML_PARSER_VERSION = ::T.let(nil, ::T.untyped)
  LIBXML_VERSION = ::T.let(nil, ::T.untyped)
  NOKOGIRI_LIBXML2_PATCHES = ::T.let(nil, ::T.untyped)
  NOKOGIRI_LIBXML2_PATH = ::T.let(nil, ::T.untyped)
  NOKOGIRI_LIBXSLT_PATCHES = ::T.let(nil, ::T.untyped)
  NOKOGIRI_LIBXSLT_PATH = ::T.let(nil, ::T.untyped)
  NOKOGIRI_USE_PACKAGED_LIBRARIES = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  VERSION_INFO = ::T.let(nil, ::T.untyped)
end

class Nokogiri::CSS::Node
  ALLOW_COMBINATOR_ON_SELF = ::T.let(nil, ::T.untyped)
end

class Nokogiri::CSS::Parser
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
end

module Nokogiri::Decorators::Slop
  XPATH_PREFIX = ::T.let(nil, ::T.untyped)
end

module Nokogiri::HTML
  NamedCharacters = ::T.let(nil, ::T.untyped)
end

class Nokogiri::HTML::ElementDescription
  ACTION_ATTR = ::T.let(nil, ::T.untyped)
  ALIGN_ATTR = ::T.let(nil, ::T.untyped)
  ALT_ATTR = ::T.let(nil, ::T.untyped)
  APPLET_ATTRS = ::T.let(nil, ::T.untyped)
  AREA_ATTRS = ::T.let(nil, ::T.untyped)
  ATTRS = ::T.let(nil, ::T.untyped)
  A_ATTRS = ::T.let(nil, ::T.untyped)
  BASEFONT_ATTRS = ::T.let(nil, ::T.untyped)
  BGCOLOR_ATTR = ::T.let(nil, ::T.untyped)
  BLOCK = ::T.let(nil, ::T.untyped)
  BLOCKLI_ELT = ::T.let(nil, ::T.untyped)
  BODY_ATTRS = ::T.let(nil, ::T.untyped)
  BODY_CONTENTS = ::T.let(nil, ::T.untyped)
  BODY_DEPR = ::T.let(nil, ::T.untyped)
  BUTTON_ATTRS = ::T.let(nil, ::T.untyped)
  CELLHALIGN = ::T.let(nil, ::T.untyped)
  CELLVALIGN = ::T.let(nil, ::T.untyped)
  CLEAR_ATTRS = ::T.let(nil, ::T.untyped)
  COL_ATTRS = ::T.let(nil, ::T.untyped)
  COL_ELT = ::T.let(nil, ::T.untyped)
  COMPACT_ATTR = ::T.let(nil, ::T.untyped)
  COMPACT_ATTRS = ::T.let(nil, ::T.untyped)
  CONTENT_ATTR = ::T.let(nil, ::T.untyped)
  COREATTRS = ::T.let(nil, ::T.untyped)
  CORE_ATTRS = ::T.let(nil, ::T.untyped)
  CORE_I18N_ATTRS = ::T.let(nil, ::T.untyped)
  DIR_ATTR = ::T.let(nil, ::T.untyped)
  DL_CONTENTS = ::T.let(nil, ::T.untyped)
  DefaultDescriptions = ::T.let(nil, ::T.untyped)
  EDIT_ATTRS = ::T.let(nil, ::T.untyped)
  EMBED_ATTRS = ::T.let(nil, ::T.untyped)
  EMPTY = ::T.let(nil, ::T.untyped)
  EVENTS = ::T.let(nil, ::T.untyped)
  FIELDSET_CONTENTS = ::T.let(nil, ::T.untyped)
  FLOW = ::T.let(nil, ::T.untyped)
  FLOW_PARAM = ::T.let(nil, ::T.untyped)
  FONTSTYLE = ::T.let(nil, ::T.untyped)
  FONT_ATTRS = ::T.let(nil, ::T.untyped)
  FORMCTRL = ::T.let(nil, ::T.untyped)
  FORM_ATTRS = ::T.let(nil, ::T.untyped)
  FORM_CONTENTS = ::T.let(nil, ::T.untyped)
  FRAMESET_ATTRS = ::T.let(nil, ::T.untyped)
  FRAMESET_CONTENTS = ::T.let(nil, ::T.untyped)
  FRAME_ATTRS = ::T.let(nil, ::T.untyped)
  HEADING = ::T.let(nil, ::T.untyped)
  HEAD_ATTRS = ::T.let(nil, ::T.untyped)
  HEAD_CONTENTS = ::T.let(nil, ::T.untyped)
  HREF_ATTRS = ::T.let(nil, ::T.untyped)
  HR_DEPR = ::T.let(nil, ::T.untyped)
  HTML_ATTRS = ::T.let(nil, ::T.untyped)
  HTML_CDATA = ::T.let(nil, ::T.untyped)
  HTML_CONTENT = ::T.let(nil, ::T.untyped)
  HTML_FLOW = ::T.let(nil, ::T.untyped)
  HTML_INLINE = ::T.let(nil, ::T.untyped)
  HTML_PCDATA = ::T.let(nil, ::T.untyped)
  I18N = ::T.let(nil, ::T.untyped)
  I18N_ATTRS = ::T.let(nil, ::T.untyped)
  IFRAME_ATTRS = ::T.let(nil, ::T.untyped)
  IMG_ATTRS = ::T.let(nil, ::T.untyped)
  INLINE = ::T.let(nil, ::T.untyped)
  INLINE_P = ::T.let(nil, ::T.untyped)
  INPUT_ATTRS = ::T.let(nil, ::T.untyped)
  LABEL_ATTR = ::T.let(nil, ::T.untyped)
  LABEL_ATTRS = ::T.let(nil, ::T.untyped)
  LANGUAGE_ATTR = ::T.let(nil, ::T.untyped)
  LEGEND_ATTRS = ::T.let(nil, ::T.untyped)
  LINK_ATTRS = ::T.let(nil, ::T.untyped)
  LIST = ::T.let(nil, ::T.untyped)
  LI_ELT = ::T.let(nil, ::T.untyped)
  MAP_CONTENTS = ::T.let(nil, ::T.untyped)
  META_ATTRS = ::T.let(nil, ::T.untyped)
  MODIFIER = ::T.let(nil, ::T.untyped)
  NAME_ATTR = ::T.let(nil, ::T.untyped)
  NOFRAMES_CONTENT = ::T.let(nil, ::T.untyped)
  OBJECT_ATTRS = ::T.let(nil, ::T.untyped)
  OBJECT_CONTENTS = ::T.let(nil, ::T.untyped)
  OBJECT_DEPR = ::T.let(nil, ::T.untyped)
  OL_ATTRS = ::T.let(nil, ::T.untyped)
  OPTGROUP_ATTRS = ::T.let(nil, ::T.untyped)
  OPTION_ATTRS = ::T.let(nil, ::T.untyped)
  OPTION_ELT = ::T.let(nil, ::T.untyped)
  PARAM_ATTRS = ::T.let(nil, ::T.untyped)
  PCDATA = ::T.let(nil, ::T.untyped)
  PHRASE = ::T.let(nil, ::T.untyped)
  PRE_CONTENT = ::T.let(nil, ::T.untyped)
  PROMPT_ATTRS = ::T.let(nil, ::T.untyped)
  QUOTE_ATTRS = ::T.let(nil, ::T.untyped)
  ROWS_COLS_ATTR = ::T.let(nil, ::T.untyped)
  SCRIPT_ATTRS = ::T.let(nil, ::T.untyped)
  SELECT_ATTRS = ::T.let(nil, ::T.untyped)
  SELECT_CONTENT = ::T.let(nil, ::T.untyped)
  SPECIAL = ::T.let(nil, ::T.untyped)
  SRC_ALT_ATTRS = ::T.let(nil, ::T.untyped)
  STYLE_ATTRS = ::T.let(nil, ::T.untyped)
  TABLE_ATTRS = ::T.let(nil, ::T.untyped)
  TABLE_CONTENTS = ::T.let(nil, ::T.untyped)
  TABLE_DEPR = ::T.let(nil, ::T.untyped)
  TALIGN_ATTRS = ::T.let(nil, ::T.untyped)
  TARGET_ATTR = ::T.let(nil, ::T.untyped)
  TEXTAREA_ATTRS = ::T.let(nil, ::T.untyped)
  TH_TD_ATTR = ::T.let(nil, ::T.untyped)
  TH_TD_DEPR = ::T.let(nil, ::T.untyped)
  TR_CONTENTS = ::T.let(nil, ::T.untyped)
  TR_ELT = ::T.let(nil, ::T.untyped)
  TYPE_ATTR = ::T.let(nil, ::T.untyped)
  UL_DEPR = ::T.let(nil, ::T.untyped)
  VERSION_ATTR = ::T.let(nil, ::T.untyped)
  WIDTH_ATTR = ::T.let(nil, ::T.untyped)
end

Nokogiri::HTML::ElementDescription::Desc = Struct::HTMLElementDescription

module Nokogiri::XML
  XML_C14N_1_0 = ::T.let(nil, ::T.untyped)
  XML_C14N_1_1 = ::T.let(nil, ::T.untyped)
  XML_C14N_EXCLUSIVE_1_0 = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::Document
  IMPLIED_XPATH_CONTEXTS = ::T.let(nil, ::T.untyped)
  NCNAME_CHAR = ::T.let(nil, ::T.untyped)
  NCNAME_RE = ::T.let(nil, ::T.untyped)
  NCNAME_START_CHAR = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::Element
end

class Nokogiri::XML::Element
end

class Nokogiri::XML::ElementContent
  ELEMENT = ::T.let(nil, ::T.untyped)
  MULT = ::T.let(nil, ::T.untyped)
  ONCE = ::T.let(nil, ::T.untyped)
  OPT = ::T.let(nil, ::T.untyped)
  OR = ::T.let(nil, ::T.untyped)
  PCDATA = ::T.let(nil, ::T.untyped)
  PLUS = ::T.let(nil, ::T.untyped)
  SEQ = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::EntityDecl
  EXTERNAL_GENERAL_PARSED = ::T.let(nil, ::T.untyped)
  EXTERNAL_GENERAL_UNPARSED = ::T.let(nil, ::T.untyped)
  EXTERNAL_PARAMETER = ::T.let(nil, ::T.untyped)
  INTERNAL_GENERAL = ::T.let(nil, ::T.untyped)
  INTERNAL_PARAMETER = ::T.let(nil, ::T.untyped)
  INTERNAL_PREDEFINED = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::Node
  ATTRIBUTE_DECL = ::T.let(nil, ::T.untyped)
  ATTRIBUTE_NODE = ::T.let(nil, ::T.untyped)
  CDATA_SECTION_NODE = ::T.let(nil, ::T.untyped)
  COMMENT_NODE = ::T.let(nil, ::T.untyped)
  DOCB_DOCUMENT_NODE = ::T.let(nil, ::T.untyped)
  DOCUMENT_FRAG_NODE = ::T.let(nil, ::T.untyped)
  DOCUMENT_NODE = ::T.let(nil, ::T.untyped)
  DOCUMENT_TYPE_NODE = ::T.let(nil, ::T.untyped)
  DTD_NODE = ::T.let(nil, ::T.untyped)
  ELEMENT_DECL = ::T.let(nil, ::T.untyped)
  ELEMENT_NODE = ::T.let(nil, ::T.untyped)
  ENTITY_DECL = ::T.let(nil, ::T.untyped)
  ENTITY_NODE = ::T.let(nil, ::T.untyped)
  ENTITY_REF_NODE = ::T.let(nil, ::T.untyped)
  HTML_DOCUMENT_NODE = ::T.let(nil, ::T.untyped)
  IMPLIED_XPATH_CONTEXTS = ::T.let(nil, ::T.untyped)
  NAMESPACE_DECL = ::T.let(nil, ::T.untyped)
  NOTATION_NODE = ::T.let(nil, ::T.untyped)
  PI_NODE = ::T.let(nil, ::T.untyped)
  TEXT_NODE = ::T.let(nil, ::T.untyped)
  XINCLUDE_END = ::T.let(nil, ::T.untyped)
  XINCLUDE_START = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::NodeSet
  IMPLIED_XPATH_CONTEXTS = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::ParseOptions
  COMPACT = ::T.let(nil, ::T.untyped)
  DEFAULT_HTML = ::T.let(nil, ::T.untyped)
  DEFAULT_XML = ::T.let(nil, ::T.untyped)
  DTDATTR = ::T.let(nil, ::T.untyped)
  DTDLOAD = ::T.let(nil, ::T.untyped)
  DTDVALID = ::T.let(nil, ::T.untyped)
  HUGE = ::T.let(nil, ::T.untyped)
  NOBASEFIX = ::T.let(nil, ::T.untyped)
  NOBLANKS = ::T.let(nil, ::T.untyped)
  NOCDATA = ::T.let(nil, ::T.untyped)
  NODICT = ::T.let(nil, ::T.untyped)
  NOENT = ::T.let(nil, ::T.untyped)
  NOERROR = ::T.let(nil, ::T.untyped)
  NONET = ::T.let(nil, ::T.untyped)
  NOWARNING = ::T.let(nil, ::T.untyped)
  NOXINCNODE = ::T.let(nil, ::T.untyped)
  NSCLEAN = ::T.let(nil, ::T.untyped)
  OLD10 = ::T.let(nil, ::T.untyped)
  PEDANTIC = ::T.let(nil, ::T.untyped)
  RECOVER = ::T.let(nil, ::T.untyped)
  SAX1 = ::T.let(nil, ::T.untyped)
  STRICT = ::T.let(nil, ::T.untyped)
  XINCLUDE = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::Reader
  TYPE_ATTRIBUTE = ::T.let(nil, ::T.untyped)
  TYPE_CDATA = ::T.let(nil, ::T.untyped)
  TYPE_COMMENT = ::T.let(nil, ::T.untyped)
  TYPE_DOCUMENT = ::T.let(nil, ::T.untyped)
  TYPE_DOCUMENT_FRAGMENT = ::T.let(nil, ::T.untyped)
  TYPE_DOCUMENT_TYPE = ::T.let(nil, ::T.untyped)
  TYPE_ELEMENT = ::T.let(nil, ::T.untyped)
  TYPE_END_ELEMENT = ::T.let(nil, ::T.untyped)
  TYPE_END_ENTITY = ::T.let(nil, ::T.untyped)
  TYPE_ENTITY = ::T.let(nil, ::T.untyped)
  TYPE_ENTITY_REFERENCE = ::T.let(nil, ::T.untyped)
  TYPE_NONE = ::T.let(nil, ::T.untyped)
  TYPE_NOTATION = ::T.let(nil, ::T.untyped)
  TYPE_PROCESSING_INSTRUCTION = ::T.let(nil, ::T.untyped)
  TYPE_SIGNIFICANT_WHITESPACE = ::T.let(nil, ::T.untyped)
  TYPE_TEXT = ::T.let(nil, ::T.untyped)
  TYPE_WHITESPACE = ::T.let(nil, ::T.untyped)
  TYPE_XML_DECLARATION = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::SAX::Parser
  ENCODINGS = ::T.let(nil, ::T.untyped)
end

module Nokogiri::XML::Searchable
  LOOKS_LIKE_XPATH = ::T.let(nil, ::T.untyped)
end

class Object
  include ::JSON::Ext::Generator::GeneratorMethods::Object
  include ::PP::ObjectMixin
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def to_yaml(options=T.unsafe(nil)); end
  ARGF = ::T.let(nil, ::T.untyped)
  ARGV = ::T.let(nil, ::T.untyped)
  CROSS_COMPILING = ::T.let(nil, ::T.untyped)
  ENV = ::T.let(nil, ::T.untyped)
  RANSACK_FORM_BUILDER = ::T.let(nil, ::T.untyped)
  RUBY_COPYRIGHT = ::T.let(nil, ::T.untyped)
  RUBY_DESCRIPTION = ::T.let(nil, ::T.untyped)
  RUBY_ENGINE = ::T.let(nil, ::T.untyped)
  RUBY_ENGINE_VERSION = ::T.let(nil, ::T.untyped)
  RUBY_PATCHLEVEL = ::T.let(nil, ::T.untyped)
  RUBY_PLATFORM = ::T.let(nil, ::T.untyped)
  RUBY_RELEASE_DATE = ::T.let(nil, ::T.untyped)
  RUBY_REVISION = ::T.let(nil, ::T.untyped)
  RUBY_VERSION = ::T.let(nil, ::T.untyped)
  STDERR = ::T.let(nil, ::T.untyped)
  STDIN = ::T.let(nil, ::T.untyped)
  STDOUT = ::T.let(nil, ::T.untyped)
  TOPLEVEL_BINDING = ::T.let(nil, ::T.untyped)
end

class Object
  def self.yaml_tag(url); end
end

class OpDay
  def after_add_for_day_ingredients(); end

  def after_add_for_day_ingredients=(val); end

  def after_add_for_day_ingredients?(); end

  def after_remove_for_day_ingredients(); end

  def after_remove_for_day_ingredients=(val); end

  def after_remove_for_day_ingredients?(); end

  def autosave_associated_records_for_day_ingredients(*args); end

  def before_add_for_day_ingredients(); end

  def before_add_for_day_ingredients=(val); end

  def before_add_for_day_ingredients?(); end

  def before_remove_for_day_ingredients(); end

  def before_remove_for_day_ingredients=(val); end

  def before_remove_for_day_ingredients?(); end

  def validate_associated_records_for_day_ingredients(*args); end
end

class OpDay::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::OpDay::GeneratedRelationMethods
end

class OpDay::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::OpDay::GeneratedRelationMethods
end

class OpDay::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::OpDay::GeneratedRelationMethods
end

module OpDay::GeneratedAssociationMethods
  def day_ingredient_ids=(ids); end
end

module OpDay::GeneratedRelationMethods
end

module OpDay::GeneratedRelationMethods
end

class OpDay
  def self.after_add_for_day_ingredients(); end

  def self.after_add_for_day_ingredients=(val); end

  def self.after_add_for_day_ingredients?(); end

  def self.after_remove_for_day_ingredients(); end

  def self.after_remove_for_day_ingredients=(val); end

  def self.after_remove_for_day_ingredients?(); end

  def self.before_add_for_day_ingredients(); end

  def self.before_add_for_day_ingredients=(val); end

  def self.before_add_for_day_ingredients?(); end

  def self.before_remove_for_day_ingredients(); end

  def self.before_remove_for_day_ingredients=(val); end

  def self.before_remove_for_day_ingredients?(); end
end

class OpenSSL::ASN1::ASN1Data
  def indefinite_length(); end

  def indefinite_length=(indefinite_length); end
end

class OpenSSL::BN
  def +@(); end

  def -@(); end

  def /(_); end

  def negative?(); end
end

module OpenSSL::Buffering
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
end

module OpenSSL::KDF
end

class OpenSSL::KDF::KDFError
end

class OpenSSL::KDF::KDFError
end

module OpenSSL::KDF
  def self.hkdf(*_); end

  def self.pbkdf2_hmac(*_); end

  def self.scrypt(*_); end
end

class OpenSSL::OCSP::Request
  def signed?(); end
end

OpenSSL::PKCS7::Signer = OpenSSL::PKCS7::SignerInfo

class OpenSSL::PKey::EC
  EXPLICIT_CURVE = ::T.let(nil, ::T.untyped)
end

class OpenSSL::PKey::EC::Point
  def to_octet_string(_); end
end

module OpenSSL::SSL
  OP_ALLOW_NO_DHE_KEX = ::T.let(nil, ::T.untyped)
  OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION = ::T.let(nil, ::T.untyped)
  OP_CRYPTOPRO_TLSEXT_BUG = ::T.let(nil, ::T.untyped)
  OP_LEGACY_SERVER_CONNECT = ::T.let(nil, ::T.untyped)
  OP_NO_ENCRYPT_THEN_MAC = ::T.let(nil, ::T.untyped)
  OP_NO_RENEGOTIATION = ::T.let(nil, ::T.untyped)
  OP_NO_TLSv1_3 = ::T.let(nil, ::T.untyped)
  OP_SAFARI_ECDHE_ECDSA_BUG = ::T.let(nil, ::T.untyped)
  OP_TLSEXT_PADDING = ::T.let(nil, ::T.untyped)
  SSL2_VERSION = ::T.let(nil, ::T.untyped)
  SSL3_VERSION = ::T.let(nil, ::T.untyped)
  TLS1_1_VERSION = ::T.let(nil, ::T.untyped)
  TLS1_2_VERSION = ::T.let(nil, ::T.untyped)
  TLS1_3_VERSION = ::T.let(nil, ::T.untyped)
  TLS1_VERSION = ::T.let(nil, ::T.untyped)
end

module OpenSSL::X509
  V_FLAG_NO_CHECK_TIME = ::T.let(nil, ::T.untyped)
  V_FLAG_TRUSTED_FIRST = ::T.let(nil, ::T.untyped)
end

class OpenSSL::X509::Attribute
  def ==(other); end
end

class OpenSSL::X509::CRL
  def ==(other); end
end

class OpenSSL::X509::Extension
  def ==(other); end
end

class OpenSSL::X509::Name
  def to_utf8(); end
end

class OpenSSL::X509::Request
  def ==(other); end
end

class OpenSSL::X509::Revoked
  def ==(other); end

  def to_der(); end
end

module OpenSSL
  def self.fips_mode(); end
end

module OrmAdapter
  VERSION = ::T.let(nil, ::T.untyped)
end

class OrmAdapter::ActiveRecord
  def conditions_to_fields(conditions); end

  def construct_relation(relation, options); end

  def order_clause(order); end
end

class OrmAdapter::ActiveRecord
end

class OrmAdapter::Base
  def column_names(); end

  def create!(attributes=T.unsafe(nil)); end

  def destroy(object); end

  def extract_conditions!(options=T.unsafe(nil)); end

  def find_all(options=T.unsafe(nil)); end

  def find_first(options=T.unsafe(nil)); end

  def get(id); end

  def get!(id); end

  def initialize(klass); end

  def klass(); end

  def normalize_order(order); end

  def valid_object?(object); end

  def wrap_key(key); end
end

class OrmAdapter::Base
  def self.inherited(adapter); end
end

class OrmAdapter::NotSupportedError
end

class OrmAdapter::NotSupportedError
end

module OrmAdapter::ToAdapter
  def to_adapter(); end
end

module OrmAdapter::ToAdapter
end

module OrmAdapter
  def self.adapters(); end
end

module PG
  include ::PG::Constants
  ERROR_CLASSES = ::T.let(nil, ::T.untyped)
  REVISION = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class PG::ActiveSqlTransaction
end

class PG::ActiveSqlTransaction
end

class PG::AdminShutdown
end

class PG::AdminShutdown
end

class PG::AmbiguousAlias
end

class PG::AmbiguousAlias
end

class PG::AmbiguousColumn
end

class PG::AmbiguousColumn
end

class PG::AmbiguousFunction
end

class PG::AmbiguousFunction
end

class PG::AmbiguousParameter
end

class PG::AmbiguousParameter
end

class PG::ArraySubscriptError
end

class PG::ArraySubscriptError
end

class PG::AssertFailure
end

class PG::AssertFailure
end

class PG::BadCopyFileFormat
end

class PG::BadCopyFileFormat
end

class PG::BasicTypeMapBasedOnResult
  include ::PG::BasicTypeRegistry
  def initialize(connection); end
end

class PG::BasicTypeMapBasedOnResult
end

class PG::BasicTypeMapForQueries
  include ::PG::BasicTypeRegistry
  def encode_array_as(); end

  def encode_array_as=(pg_type); end

  def initialize(connection); end
  DEFAULT_ARRAY_TYPE_MAP = ::T.let(nil, ::T.untyped)
  DEFAULT_TYPE_MAP = ::T.let(nil, ::T.untyped)
end

class PG::BasicTypeMapForQueries
end

class PG::BasicTypeMapForResults
  include ::PG::BasicTypeRegistry
  def initialize(connection); end
end

class PG::BasicTypeMapForResults::WarningTypeMap
  def initialize(typenames); end

  def typecast_result_value(result, _tuple, field); end
end

class PG::BasicTypeMapForResults::WarningTypeMap
end

class PG::BasicTypeMapForResults
end

module PG::BasicTypeRegistry
  def check_format_and_direction(format, direction); end
  CODERS_BY_NAME = ::T.let(nil, ::T.untyped)
  ValidDirections = ::T.let(nil, ::T.untyped)
  ValidFormats = ::T.let(nil, ::T.untyped)
end

class PG::BasicTypeRegistry::CoderMap
  def coder_by_name(name); end

  def coder_by_oid(oid); end

  def coders(); end

  def coders_by_name(); end

  def coders_by_oid(); end

  def initialize(result, coders_by_name, format, arraycoder); end

  def typenames_by_oid(); end
  DONT_QUOTE_TYPES = ::T.let(nil, ::T.untyped)
end

class PG::BasicTypeRegistry::CoderMap
end

module PG::BasicTypeRegistry
  def self.alias_type(format, new, old); end

  def self.register_coder(coder); end

  def self.register_type(format, name, encoder_class, decoder_class); end
end

module PG::BinaryDecoder
end

class PG::BinaryDecoder::Boolean
  include ::PG::Coder::BinaryFormatting
  def decode(*_); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryDecoder::Boolean
end

class PG::BinaryDecoder::Bytea
  include ::PG::Coder::BinaryFormatting
  def decode(*_); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryDecoder::Bytea
end

class PG::BinaryDecoder::Float
  include ::PG::Coder::BinaryFormatting
  def decode(*_); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryDecoder::Float
end

class PG::BinaryDecoder::Integer
  include ::PG::Coder::BinaryFormatting
  def decode(*_); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryDecoder::Integer
end

class PG::BinaryDecoder::String
  include ::PG::Coder::BinaryFormatting
  def decode(*_); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryDecoder::String
end

class PG::BinaryDecoder::Timestamp
  include ::PG::Coder::BinaryFormatting
  def decode(*_); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryDecoder::Timestamp
end

class PG::BinaryDecoder::TimestampLocal
end

class PG::BinaryDecoder::TimestampLocal
end

class PG::BinaryDecoder::TimestampUtc
end

class PG::BinaryDecoder::TimestampUtc
end

class PG::BinaryDecoder::TimestampUtcToLocal
end

class PG::BinaryDecoder::TimestampUtcToLocal
end

class PG::BinaryDecoder::ToBase64
  include ::PG::Coder::BinaryFormatting
  def decode(*_); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryDecoder::ToBase64
end

module PG::BinaryDecoder
end

module PG::BinaryEncoder
end

class PG::BinaryEncoder::Boolean
  include ::PG::Coder::BinaryFormatting
  def encode(*_); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryEncoder::Boolean
end

class PG::BinaryEncoder::Bytea
  include ::PG::Coder::BinaryFormatting
  def encode(*_); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryEncoder::Bytea
end

class PG::BinaryEncoder::FromBase64
  include ::PG::Coder::BinaryFormatting
  def encode(*_); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryEncoder::FromBase64
end

class PG::BinaryEncoder::Int2
  include ::PG::Coder::BinaryFormatting
  def encode(*_); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryEncoder::Int2
end

class PG::BinaryEncoder::Int4
  include ::PG::Coder::BinaryFormatting
  def encode(*_); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryEncoder::Int4
end

class PG::BinaryEncoder::Int8
  include ::PG::Coder::BinaryFormatting
  def encode(*_); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryEncoder::Int8
end

class PG::BinaryEncoder::String
  include ::PG::Coder::BinaryFormatting
  def encode(*_); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::BinaryEncoder::String
end

module PG::BinaryEncoder
end

class PG::BranchTransactionAlreadyActive
end

class PG::BranchTransactionAlreadyActive
end

class PG::CannotCoerce
end

class PG::CannotCoerce
end

class PG::CannotConnectNow
end

class PG::CannotConnectNow
end

class PG::CantChangeRuntimeParam
end

class PG::CantChangeRuntimeParam
end

class PG::CardinalityViolation
end

class PG::CardinalityViolation
end

class PG::CaseNotFound
end

class PG::CaseNotFound
end

class PG::CharacterNotInRepertoire
end

class PG::CharacterNotInRepertoire
end

class PG::CheckViolation
end

class PG::CheckViolation
end

class PG::Coder
  def ==(v); end

  def flags(); end

  def flags=(flags); end

  def format(); end

  def format=(format); end

  def initialize(params=T.unsafe(nil)); end

  def inspect_short(); end

  def marshal_dump(); end

  def marshal_load(str); end

  def name(); end

  def name=(name); end

  def oid(); end

  def oid=(oid); end

  def to_h(); end
  FORMAT_ERROR_MASK = ::T.let(nil, ::T.untyped)
  FORMAT_ERROR_TO_PARTIAL = ::T.let(nil, ::T.untyped)
  FORMAT_ERROR_TO_RAISE = ::T.let(nil, ::T.untyped)
  FORMAT_ERROR_TO_STRING = ::T.let(nil, ::T.untyped)
  TIMESTAMP_APP_LOCAL = ::T.let(nil, ::T.untyped)
  TIMESTAMP_APP_UTC = ::T.let(nil, ::T.untyped)
  TIMESTAMP_DB_LOCAL = ::T.let(nil, ::T.untyped)
  TIMESTAMP_DB_UTC = ::T.let(nil, ::T.untyped)
end

module PG::Coder::BinaryFormatting
  def initialize(params=T.unsafe(nil)); end
  Params = ::T.let(nil, ::T.untyped)
end

module PG::Coder::BinaryFormatting
end

class PG::Coder
end

class PG::CollationMismatch
end

class PG::CollationMismatch
end

class PG::CompositeCoder
  def delimiter(); end

  def delimiter=(delimiter); end

  def elements_type(); end

  def elements_type=(elements_type); end

  def needs_quotation=(needs_quotation); end

  def needs_quotation?(); end
end

class PG::CompositeCoder
end

class PG::CompositeDecoder
end

class PG::CompositeDecoder
end

class PG::CompositeEncoder
end

class PG::CompositeEncoder
end

class PG::ConfigFileError
end

class PG::ConfigFileError
end

class PG::ConfigurationLimitExceeded
end

class PG::ConfigurationLimitExceeded
end

class PG::Connection
  include ::PG::Constants
  def async_describe_portal(_); end

  def async_describe_prepared(_); end

  def async_exec(*_); end

  def async_exec_params(*_); end

  def async_exec_prepared(*_); end

  def async_prepare(*_); end

  def async_query(*_); end

  def backend_pid(); end

  def block(*_); end

  def cancel(); end

  def client_encoding=(client_encoding); end

  def close(); end

  def conndefaults(); end

  def conndefaults_hash(); end

  def connect_poll(); end

  def connection_needs_password(); end

  def connection_used_password(); end

  def conninfo(); end

  def conninfo_hash(); end

  def consume_input(); end

  def copy_data(sql, coder=T.unsafe(nil)); end

  def db(); end

  def decoder_for_get_copy_data(); end

  def decoder_for_get_copy_data=(decoder_for_get_copy_data); end

  def describe_portal(_); end

  def describe_prepared(_); end

  def discard_results(); end

  def encoder_for_put_copy_data(); end

  def encoder_for_put_copy_data=(encoder_for_put_copy_data); end

  def encrypt_password(*_); end

  def error_message(); end

  def escape(_); end

  def escape_bytea(_); end

  def escape_identifier(_); end

  def escape_literal(_); end

  def escape_string(_); end

  def exec_params(*_); end

  def exec_prepared(*_); end

  def external_encoding(); end

  def field_name_type(); end

  def field_name_type=(field_name_type); end

  def finish(); end

  def finished?(); end

  def flush(); end

  def get_client_encoding(); end

  def get_copy_data(*_); end

  def get_last_result(); end

  def get_result(); end

  def host(); end

  def initialize(*_); end

  def internal_encoding(); end

  def internal_encoding=(internal_encoding); end

  def is_busy(); end

  def isnonblocking(); end

  def lo_close(_); end

  def lo_creat(*_); end

  def lo_create(_); end

  def lo_export(_, _1); end

  def lo_import(_); end

  def lo_lseek(_, _1, _2); end

  def lo_open(*_); end

  def lo_read(_, _1); end

  def lo_seek(_, _1, _2); end

  def lo_tell(_); end

  def lo_truncate(_, _1); end

  def lo_unlink(_); end

  def lo_write(_, _1); end

  def loclose(_); end

  def locreat(*_); end

  def locreate(_); end

  def loexport(_, _1); end

  def loimport(_); end

  def lolseek(_, _1, _2); end

  def loopen(*_); end

  def loread(_, _1); end

  def loseek(_, _1, _2); end

  def lotell(_); end

  def lotruncate(_, _1); end

  def lounlink(_); end

  def lowrite(_, _1); end

  def make_empty_pgresult(_); end

  def nonblocking?(); end

  def notifies(); end

  def notifies_wait(*_); end

  def options(); end

  def parameter_status(_); end

  def pass(); end

  def port(); end

  def prepare(*_); end

  def protocol_version(); end

  def put_copy_data(*_); end

  def put_copy_end(*_); end

  def query(*_); end

  def quote_ident(_); end

  def reset(); end

  def reset_poll(); end

  def reset_start(); end

  def send_describe_portal(_); end

  def send_describe_prepared(_); end

  def send_prepare(*_); end

  def send_query(*_); end

  def send_query_params(*_); end

  def send_query_prepared(*_); end

  def server_version(); end

  def set_client_encoding(_); end

  def set_default_encoding(); end

  def set_error_context_visibility(_); end

  def set_error_verbosity(_); end

  def set_notice_processor(); end

  def set_notice_receiver(); end

  def set_single_row_mode(); end

  def setnonblocking(_); end

  def socket(); end

  def socket_io(); end

  def ssl_attribute(_); end

  def ssl_attribute_names(); end

  def ssl_attributes(); end

  def ssl_in_use?(); end

  def status(); end

  def sync_describe_portal(_); end

  def sync_describe_prepared(_); end

  def sync_exec(*_); end

  def sync_exec_params(*_); end

  def sync_exec_prepared(*_); end

  def sync_prepare(*_); end

  def trace(_); end

  def transaction(); end

  def transaction_status(); end

  def tty(); end

  def type_map_for_queries(); end

  def type_map_for_queries=(type_map_for_queries); end

  def type_map_for_results(); end

  def type_map_for_results=(type_map_for_results); end

  def unescape_bytea(_); end

  def untrace(); end

  def user(); end

  def wait_for_notify(*_); end
  CONNECT_ARGUMENT_ORDER = ::T.let(nil, ::T.untyped)
  REDIRECT_METHODS = ::T.let(nil, ::T.untyped)
end

class PG::Connection
  def self.async_api=(enable); end

  def self.conndefaults(); end

  def self.conndefaults_hash(); end

  def self.connect(*_); end

  def self.connect_start(*_); end

  def self.encrypt_password(_, _1); end

  def self.escape(_); end

  def self.escape_bytea(_); end

  def self.escape_string(_); end

  def self.isthreadsafe(); end

  def self.parse_connect_args(*args); end

  def self.ping(*_); end

  def self.quote_connstr(value); end

  def self.quote_ident(_); end

  def self.setdb(*_); end

  def self.setdblogin(*_); end

  def self.unescape_bytea(_); end
end

class PG::ConnectionBad
end

class PG::ConnectionBad
end

class PG::ConnectionDoesNotExist
end

class PG::ConnectionDoesNotExist
end

class PG::ConnectionException
end

class PG::ConnectionException
end

class PG::ConnectionFailure
end

class PG::ConnectionFailure
end

module PG::Constants
  CONNECTION_AUTH_OK = ::T.let(nil, ::T.untyped)
  CONNECTION_AWAITING_RESPONSE = ::T.let(nil, ::T.untyped)
  CONNECTION_BAD = ::T.let(nil, ::T.untyped)
  CONNECTION_MADE = ::T.let(nil, ::T.untyped)
  CONNECTION_NEEDED = ::T.let(nil, ::T.untyped)
  CONNECTION_OK = ::T.let(nil, ::T.untyped)
  CONNECTION_SETENV = ::T.let(nil, ::T.untyped)
  CONNECTION_SSL_STARTUP = ::T.let(nil, ::T.untyped)
  CONNECTION_STARTED = ::T.let(nil, ::T.untyped)
  INVALID_OID = ::T.let(nil, ::T.untyped)
  INV_READ = ::T.let(nil, ::T.untyped)
  INV_WRITE = ::T.let(nil, ::T.untyped)
  InvalidOid = ::T.let(nil, ::T.untyped)
  PGRES_BAD_RESPONSE = ::T.let(nil, ::T.untyped)
  PGRES_COMMAND_OK = ::T.let(nil, ::T.untyped)
  PGRES_COPY_BOTH = ::T.let(nil, ::T.untyped)
  PGRES_COPY_IN = ::T.let(nil, ::T.untyped)
  PGRES_COPY_OUT = ::T.let(nil, ::T.untyped)
  PGRES_EMPTY_QUERY = ::T.let(nil, ::T.untyped)
  PGRES_FATAL_ERROR = ::T.let(nil, ::T.untyped)
  PGRES_NONFATAL_ERROR = ::T.let(nil, ::T.untyped)
  PGRES_POLLING_FAILED = ::T.let(nil, ::T.untyped)
  PGRES_POLLING_OK = ::T.let(nil, ::T.untyped)
  PGRES_POLLING_READING = ::T.let(nil, ::T.untyped)
  PGRES_POLLING_WRITING = ::T.let(nil, ::T.untyped)
  PGRES_SINGLE_TUPLE = ::T.let(nil, ::T.untyped)
  PGRES_TUPLES_OK = ::T.let(nil, ::T.untyped)
  PG_DIAG_COLUMN_NAME = ::T.let(nil, ::T.untyped)
  PG_DIAG_CONSTRAINT_NAME = ::T.let(nil, ::T.untyped)
  PG_DIAG_CONTEXT = ::T.let(nil, ::T.untyped)
  PG_DIAG_DATATYPE_NAME = ::T.let(nil, ::T.untyped)
  PG_DIAG_INTERNAL_POSITION = ::T.let(nil, ::T.untyped)
  PG_DIAG_INTERNAL_QUERY = ::T.let(nil, ::T.untyped)
  PG_DIAG_MESSAGE_DETAIL = ::T.let(nil, ::T.untyped)
  PG_DIAG_MESSAGE_HINT = ::T.let(nil, ::T.untyped)
  PG_DIAG_MESSAGE_PRIMARY = ::T.let(nil, ::T.untyped)
  PG_DIAG_SCHEMA_NAME = ::T.let(nil, ::T.untyped)
  PG_DIAG_SEVERITY = ::T.let(nil, ::T.untyped)
  PG_DIAG_SEVERITY_NONLOCALIZED = ::T.let(nil, ::T.untyped)
  PG_DIAG_SOURCE_FILE = ::T.let(nil, ::T.untyped)
  PG_DIAG_SOURCE_FUNCTION = ::T.let(nil, ::T.untyped)
  PG_DIAG_SOURCE_LINE = ::T.let(nil, ::T.untyped)
  PG_DIAG_SQLSTATE = ::T.let(nil, ::T.untyped)
  PG_DIAG_STATEMENT_POSITION = ::T.let(nil, ::T.untyped)
  PG_DIAG_TABLE_NAME = ::T.let(nil, ::T.untyped)
  PQERRORS_DEFAULT = ::T.let(nil, ::T.untyped)
  PQERRORS_TERSE = ::T.let(nil, ::T.untyped)
  PQERRORS_VERBOSE = ::T.let(nil, ::T.untyped)
  PQPING_NO_ATTEMPT = ::T.let(nil, ::T.untyped)
  PQPING_NO_RESPONSE = ::T.let(nil, ::T.untyped)
  PQPING_OK = ::T.let(nil, ::T.untyped)
  PQPING_REJECT = ::T.let(nil, ::T.untyped)
  PQSHOW_CONTEXT_ALWAYS = ::T.let(nil, ::T.untyped)
  PQSHOW_CONTEXT_ERRORS = ::T.let(nil, ::T.untyped)
  PQSHOW_CONTEXT_NEVER = ::T.let(nil, ::T.untyped)
  PQTRANS_ACTIVE = ::T.let(nil, ::T.untyped)
  PQTRANS_IDLE = ::T.let(nil, ::T.untyped)
  PQTRANS_INERROR = ::T.let(nil, ::T.untyped)
  PQTRANS_INTRANS = ::T.let(nil, ::T.untyped)
  PQTRANS_UNKNOWN = ::T.let(nil, ::T.untyped)
  SEEK_CUR = ::T.let(nil, ::T.untyped)
  SEEK_END = ::T.let(nil, ::T.untyped)
  SEEK_SET = ::T.let(nil, ::T.untyped)
end

module PG::Constants
end

class PG::CopyCoder
  def delimiter(); end

  def delimiter=(delimiter); end

  def null_string(); end

  def null_string=(null_string); end

  def type_map(); end

  def type_map=(type_map); end
end

class PG::CopyCoder
end

class PG::CopyDecoder
  include ::PG::Coder::BinaryFormatting
end

class PG::CopyDecoder
end

class PG::CopyEncoder
  include ::PG::Coder::BinaryFormatting
end

class PG::CopyEncoder
end

class PG::CrashShutdown
end

class PG::CrashShutdown
end

class PG::DataCorrupted
end

class PG::DataCorrupted
end

class PG::DataException
end

class PG::DataException
end

class PG::DatabaseDropped
end

class PG::DatabaseDropped
end

class PG::DatatypeMismatch
end

class PG::DatatypeMismatch
end

class PG::DatetimeFieldOverflow
end

class PG::DatetimeFieldOverflow
end

class PG::DependentObjectsStillExist
end

class PG::DependentObjectsStillExist
end

class PG::DependentPrivilegeDescriptorsStillExist
end

class PG::DependentPrivilegeDescriptorsStillExist
end

class PG::DiagnosticsException
end

class PG::DiagnosticsException
end

class PG::DiskFull
end

class PG::DiskFull
end

class PG::DivisionByZero
end

class PG::DivisionByZero
end

class PG::DuplicateAlias
end

class PG::DuplicateAlias
end

class PG::DuplicateColumn
end

class PG::DuplicateColumn
end

class PG::DuplicateCursor
end

class PG::DuplicateCursor
end

class PG::DuplicateDatabase
end

class PG::DuplicateDatabase
end

class PG::DuplicateFile
end

class PG::DuplicateFile
end

class PG::DuplicateFunction
end

class PG::DuplicateFunction
end

class PG::DuplicateJsonObjectKeyValue
end

class PG::DuplicateJsonObjectKeyValue
end

class PG::DuplicateObject
end

class PG::DuplicateObject
end

class PG::DuplicatePstatement
end

class PG::DuplicatePstatement
end

class PG::DuplicateSchema
end

class PG::DuplicateSchema
end

class PG::DuplicateTable
end

class PG::DuplicateTable
end

class PG::EREContainingSqlNotPermitted
end

class PG::EREContainingSqlNotPermitted
end

class PG::EREModifyingSqlDataNotPermitted
end

class PG::EREModifyingSqlDataNotPermitted
end

class PG::EREProhibitedSqlStatementAttempted
end

class PG::EREProhibitedSqlStatementAttempted
end

class PG::EREReadingSqlDataNotPermitted
end

class PG::EREReadingSqlDataNotPermitted
end

class PG::ERIEEventTriggerProtocolViolated
end

class PG::ERIEEventTriggerProtocolViolated
end

class PG::ERIEInvalidSqlstateReturned
end

class PG::ERIEInvalidSqlstateReturned
end

class PG::ERIENullValueNotAllowed
end

class PG::ERIENullValueNotAllowed
end

class PG::ERIESrfProtocolViolated
end

class PG::ERIESrfProtocolViolated
end

class PG::ERIETriggerProtocolViolated
end

class PG::ERIETriggerProtocolViolated
end

class PG::Error
  def connection(); end

  def error(); end

  def result(); end
end

class PG::Error
end

class PG::ErrorInAssignment
end

class PG::ErrorInAssignment
end

class PG::EscapeCharacterConflict
end

class PG::EscapeCharacterConflict
end

class PG::ExclusionViolation
end

class PG::ExclusionViolation
end

class PG::ExternalRoutineException
end

class PG::ExternalRoutineException
end

class PG::ExternalRoutineInvocationException
end

class PG::ExternalRoutineInvocationException
end

class PG::FdwColumnNameNotFound
end

class PG::FdwColumnNameNotFound
end

class PG::FdwDynamicParameterValueNeeded
end

class PG::FdwDynamicParameterValueNeeded
end

class PG::FdwError
end

class PG::FdwError
end

class PG::FdwFunctionSequenceError
end

class PG::FdwFunctionSequenceError
end

class PG::FdwInconsistentDescriptorInformation
end

class PG::FdwInconsistentDescriptorInformation
end

class PG::FdwInvalidAttributeValue
end

class PG::FdwInvalidAttributeValue
end

class PG::FdwInvalidColumnName
end

class PG::FdwInvalidColumnName
end

class PG::FdwInvalidColumnNumber
end

class PG::FdwInvalidColumnNumber
end

class PG::FdwInvalidDataType
end

class PG::FdwInvalidDataType
end

class PG::FdwInvalidDataTypeDescriptors
end

class PG::FdwInvalidDataTypeDescriptors
end

class PG::FdwInvalidDescriptorFieldIdentifier
end

class PG::FdwInvalidDescriptorFieldIdentifier
end

class PG::FdwInvalidHandle
end

class PG::FdwInvalidHandle
end

class PG::FdwInvalidOptionIndex
end

class PG::FdwInvalidOptionIndex
end

class PG::FdwInvalidOptionName
end

class PG::FdwInvalidOptionName
end

class PG::FdwInvalidStringFormat
end

class PG::FdwInvalidStringFormat
end

class PG::FdwInvalidStringLengthOrBufferLength
end

class PG::FdwInvalidStringLengthOrBufferLength
end

class PG::FdwInvalidUseOfNullPointer
end

class PG::FdwInvalidUseOfNullPointer
end

class PG::FdwNoSchemas
end

class PG::FdwNoSchemas
end

class PG::FdwOptionNameNotFound
end

class PG::FdwOptionNameNotFound
end

class PG::FdwOutOfMemory
end

class PG::FdwOutOfMemory
end

class PG::FdwReplyHandle
end

class PG::FdwReplyHandle
end

class PG::FdwSchemaNotFound
end

class PG::FdwSchemaNotFound
end

class PG::FdwTableNotFound
end

class PG::FdwTableNotFound
end

class PG::FdwTooManyHandles
end

class PG::FdwTooManyHandles
end

class PG::FdwUnableToCreateExecution
end

class PG::FdwUnableToCreateExecution
end

class PG::FdwUnableToCreateReply
end

class PG::FdwUnableToCreateReply
end

class PG::FdwUnableToEstablishConnection
end

class PG::FdwUnableToEstablishConnection
end

class PG::FeatureNotSupported
end

class PG::FeatureNotSupported
end

class PG::FloatingPointException
end

class PG::FloatingPointException
end

class PG::ForeignKeyViolation
end

class PG::ForeignKeyViolation
end

class PG::GeneratedAlways
end

class PG::GeneratedAlways
end

class PG::GroupingError
end

class PG::GroupingError
end

class PG::HeldCursorRequiresSameIsolationLevel
end

class PG::HeldCursorRequiresSameIsolationLevel
end

class PG::IdleInTransactionSessionTimeout
end

class PG::IdleInTransactionSessionTimeout
end

class PG::InFailedSqlTransaction
end

class PG::InFailedSqlTransaction
end

class PG::InappropriateAccessModeForBranchTransaction
end

class PG::InappropriateAccessModeForBranchTransaction
end

class PG::InappropriateIsolationLevelForBranchTransaction
end

class PG::InappropriateIsolationLevelForBranchTransaction
end

class PG::IndeterminateCollation
end

class PG::IndeterminateCollation
end

class PG::IndeterminateDatatype
end

class PG::IndeterminateDatatype
end

class PG::IndexCorrupted
end

class PG::IndexCorrupted
end

class PG::IndicatorOverflow
end

class PG::IndicatorOverflow
end

class PG::InsufficientPrivilege
end

class PG::InsufficientPrivilege
end

class PG::InsufficientResources
end

class PG::InsufficientResources
end

class PG::IntegrityConstraintViolation
end

class PG::IntegrityConstraintViolation
end

class PG::InternalError
end

class PG::InternalError
end

class PG::IntervalFieldOverflow
end

class PG::IntervalFieldOverflow
end

class PG::InvalidArgumentForLog
end

class PG::InvalidArgumentForLog
end

class PG::InvalidArgumentForNthValue
end

class PG::InvalidArgumentForNthValue
end

class PG::InvalidArgumentForNtile
end

class PG::InvalidArgumentForNtile
end

class PG::InvalidArgumentForPowerFunction
end

class PG::InvalidArgumentForPowerFunction
end

class PG::InvalidArgumentForWidthBucketFunction
end

class PG::InvalidArgumentForWidthBucketFunction
end

class PG::InvalidAuthorizationSpecification
end

class PG::InvalidAuthorizationSpecification
end

class PG::InvalidBinaryRepresentation
end

class PG::InvalidBinaryRepresentation
end

class PG::InvalidCatalogName
end

class PG::InvalidCatalogName
end

class PG::InvalidChangeOfResultFields
end

class PG::InvalidChangeOfResultFields
end

class PG::InvalidCharacterValueForCast
end

class PG::InvalidCharacterValueForCast
end

class PG::InvalidColumnDefinition
end

class PG::InvalidColumnDefinition
end

class PG::InvalidColumnReference
end

class PG::InvalidColumnReference
end

class PG::InvalidCursorDefinition
end

class PG::InvalidCursorDefinition
end

class PG::InvalidCursorName
end

class PG::InvalidCursorName
end

class PG::InvalidCursorState
end

class PG::InvalidCursorState
end

class PG::InvalidDatabaseDefinition
end

class PG::InvalidDatabaseDefinition
end

class PG::InvalidDatetimeFormat
end

class PG::InvalidDatetimeFormat
end

class PG::InvalidEscapeCharacter
end

class PG::InvalidEscapeCharacter
end

class PG::InvalidEscapeOctet
end

class PG::InvalidEscapeOctet
end

class PG::InvalidEscapeSequence
end

class PG::InvalidEscapeSequence
end

class PG::InvalidForeignKey
end

class PG::InvalidForeignKey
end

class PG::InvalidFunctionDefinition
end

class PG::InvalidFunctionDefinition
end

class PG::InvalidGrantOperation
end

class PG::InvalidGrantOperation
end

class PG::InvalidGrantor
end

class PG::InvalidGrantor
end

class PG::InvalidIndicatorParameterValue
end

class PG::InvalidIndicatorParameterValue
end

class PG::InvalidJsonText
end

class PG::InvalidJsonText
end

class PG::InvalidName
end

class PG::InvalidName
end

class PG::InvalidObjectDefinition
end

class PG::InvalidObjectDefinition
end

class PG::InvalidParameterValue
end

class PG::InvalidParameterValue
end

class PG::InvalidPassword
end

class PG::InvalidPassword
end

class PG::InvalidPrecedingOrFollowingSize
end

class PG::InvalidPrecedingOrFollowingSize
end

class PG::InvalidPstatementDefinition
end

class PG::InvalidPstatementDefinition
end

class PG::InvalidRecursion
end

class PG::InvalidRecursion
end

class PG::InvalidRegularExpression
end

class PG::InvalidRegularExpression
end

class PG::InvalidResultStatus
end

class PG::InvalidResultStatus
end

class PG::InvalidRoleSpecification
end

class PG::InvalidRoleSpecification
end

class PG::InvalidRowCountInLimitClause
end

class PG::InvalidRowCountInLimitClause
end

class PG::InvalidRowCountInResultOffsetClause
end

class PG::InvalidRowCountInResultOffsetClause
end

class PG::InvalidSchemaDefinition
end

class PG::InvalidSchemaDefinition
end

class PG::InvalidSchemaName
end

class PG::InvalidSchemaName
end

class PG::InvalidSqlJsonSubscript
end

class PG::InvalidSqlJsonSubscript
end

class PG::InvalidSqlStatementName
end

class PG::InvalidSqlStatementName
end

class PG::InvalidTableDefinition
end

class PG::InvalidTableDefinition
end

class PG::InvalidTablesampleArgument
end

class PG::InvalidTablesampleArgument
end

class PG::InvalidTablesampleRepeat
end

class PG::InvalidTablesampleRepeat
end

class PG::InvalidTextRepresentation
end

class PG::InvalidTextRepresentation
end

class PG::InvalidTimeZoneDisplacementValue
end

class PG::InvalidTimeZoneDisplacementValue
end

class PG::InvalidTransactionInitiation
end

class PG::InvalidTransactionInitiation
end

class PG::InvalidTransactionState
end

class PG::InvalidTransactionState
end

class PG::InvalidTransactionTermination
end

class PG::InvalidTransactionTermination
end

class PG::InvalidUseOfEscapeCharacter
end

class PG::InvalidUseOfEscapeCharacter
end

class PG::InvalidXmlComment
end

class PG::InvalidXmlComment
end

class PG::InvalidXmlContent
end

class PG::InvalidXmlContent
end

class PG::InvalidXmlDocument
end

class PG::InvalidXmlDocument
end

class PG::InvalidXmlProcessingInstruction
end

class PG::InvalidXmlProcessingInstruction
end

class PG::IoError
end

class PG::IoError
end

class PG::LEInvalidSpecification
end

class PG::LEInvalidSpecification
end

class PG::LocatorException
end

class PG::LocatorException
end

class PG::LockFileExists
end

class PG::LockFileExists
end

class PG::LockNotAvailable
end

class PG::LockNotAvailable
end

class PG::MoreThanOneSqlJsonItem
end

class PG::MoreThanOneSqlJsonItem
end

class PG::MostSpecificTypeMismatch
end

class PG::MostSpecificTypeMismatch
end

class PG::NameTooLong
end

class PG::NameTooLong
end

class PG::NoActiveSqlTransaction
end

class PG::NoActiveSqlTransaction
end

class PG::NoActiveSqlTransactionForBranchTransaction
end

class PG::NoActiveSqlTransactionForBranchTransaction
end

class PG::NoDataFound
end

class PG::NoDataFound
end

class PG::NoResultError
end

class PG::NoResultError
end

class PG::NoSqlJsonItem
end

class PG::NoSqlJsonItem
end

class PG::NonNumericSqlJsonItem
end

class PG::NonNumericSqlJsonItem
end

class PG::NonUniqueKeysInAJsonObject
end

class PG::NonUniqueKeysInAJsonObject
end

class PG::NonstandardUseOfEscapeCharacter
end

class PG::NonstandardUseOfEscapeCharacter
end

class PG::NotAllCopyDataRetrieved
end

class PG::NotAllCopyDataRetrieved
end

class PG::NotAnXmlDocument
end

class PG::NotAnXmlDocument
end

class PG::NotNullViolation
end

class PG::NotNullViolation
end

class PG::NullValueNoIndicatorParameter
end

class PG::NullValueNoIndicatorParameter
end

class PG::NullValueNotAllowed
end

class PG::NullValueNotAllowed
end

class PG::NumericValueOutOfRange
end

class PG::NumericValueOutOfRange
end

class PG::ObjectInUse
end

class PG::ObjectInUse
end

class PG::ObjectNotInPrerequisiteState
end

class PG::ObjectNotInPrerequisiteState
end

class PG::OperatorIntervention
end

class PG::OperatorIntervention
end

class PG::OutOfMemory
end

class PG::OutOfMemory
end

class PG::PlpgsqlError
end

class PG::PlpgsqlError
end

class PG::ProgramLimitExceeded
end

class PG::ProgramLimitExceeded
end

class PG::ProtocolViolation
end

class PG::ProtocolViolation
end

class PG::QueryCanceled
end

class PG::QueryCanceled
end

class PG::RaiseException
end

class PG::RaiseException
end

class PG::ReadOnlySqlTransaction
end

class PG::ReadOnlySqlTransaction
end

class PG::RecordCoder
  def type_map(); end

  def type_map=(type_map); end
end

class PG::RecordCoder
end

class PG::RecordDecoder
end

class PG::RecordDecoder
end

class PG::RecordEncoder
end

class PG::RecordEncoder
end

class PG::ReservedName
end

class PG::ReservedName
end

class PG::RestrictViolation
end

class PG::RestrictViolation
end

class PG::Result
  include ::Enumerable
  include ::PG::Constants
  def [](_); end

  def autoclear?(); end

  def check(); end

  def check_result(); end

  def clear(); end

  def cleared?(); end

  def cmd_status(); end

  def cmd_tuples(); end

  def cmdtuples(); end

  def column_values(_); end

  def each(&blk); end

  def each_row(); end

  def error_field(_); end

  def error_message(); end

  def fformat(_); end

  def field_name_type(); end

  def field_name_type=(field_name_type); end

  def field_names_as(type); end

  def field_values(_); end

  def fields(); end

  def fmod(_); end

  def fname(_); end

  def fnumber(_); end

  def fsize(_); end

  def ftable(_); end

  def ftablecol(_); end

  def ftype(_); end

  def getisnull(_, _1); end

  def getlength(_, _1); end

  def getvalue(_, _1); end

  def map_types!(type_map); end

  def nfields(); end

  def nparams(); end

  def ntuples(); end

  def num_fields(); end

  def num_tuples(); end

  def oid_value(); end

  def paramtype(_); end

  def res_status(_); end

  def result_error_field(_); end

  def result_error_message(); end

  def result_status(); end

  def result_verbose_error_message(_, _1); end

  def stream_each(); end

  def stream_each_row(); end

  def stream_each_tuple(); end

  def tuple(_); end

  def tuple_values(_); end

  def type_map(); end

  def type_map=(type_map); end

  def values(); end

  def verbose_error_message(_, _1); end
end

class PG::Result
end

class PG::SEInvalidSpecification
end

class PG::SEInvalidSpecification
end

class PG::SREFunctionExecutedNoReturnStatement
end

class PG::SREFunctionExecutedNoReturnStatement
end

class PG::SREModifyingSqlDataNotPermitted
end

class PG::SREModifyingSqlDataNotPermitted
end

class PG::SREProhibitedSqlStatementAttempted
end

class PG::SREProhibitedSqlStatementAttempted
end

class PG::SREReadingSqlDataNotPermitted
end

class PG::SREReadingSqlDataNotPermitted
end

class PG::SavepointException
end

class PG::SavepointException
end

class PG::SchemaAndDataStatementMixingNotSupported
end

class PG::SchemaAndDataStatementMixingNotSupported
end

class PG::SequenceGeneratorLimitExceeded
end

class PG::SequenceGeneratorLimitExceeded
end

class PG::ServerError
end

class PG::ServerError
end

class PG::SimpleCoder
end

class PG::SimpleCoder
end

class PG::SimpleDecoder
end

class PG::SimpleDecoder
end

class PG::SimpleEncoder
end

class PG::SimpleEncoder
end

class PG::SingletonSqlJsonItemRequired
end

class PG::SingletonSqlJsonItemRequired
end

class PG::SnapshotTooOld
end

class PG::SnapshotTooOld
end

class PG::SqlJsonArrayNotFound
end

class PG::SqlJsonArrayNotFound
end

class PG::SqlJsonMemberNotFound
end

class PG::SqlJsonMemberNotFound
end

class PG::SqlJsonNumberNotFound
end

class PG::SqlJsonNumberNotFound
end

class PG::SqlJsonObjectNotFound
end

class PG::SqlJsonObjectNotFound
end

class PG::SqlJsonScalarRequired
end

class PG::SqlJsonScalarRequired
end

class PG::SqlRoutineException
end

class PG::SqlRoutineException
end

class PG::SqlStatementNotYetComplete
end

class PG::SqlStatementNotYetComplete
end

class PG::SqlclientUnableToEstablishSqlconnection
end

class PG::SqlclientUnableToEstablishSqlconnection
end

class PG::SqlserverRejectedEstablishmentOfSqlconnection
end

class PG::SqlserverRejectedEstablishmentOfSqlconnection
end

class PG::StackedDiagnosticsAccessedWithoutActiveHandler
end

class PG::StackedDiagnosticsAccessedWithoutActiveHandler
end

class PG::StatementTooComplex
end

class PG::StatementTooComplex
end

class PG::StringDataLengthMismatch
end

class PG::StringDataLengthMismatch
end

class PG::StringDataRightTruncation
end

class PG::StringDataRightTruncation
end

class PG::SubstringError
end

class PG::SubstringError
end

class PG::SyntaxError
end

class PG::SyntaxError
end

class PG::SyntaxErrorOrAccessRuleViolation
end

class PG::SyntaxErrorOrAccessRuleViolation
end

class PG::SystemError
end

class PG::SystemError
end

class PG::TRDeadlockDetected
end

class PG::TRDeadlockDetected
end

class PG::TRIntegrityConstraintViolation
end

class PG::TRIntegrityConstraintViolation
end

class PG::TRSerializationFailure
end

class PG::TRSerializationFailure
end

class PG::TRStatementCompletionUnknown
end

class PG::TRStatementCompletionUnknown
end

module PG::TextDecoder
end

class PG::TextDecoder::Array
  def decode(*_); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextDecoder::Array
end

class PG::TextDecoder::Boolean
  def decode(*_); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextDecoder::Boolean
end

class PG::TextDecoder::Bytea
  def decode(*_); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextDecoder::Bytea
end

class PG::TextDecoder::CopyRow
  def decode(*_); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextDecoder::CopyRow
end

class PG::TextDecoder::Date
  def decode(string, tuple=T.unsafe(nil), field=T.unsafe(nil)); end
end

class PG::TextDecoder::Date
end

class PG::TextDecoder::Float
  def decode(*_); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextDecoder::Float
end

class PG::TextDecoder::FromBase64
  def decode(*_); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextDecoder::FromBase64
end

class PG::TextDecoder::Identifier
  def decode(*_); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextDecoder::Identifier
end

class PG::TextDecoder::Inet
  def decode(*_); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextDecoder::Inet
end

class PG::TextDecoder::Integer
  def decode(*_); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextDecoder::Integer
end

class PG::TextDecoder::JSON
  def decode(string, tuple=T.unsafe(nil), field=T.unsafe(nil)); end
end

class PG::TextDecoder::JSON
end

class PG::TextDecoder::Numeric
  def decode(*_); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextDecoder::Numeric
end

class PG::TextDecoder::Record
  def decode(*_); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextDecoder::Record
end

class PG::TextDecoder::String
  def decode(*_); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextDecoder::String
end

class PG::TextDecoder::Timestamp
  def decode(*_); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextDecoder::Timestamp
end

class PG::TextDecoder::TimestampLocal
end

class PG::TextDecoder::TimestampLocal
end

class PG::TextDecoder::TimestampUtc
end

class PG::TextDecoder::TimestampUtc
end

class PG::TextDecoder::TimestampUtcToLocal
end

class PG::TextDecoder::TimestampUtcToLocal
end

PG::TextDecoder::TimestampWithTimeZone = PG::TextDecoder::Timestamp

PG::TextDecoder::TimestampWithoutTimeZone = PG::TextDecoder::TimestampLocal

module PG::TextDecoder
end

module PG::TextEncoder
end

class PG::TextEncoder::Array
  def encode(*_); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextEncoder::Array
end

class PG::TextEncoder::Boolean
  def encode(*_); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextEncoder::Boolean
end

class PG::TextEncoder::Bytea
  def encode(*_); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextEncoder::Bytea
end

class PG::TextEncoder::CopyRow
  def encode(*_); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextEncoder::CopyRow
end

class PG::TextEncoder::Date
  def encode(value); end
end

class PG::TextEncoder::Date
end

class PG::TextEncoder::Float
  def encode(*_); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextEncoder::Float
end

class PG::TextEncoder::Identifier
  def encode(*_); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextEncoder::Identifier
end

class PG::TextEncoder::Inet
  def encode(value); end
end

class PG::TextEncoder::Inet
end

class PG::TextEncoder::Integer
  def encode(*_); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextEncoder::Integer
end

class PG::TextEncoder::JSON
  def encode(value); end
end

class PG::TextEncoder::JSON
end

class PG::TextEncoder::Numeric
  def encode(*_); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextEncoder::Numeric
end

class PG::TextEncoder::QuotedLiteral
  def encode(*_); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextEncoder::QuotedLiteral
end

class PG::TextEncoder::Record
  def encode(*_); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextEncoder::Record
end

class PG::TextEncoder::String
  def encode(*_); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextEncoder::String
end

class PG::TextEncoder::TimestampUtc
  def encode(value); end
end

class PG::TextEncoder::TimestampUtc
end

class PG::TextEncoder::TimestampWithTimeZone
  def encode(value); end
end

class PG::TextEncoder::TimestampWithTimeZone
end

class PG::TextEncoder::TimestampWithoutTimeZone
  def encode(value); end
end

class PG::TextEncoder::TimestampWithoutTimeZone
end

class PG::TextEncoder::ToBase64
  def encode(*_); end
  CFUNC = ::T.let(nil, ::T.untyped)
end

class PG::TextEncoder::ToBase64
end

module PG::TextEncoder
end

class PG::TooManyArguments
end

class PG::TooManyArguments
end

class PG::TooManyColumns
end

class PG::TooManyColumns
end

class PG::TooManyConnections
end

class PG::TooManyConnections
end

class PG::TooManyJsonArrayElements
end

class PG::TooManyJsonArrayElements
end

class PG::TooManyJsonObjectMembers
end

class PG::TooManyJsonObjectMembers
end

class PG::TooManyRows
end

class PG::TooManyRows
end

class PG::TransactionResolutionUnknown
end

class PG::TransactionResolutionUnknown
end

class PG::TransactionRollback
end

class PG::TransactionRollback
end

class PG::TriggeredActionException
end

class PG::TriggeredActionException
end

class PG::TriggeredDataChangeViolation
end

class PG::TriggeredDataChangeViolation
end

class PG::TrimError
end

class PG::TrimError
end

class PG::Tuple
  include ::Enumerable
  def [](_); end

  def each(&blk); end

  def each_key(&block); end

  def each_value(); end

  def fetch(*_); end

  def has_key?(key); end

  def index(_); end

  def key?(key); end

  def keys(); end

  def length(); end

  def size(); end

  def values(); end
end

class PG::Tuple
end

class PG::TypeMap
end

module PG::TypeMap::DefaultTypeMappable
  def default_type_map(); end

  def default_type_map=(default_type_map); end

  def with_default_type_map(_); end
end

module PG::TypeMap::DefaultTypeMappable
end

class PG::TypeMap
end

class PG::TypeMapAllStrings
end

class PG::TypeMapAllStrings
end

class PG::TypeMapByClass
  include ::PG::TypeMap::DefaultTypeMappable
  def [](_); end

  def []=(_, _1); end

  def coders(); end
end

class PG::TypeMapByClass
end

class PG::TypeMapByColumn
  include ::PG::TypeMap::DefaultTypeMappable
  def coders(); end

  def initialize(_); end

  def oids(); end
end

class PG::TypeMapByColumn
end

class PG::TypeMapByMriType
  include ::PG::TypeMap::DefaultTypeMappable
  def [](_); end

  def []=(_, _1); end

  def coders(); end
end

class PG::TypeMapByMriType
end

class PG::TypeMapByOid
  include ::PG::TypeMap::DefaultTypeMappable
  def add_coder(_); end

  def build_column_map(_); end

  def coders(); end

  def max_rows_for_online_lookup(); end

  def max_rows_for_online_lookup=(max_rows_for_online_lookup); end

  def rm_coder(_, _1); end
end

class PG::TypeMapByOid
end

class PG::TypeMapInRuby
  include ::PG::TypeMap::DefaultTypeMappable
  def typecast_copy_get(_, _1, _2, _3); end

  def typecast_query_param(_, _1); end

  def typecast_result_value(_, _1, _2); end
end

class PG::TypeMapInRuby
end

class PG::UnableToSend
end

class PG::UnableToSend
end

class PG::UndefinedColumn
end

class PG::UndefinedColumn
end

class PG::UndefinedFile
end

class PG::UndefinedFile
end

class PG::UndefinedFunction
end

class PG::UndefinedFunction
end

class PG::UndefinedObject
end

class PG::UndefinedObject
end

class PG::UndefinedParameter
end

class PG::UndefinedParameter
end

class PG::UndefinedTable
end

class PG::UndefinedTable
end

class PG::UniqueViolation
end

class PG::UniqueViolation
end

class PG::UnsafeNewEnumValueUsage
end

class PG::UnsafeNewEnumValueUsage
end

class PG::UnterminatedCString
end

class PG::UnterminatedCString
end

class PG::UntranslatableCharacter
end

class PG::UntranslatableCharacter
end

class PG::WindowingError
end

class PG::WindowingError
end

class PG::WithCheckOptionViolation
end

class PG::WithCheckOptionViolation
end

class PG::WrongObjectType
end

class PG::WrongObjectType
end

class PG::ZeroLengthCharacterString
end

class PG::ZeroLengthCharacterString
end

module PG
  def self.connect(*args); end

  def self.init_openssl(_, _1); end

  def self.init_ssl(_); end

  def self.is_threadsafe?(); end

  def self.isthreadsafe(); end

  def self.library_version(); end

  def self.threadsafe?(); end

  def self.version_string(include_buildnum=T.unsafe(nil)); end
end

module Parlour
  VERSION = ::T.let(nil, ::T.untyped)
end

module Parlour::Debugging::Tree
  INDENT_SPACES = ::T.let(nil, ::T.untyped)
end

class Parlour::RbiGenerator::Parameter
  PREFIXES = ::T.let(nil, ::T.untyped)
end

ParseError = Racc::ParseError

module Parser
  MESSAGES = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

Parser::CurrentRuby = Parser::Ruby25

class Parser::Diagnostic
  LEVELS = ::T.let(nil, ::T.untyped)
end

class Parser::Lexer
  ESCAPES = ::T.let(nil, ::T.untyped)
  KEYWORDS = ::T.let(nil, ::T.untyped)
  KEYWORDS_BEGIN = ::T.let(nil, ::T.untyped)
  LEX_STATES = ::T.let(nil, ::T.untyped)
  PUNCTUATION = ::T.let(nil, ::T.untyped)
  PUNCTUATION_BEGIN = ::T.let(nil, ::T.untyped)
  REGEXP_META_CHARACTERS = ::T.let(nil, ::T.untyped)
end

class Parser::Lexer::Dedenter
  TAB_WIDTH = ::T.let(nil, ::T.untyped)
end

class Parser::Lexer::Literal
  DELIMITERS = ::T.let(nil, ::T.untyped)
  TYPES = ::T.let(nil, ::T.untyped)
end

module Parser::Meta
  NODE_TYPES = ::T.let(nil, ::T.untyped)
end

class Parser::Rewriter
  DEPRECATION_WARNING = ::T.let(nil, ::T.untyped)
end

class Parser::Ruby24
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
end

class Parser::Ruby25
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
end

class Parser::Source::Buffer
  ENCODING_RE = ::T.let(nil, ::T.untyped)
end

class Parser::Source::Comment::Associator
  MAGIC_COMMENT_RE = ::T.let(nil, ::T.untyped)
  POSTFIX_TYPES = ::T.let(nil, ::T.untyped)
end

class Parser::Source::Rewriter
  DEPRECATION_WARNING = ::T.let(nil, ::T.untyped)
end

class Parser::Source::TreeRewriter
  ACTIONS = ::T.let(nil, ::T.untyped)
  DEPRECATION_WARNING = ::T.let(nil, ::T.untyped)
  POLICY_TO_LEVEL = ::T.let(nil, ::T.untyped)
end

class Parser::StaticEnvironment
  FORWARD_ARGS = ::T.let(nil, ::T.untyped)
end

class Pathname
  def fnmatch?(*_); end

  def glob(*_); end

  def make_symlink(_); end
end

module Polyamorous
end

Polyamorous::InnerJoin = Arel::Nodes::InnerJoin

class Polyamorous::Join
  include ::Polyamorous::TreeNode
  def ==(other); end

  def eql?(other); end

  def initialize(name, type=T.unsafe(nil), klass=T.unsafe(nil)); end

  def klass(); end

  def klass=(klass); end

  def name(); end

  def name=(name); end

  def type(); end

  def type=(type); end
end

class Polyamorous::Join
end

Polyamorous::JoinAssociation = ActiveRecord::Associations::JoinDependency::JoinAssociation

module Polyamorous::JoinAssociationExtensions
  include ::Polyamorous::SwappingReflectionClass
  def initialize(reflection, children, polymorphic_class=T.unsafe(nil), join_type=T.unsafe(nil)); end
end

module Polyamorous::JoinAssociationExtensions
  def self.prepended(base); end
end

class Polyamorous::JoinDependency
  include ::Polyamorous::JoinDependencyExtensions
  def alias_tracker(); end

  def apply_column_aliases(relation); end

  def initialize(base, table, associations); end

  def join_root(); end

  def reflections(); end
end

class Polyamorous::JoinDependency::Aliases
  def column_alias(node, column); end

  def column_aliases(node); end

  def columns(); end

  def initialize(tables); end
end

class Polyamorous::JoinDependency::Aliases::Column
  def alias(); end

  def alias=(_); end

  def name(); end

  def name=(_); end
end

class Polyamorous::JoinDependency::Aliases::Column
  def self.[](*_); end

  def self.members(); end
end

class Polyamorous::JoinDependency::Aliases::Table
  def column_aliases(); end

  def columns(); end

  def columns=(_); end

  def node(); end

  def node=(_); end
end

class Polyamorous::JoinDependency::Aliases::Table
  def self.[](*_); end

  def self.members(); end
end

class Polyamorous::JoinDependency::Aliases
end

Polyamorous::JoinDependency::JoinAssociation = ActiveRecord::Associations::JoinDependency::JoinAssociation

class Polyamorous::JoinDependency::JoinBase
  def initialize(base_klass, table, children); end
end

class Polyamorous::JoinDependency::JoinBase
end

class Polyamorous::JoinDependency::JoinPart
  include ::Enumerable
  def base_klass(); end

  def children(); end

  def column_names(*args, &block); end

  def each(&block); end

  def each_children(&block); end

  def extract_record(row, column_names_with_alias); end

  def initialize(base_klass, children); end

  def instantiate(row, aliases, &block); end

  def match?(other); end

  def primary_key(*args, &block); end

  def table(); end

  def table_name(*args, &block); end
end

class Polyamorous::JoinDependency::JoinPart
end

class Polyamorous::JoinDependency
  extend ::Polyamorous::JoinDependencyExtensions::ClassMethods
  def self.make_tree(associations); end
end

module Polyamorous::JoinDependencyExtensions
  def build(associations, base_klass); end

  def join_constraints(joins_to_add, join_type, alias_tracker); end
end

module Polyamorous::JoinDependencyExtensions::ClassMethods
  def walk_tree(associations, hash); end
end

module Polyamorous::JoinDependencyExtensions::ClassMethods
end

module Polyamorous::JoinDependencyExtensions
end

Polyamorous::OuterJoin = Arel::Nodes::OuterJoin

module Polyamorous::ReflectionExtensions
  def build_join_constraint(table, foreign_table); end
end

module Polyamorous::ReflectionExtensions
end

module Polyamorous::SwappingReflectionClass
  def swapping_reflection_klass(reflection, klass); end
end

module Polyamorous::SwappingReflectionClass
end

module Polyamorous::TreeNode
  def add_to_tree(hash); end
end

module Polyamorous::TreeNode
end

module Polyamorous
end

module Polyfill
  VERSION = ::T.let(nil, ::T.untyped)
end

module Polyfill::Module::M70192834032020
end

module Polyfill::Module::M70192834032020
end

module Polyfill::Module::M70192834738880
end

module Polyfill::Module::M70192834738880
end

module Polyfill::Module::M70192834941180
end

module Polyfill::Module::M70192834941180
end

module Polyfill::Module::M70192852186880
end

module Polyfill::Module::M70192852186880
end

module Polyfill::Module::M70192852303500
end

module Polyfill::Module::M70192852303500
end

module Polyfill::Module::M70192852424640
end

module Polyfill::Module::M70192852424640
end

class Proc
  def clone(); end
end

module Psych
  VERSION = ::T.let(nil, ::T.untyped)
end

class Psych::FALLBACK
  def to_ruby(); end

  def to_ruby=(_); end
end

class Psych::FALLBACK
  def self.[](*_); end

  def self.members(); end
end

module Psych
  def self.add_builtin_type(type_tag, &block); end

  def self.add_domain_type(domain, type_tag, &block); end

  def self.add_tag(tag, klass); end

  def self.domain_types(); end

  def self.domain_types=(domain_types); end

  def self.dump_tags(); end

  def self.dump_tags=(dump_tags); end

  def self.libyaml_version(); end

  def self.load_tags(); end

  def self.load_tags=(load_tags); end

  def self.remove_type(type_tag); end
end

module PublicSuffix
  BANG = ::T.let(nil, ::T.untyped)
  DOT = ::T.let(nil, ::T.untyped)
  STAR = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class PublicSuffix::List
  DEFAULT_LIST_PATH = ::T.let(nil, ::T.untyped)
end

module Puma
  HTTP_STATUS_CODES = ::T.let(nil, ::T.untyped)
  IS_JRUBY = ::T.let(nil, ::T.untyped)
  IS_WINDOWS = ::T.let(nil, ::T.untyped)
  Plugins = ::T.let(nil, ::T.untyped)
  STATUS_WITH_NO_ENTITY_BODY = ::T.let(nil, ::T.untyped)
end

class Puma::Binder
  RACK_VERSION = ::T.let(nil, ::T.untyped)
end

class Puma::Client
  EmptyBody = ::T.let(nil, ::T.untyped)
end

module Puma::ConfigDefault
  DefaultRackup = ::T.let(nil, ::T.untyped)
  DefaultTCPHost = ::T.let(nil, ::T.untyped)
  DefaultTCPPort = ::T.let(nil, ::T.untyped)
  DefaultWorkerShutdownTimeout = ::T.let(nil, ::T.untyped)
  DefaultWorkerTimeout = ::T.let(nil, ::T.untyped)
end

module Puma::Const
  CGI_VER = ::T.let(nil, ::T.untyped)
  CHUNKED = ::T.let(nil, ::T.untyped)
  CHUNK_SIZE = ::T.let(nil, ::T.untyped)
  CLOSE = ::T.let(nil, ::T.untyped)
  CLOSE_CHUNKED = ::T.let(nil, ::T.untyped)
  CODE_NAME = ::T.let(nil, ::T.untyped)
  COLON = ::T.let(nil, ::T.untyped)
  CONNECTION_CLOSE = ::T.let(nil, ::T.untyped)
  CONNECTION_KEEP_ALIVE = ::T.let(nil, ::T.untyped)
  CONTENT_LENGTH = ::T.let(nil, ::T.untyped)
  CONTENT_LENGTH2 = ::T.let(nil, ::T.untyped)
  CONTENT_LENGTH_S = ::T.let(nil, ::T.untyped)
  CONTINUE = ::T.let(nil, ::T.untyped)
  EARLY_HINTS = ::T.let(nil, ::T.untyped)
  ERROR_400_RESPONSE = ::T.let(nil, ::T.untyped)
  ERROR_404_RESPONSE = ::T.let(nil, ::T.untyped)
  ERROR_408_RESPONSE = ::T.let(nil, ::T.untyped)
  ERROR_500_RESPONSE = ::T.let(nil, ::T.untyped)
  ERROR_503_RESPONSE = ::T.let(nil, ::T.untyped)
  FAST_TRACK_KA_TIMEOUT = ::T.let(nil, ::T.untyped)
  FIRST_DATA_TIMEOUT = ::T.let(nil, ::T.untyped)
  GATEWAY_INTERFACE = ::T.let(nil, ::T.untyped)
  HALT_COMMAND = ::T.let(nil, ::T.untyped)
  HEAD = ::T.let(nil, ::T.untyped)
  HIJACK = ::T.let(nil, ::T.untyped)
  HIJACK_IO = ::T.let(nil, ::T.untyped)
  HIJACK_P = ::T.let(nil, ::T.untyped)
  HTTP = ::T.let(nil, ::T.untyped)
  HTTPS = ::T.let(nil, ::T.untyped)
  HTTPS_KEY = ::T.let(nil, ::T.untyped)
  HTTP_10_200 = ::T.let(nil, ::T.untyped)
  HTTP_11 = ::T.let(nil, ::T.untyped)
  HTTP_11_100 = ::T.let(nil, ::T.untyped)
  HTTP_11_200 = ::T.let(nil, ::T.untyped)
  HTTP_CONNECTION = ::T.let(nil, ::T.untyped)
  HTTP_EXPECT = ::T.let(nil, ::T.untyped)
  HTTP_HOST = ::T.let(nil, ::T.untyped)
  HTTP_VERSION = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_FOR = ::T.let(nil, ::T.untyped)
  KEEP_ALIVE = ::T.let(nil, ::T.untyped)
  LINE_END = ::T.let(nil, ::T.untyped)
  LOCALHOST = ::T.let(nil, ::T.untyped)
  LOCALHOST_ADDR = ::T.let(nil, ::T.untyped)
  LOCALHOST_IP = ::T.let(nil, ::T.untyped)
  MAX_BODY = ::T.let(nil, ::T.untyped)
  MAX_HEADER = ::T.let(nil, ::T.untyped)
  NEWLINE = ::T.let(nil, ::T.untyped)
  PATH_INFO = ::T.let(nil, ::T.untyped)
  PERSISTENT_TIMEOUT = ::T.let(nil, ::T.untyped)
  PORT_443 = ::T.let(nil, ::T.untyped)
  PORT_80 = ::T.let(nil, ::T.untyped)
  PUMA_CONFIG = ::T.let(nil, ::T.untyped)
  PUMA_PEERCERT = ::T.let(nil, ::T.untyped)
  PUMA_SERVER_STRING = ::T.let(nil, ::T.untyped)
  PUMA_SOCKET = ::T.let(nil, ::T.untyped)
  PUMA_TMP_BASE = ::T.let(nil, ::T.untyped)
  PUMA_VERSION = ::T.let(nil, ::T.untyped)
  QUERY_STRING = ::T.let(nil, ::T.untyped)
  RACK_AFTER_REPLY = ::T.let(nil, ::T.untyped)
  RACK_INPUT = ::T.let(nil, ::T.untyped)
  RACK_URL_SCHEME = ::T.let(nil, ::T.untyped)
  REMOTE_ADDR = ::T.let(nil, ::T.untyped)
  REQUEST_METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_PATH = ::T.let(nil, ::T.untyped)
  REQUEST_URI = ::T.let(nil, ::T.untyped)
  RESTART_COMMAND = ::T.let(nil, ::T.untyped)
  SERVER_NAME = ::T.let(nil, ::T.untyped)
  SERVER_PORT = ::T.let(nil, ::T.untyped)
  SERVER_PROTOCOL = ::T.let(nil, ::T.untyped)
  SERVER_SOFTWARE = ::T.let(nil, ::T.untyped)
  STOP_COMMAND = ::T.let(nil, ::T.untyped)
  TRANSFER_ENCODING = ::T.let(nil, ::T.untyped)
  TRANSFER_ENCODING2 = ::T.let(nil, ::T.untyped)
  TRANSFER_ENCODING_CHUNKED = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  WORKER_CHECK_INTERVAL = ::T.let(nil, ::T.untyped)
  WRITE_TIMEOUT = ::T.let(nil, ::T.untyped)
end

class Puma::Events
  DEFAULT = ::T.let(nil, ::T.untyped)
end

class Puma::HttpParserError
end

class Puma::HttpParserError
end

class Puma::Launcher
  KEYS_NOT_TO_PERSIST_IN_STATE = ::T.let(nil, ::T.untyped)
end

module Puma::MiniSSL
  OPENSSL_LIBRARY_VERSION = ::T.let(nil, ::T.untyped)
  OPENSSL_VERSION = ::T.let(nil, ::T.untyped)
  VERIFY_FAIL_IF_NO_PEER_CERT = ::T.let(nil, ::T.untyped)
  VERIFY_NONE = ::T.let(nil, ::T.untyped)
  VERIFY_PEER = ::T.let(nil, ::T.untyped)
end

class Puma::MiniSSL::SSLError
end

class Puma::MiniSSL::SSLError
end

class Puma::Plugin
  CALLER_FILE = ::T.let(nil, ::T.untyped)
end

class Puma::Reactor
  DefaultSleepFor = ::T.let(nil, ::T.untyped)
end

class Puma::Server
  ThreadLocalKey = ::T.let(nil, ::T.untyped)
end

class Puma::ThreadPool
  SHUTDOWN_GRACE_TIME = ::T.let(nil, ::T.untyped)
end

module Puma::Util
  DEFAULT_SEP = ::T.let(nil, ::T.untyped)
end

module Pundit
  def authorize(record, query=T.unsafe(nil), policy_class: T.unsafe(nil)); end

  def permitted_attributes(record, action=T.unsafe(nil)); end

  def policies(); end

  def policy(record); end

  def policy_scope(scope, policy_scope_class: T.unsafe(nil)); end

  def policy_scopes(); end

  def pundit_params_for(record); end

  def pundit_policy_authorized?(); end

  def pundit_policy_scoped?(); end

  def pundit_user(); end

  def skip_authorization(); end

  def skip_policy_scope(); end

  def verify_authorized(); end

  def verify_policy_scoped(); end
  SUFFIX = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Pundit::AuthorizationNotPerformedError
end

class Pundit::AuthorizationNotPerformedError
end

class Pundit::Error
end

class Pundit::Error
end

module Pundit::Generators
end

module Pundit::Generators
end

module Pundit::Helper
  def policy_scope(scope); end
end

module Pundit::Helper
end

class Pundit::InvalidConstructorError
end

class Pundit::InvalidConstructorError
end

class Pundit::NotAuthorizedError
  def initialize(options=T.unsafe(nil)); end

  def policy(); end

  def query(); end

  def record(); end
end

class Pundit::NotAuthorizedError
end

class Pundit::NotDefinedError
end

class Pundit::NotDefinedError
end

class Pundit::PolicyFinder
  def initialize(object); end

  def object(); end

  def param_key(); end

  def policy(); end

  def policy!(); end

  def scope(); end

  def scope!(); end
end

class Pundit::PolicyFinder
end

class Pundit::PolicyScopingNotPerformedError
end

class Pundit::PolicyScopingNotPerformedError
end

module Pundit
  extend ::ActiveSupport::Concern
  def self.authorize(user, record, query, policy_class: T.unsafe(nil)); end

  def self.policy(user, record); end

  def self.policy!(user, record); end

  def self.policy_scope(user, scope); end

  def self.policy_scope!(user, scope); end
end

class PurchasedRecipe
  def autosave_associated_records_for_recipe(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

class PurchasedRecipe::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::PurchasedRecipe::GeneratedRelationMethods
end

class PurchasedRecipe::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::PurchasedRecipe::GeneratedRelationMethods
end

class PurchasedRecipe::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::PurchasedRecipe::GeneratedRelationMethods
end

module PurchasedRecipe::GeneratedAssociationMethods
  def build_recipe(*args, &block); end

  def create_recipe(*args, &block); end

  def create_recipe!(*args, &block); end

  def reload_recipe(); end
end

module PurchasedRecipe::GeneratedRelationMethods
end

module PurchasedRecipe::GeneratedRelationMethods
end

class PurchasedRecipe
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

module Racc
  Racc_No_Extensions = ::T.let(nil, ::T.untyped)
end

class Racc::CparseParams
end

class Racc::CparseParams
end

class Racc::Parser
  Racc_Main_Parsing_Routine = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Id_C = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Revision = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Revision_C = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Revision_R = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Version = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Version_C = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Version_R = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Revision = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Type = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Version = ::T.let(nil, ::T.untyped)
  Racc_YY_Parse_Method = ::T.let(nil, ::T.untyped)
end

module Rack
  CACHE_CONTROL = ::T.let(nil, ::T.untyped)
  CONTENT_LENGTH = ::T.let(nil, ::T.untyped)
  CONTENT_TYPE = ::T.let(nil, ::T.untyped)
  DELETE = ::T.let(nil, ::T.untyped)
  ETAG = ::T.let(nil, ::T.untyped)
  EXPIRES = ::T.let(nil, ::T.untyped)
  GET = ::T.let(nil, ::T.untyped)
  HEAD = ::T.let(nil, ::T.untyped)
  HTTPS = ::T.let(nil, ::T.untyped)
  HTTP_COOKIE = ::T.let(nil, ::T.untyped)
  HTTP_HOST = ::T.let(nil, ::T.untyped)
  HTTP_PORT = ::T.let(nil, ::T.untyped)
  HTTP_VERSION = ::T.let(nil, ::T.untyped)
  LINK = ::T.let(nil, ::T.untyped)
  OPTIONS = ::T.let(nil, ::T.untyped)
  PATCH = ::T.let(nil, ::T.untyped)
  PATH_INFO = ::T.let(nil, ::T.untyped)
  POST = ::T.let(nil, ::T.untyped)
  PUT = ::T.let(nil, ::T.untyped)
  QUERY_STRING = ::T.let(nil, ::T.untyped)
  RACK_ERRORS = ::T.let(nil, ::T.untyped)
  RACK_HIJACK = ::T.let(nil, ::T.untyped)
  RACK_HIJACK_IO = ::T.let(nil, ::T.untyped)
  RACK_INPUT = ::T.let(nil, ::T.untyped)
  RACK_IS_HIJACK = ::T.let(nil, ::T.untyped)
  RACK_LOGGER = ::T.let(nil, ::T.untyped)
  RACK_METHODOVERRIDE_ORIGINAL_METHOD = ::T.let(nil, ::T.untyped)
  RACK_MULTIPART_BUFFER_SIZE = ::T.let(nil, ::T.untyped)
  RACK_MULTIPART_TEMPFILE_FACTORY = ::T.let(nil, ::T.untyped)
  RACK_MULTIPROCESS = ::T.let(nil, ::T.untyped)
  RACK_MULTITHREAD = ::T.let(nil, ::T.untyped)
  RACK_RECURSIVE_INCLUDE = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_COOKIE_HASH = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_COOKIE_STRING = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_FORM_HASH = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_FORM_INPUT = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_FORM_VARS = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_QUERY_HASH = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_QUERY_STRING = ::T.let(nil, ::T.untyped)
  RACK_RUNONCE = ::T.let(nil, ::T.untyped)
  RACK_SESSION = ::T.let(nil, ::T.untyped)
  RACK_SESSION_OPTIONS = ::T.let(nil, ::T.untyped)
  RACK_SESSION_UNPACKED_COOKIE_DATA = ::T.let(nil, ::T.untyped)
  RACK_SHOWSTATUS_DETAIL = ::T.let(nil, ::T.untyped)
  RACK_TEMPFILES = ::T.let(nil, ::T.untyped)
  RACK_URL_SCHEME = ::T.let(nil, ::T.untyped)
  RACK_VERSION = ::T.let(nil, ::T.untyped)
  RELEASE = ::T.let(nil, ::T.untyped)
  REQUEST_METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_PATH = ::T.let(nil, ::T.untyped)
  SCRIPT_NAME = ::T.let(nil, ::T.untyped)
  SERVER_NAME = ::T.let(nil, ::T.untyped)
  SERVER_PORT = ::T.let(nil, ::T.untyped)
  SERVER_PROTOCOL = ::T.let(nil, ::T.untyped)
  SET_COOKIE = ::T.let(nil, ::T.untyped)
  TRACE = ::T.let(nil, ::T.untyped)
  TRANSFER_ENCODING = ::T.let(nil, ::T.untyped)
  UNLINK = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Rack::Auth::AbstractRequest
  AUTHORIZATION_KEYS = ::T.let(nil, ::T.untyped)
end

class Rack::Auth::Digest::MD5
  QOP = ::T.let(nil, ::T.untyped)
end

class Rack::Auth::Digest::Params
  UNQUOTED = ::T.let(nil, ::T.untyped)
end

class Rack::Builder
  def call(env); end

  def freeze_app(); end

  def initialize(default_app=T.unsafe(nil), &block); end

  def map(path, &block); end

  def run(app); end

  def to_app(); end

  def use(middleware, *args, &block); end

  def warmup(prc=T.unsafe(nil), &block); end
  UTF_8_BOM = ::T.let(nil, ::T.untyped)
end

class Rack::Builder
  def self.app(default_app=T.unsafe(nil), &block); end

  def self.load_file(path, opts=T.unsafe(nil)); end

  def self.new_from_string(builder_script, file=T.unsafe(nil)); end

  def self.parse_file(config, opts=T.unsafe(nil)); end
end

class Rack::Cascade
  NotFound = ::T.let(nil, ::T.untyped)
end

class Rack::Chunked::Body
  TAIL = ::T.let(nil, ::T.untyped)
  TERM = ::T.let(nil, ::T.untyped)
end

class Rack::CommonLogger
  FORMAT = ::T.let(nil, ::T.untyped)
end

class Rack::Cors
  CORS_SIMPLE_HEADERS = ::T.let(nil, ::T.untyped)
  DEFAULT_VARY_HEADERS = ::T.let(nil, ::T.untyped)
  ENV_KEY = ::T.let(nil, ::T.untyped)
  HTTP_ACCESS_CONTROL_REQUEST_HEADERS = ::T.let(nil, ::T.untyped)
  HTTP_ACCESS_CONTROL_REQUEST_METHOD = ::T.let(nil, ::T.untyped)
  HTTP_ORIGIN = ::T.let(nil, ::T.untyped)
  HTTP_X_ORIGIN = ::T.let(nil, ::T.untyped)
  OPTIONS = ::T.let(nil, ::T.untyped)
  PATH_INFO = ::T.let(nil, ::T.untyped)
  RACK_CORS = ::T.let(nil, ::T.untyped)
  RACK_LOGGER = ::T.let(nil, ::T.untyped)
  REQUEST_METHOD = ::T.let(nil, ::T.untyped)
  VARY = ::T.let(nil, ::T.untyped)
end

class Rack::Cors::Result
  HEADER_KEY = ::T.let(nil, ::T.untyped)
  MISS_DENY_HEADER = ::T.let(nil, ::T.untyped)
  MISS_DENY_METHOD = ::T.let(nil, ::T.untyped)
  MISS_NO_METHOD = ::T.let(nil, ::T.untyped)
  MISS_NO_ORIGIN = ::T.let(nil, ::T.untyped)
  MISS_NO_PATH = ::T.let(nil, ::T.untyped)
end

class Rack::Directory
  DIR_FILE = ::T.let(nil, ::T.untyped)
  DIR_PAGE_FOOTER = ::T.let(nil, ::T.untyped)
  DIR_PAGE_HEADER = ::T.let(nil, ::T.untyped)
  FILESIZE_FORMAT = ::T.let(nil, ::T.untyped)
end

class Rack::ETag
  DEFAULT_CACHE_CONTROL = ::T.let(nil, ::T.untyped)
  ETAG_STRING = ::T.let(nil, ::T.untyped)
end

Rack::File = Rack::Files

class Rack::Files
  ALLOWED_VERBS = ::T.let(nil, ::T.untyped)
  ALLOW_HEADER = ::T.let(nil, ::T.untyped)
  MULTIPART_BOUNDARY = ::T.let(nil, ::T.untyped)
end

class Rack::Handler::CGI
end

class Rack::Handler::CGI
  def self.run(app, **options); end

  def self.send_body(body); end

  def self.send_headers(status, headers); end

  def self.serve(app); end
end

class Rack::Handler::WEBrick
  def initialize(server, app); end
end

class Rack::Handler::WEBrick
  def self.run(app, **options); end

  def self.shutdown(); end

  def self.valid_options(); end
end

class Rack::Lint::HijackWrapper
  REQUIRED_METHODS = ::T.let(nil, ::T.untyped)
end

class Rack::MediaType
  SPLIT_PATTERN = ::T.let(nil, ::T.untyped)
end

class Rack::MethodOverride
  ALLOWED_METHODS = ::T.let(nil, ::T.untyped)
  HTTP_METHODS = ::T.let(nil, ::T.untyped)
  HTTP_METHOD_OVERRIDE_HEADER = ::T.let(nil, ::T.untyped)
  METHOD_OVERRIDE_PARAM_KEY = ::T.let(nil, ::T.untyped)
end

module Rack::Mime
  MIME_TYPES = ::T.let(nil, ::T.untyped)
end

class Rack::MockRequest
  DEFAULT_ENV = ::T.let(nil, ::T.untyped)
end

module Rack::Multipart
  ATTRIBUTE = ::T.let(nil, ::T.untyped)
  ATTRIBUTE_CHAR = ::T.let(nil, ::T.untyped)
  BROKEN_QUOTED = ::T.let(nil, ::T.untyped)
  BROKEN_UNQUOTED = ::T.let(nil, ::T.untyped)
  CONDISP = ::T.let(nil, ::T.untyped)
  DISPPARM = ::T.let(nil, ::T.untyped)
  EOL = ::T.let(nil, ::T.untyped)
  EXTENDED_INITIAL_NAME = ::T.let(nil, ::T.untyped)
  EXTENDED_INITIAL_PARAMETER = ::T.let(nil, ::T.untyped)
  EXTENDED_INITIAL_VALUE = ::T.let(nil, ::T.untyped)
  EXTENDED_OTHER_NAME = ::T.let(nil, ::T.untyped)
  EXTENDED_OTHER_PARAMETER = ::T.let(nil, ::T.untyped)
  EXTENDED_OTHER_VALUE = ::T.let(nil, ::T.untyped)
  EXTENDED_PARAMETER = ::T.let(nil, ::T.untyped)
  MULTIPART = ::T.let(nil, ::T.untyped)
  MULTIPART_BOUNDARY = ::T.let(nil, ::T.untyped)
  MULTIPART_CONTENT_DISPOSITION = ::T.let(nil, ::T.untyped)
  MULTIPART_CONTENT_ID = ::T.let(nil, ::T.untyped)
  MULTIPART_CONTENT_TYPE = ::T.let(nil, ::T.untyped)
  REGULAR_PARAMETER = ::T.let(nil, ::T.untyped)
  REGULAR_PARAMETER_NAME = ::T.let(nil, ::T.untyped)
  RFC2183 = ::T.let(nil, ::T.untyped)
  SECTION = ::T.let(nil, ::T.untyped)
  TOKEN = ::T.let(nil, ::T.untyped)
  VALUE = ::T.let(nil, ::T.untyped)
end

class Rack::Multipart::Generator
  def dump(); end

  def initialize(params, first=T.unsafe(nil)); end
end

class Rack::Multipart::Generator
end

class Rack::Multipart::Parser
  BOUNDARY_REGEX = ::T.let(nil, ::T.untyped)
  BUFSIZE = ::T.let(nil, ::T.untyped)
  CHARSET = ::T.let(nil, ::T.untyped)
  EMPTY = ::T.let(nil, ::T.untyped)
  TEMPFILE_FACTORY = ::T.let(nil, ::T.untyped)
  TEXT_PLAIN = ::T.let(nil, ::T.untyped)
end

class Rack::Multipart::UploadedFile
  def content_type(); end

  def content_type=(content_type); end

  def initialize(filepath=T.unsafe(nil), ct=T.unsafe(nil), bin=T.unsafe(nil), path: T.unsafe(nil), content_type: T.unsafe(nil), binary: T.unsafe(nil), filename: T.unsafe(nil), io: T.unsafe(nil)); end

  def local_path(); end

  def method_missing(method_name, *args, &block); end

  def original_filename(); end

  def path(); end

  def respond_to?(*args); end
end

class Rack::Multipart::UploadedFile
end

class Rack::QueryParser
  COMMON_SEP = ::T.let(nil, ::T.untyped)
  DEFAULT_SEP = ::T.let(nil, ::T.untyped)
end

class Rack::Request
  ALLOWED_SCHEMES = ::T.let(nil, ::T.untyped)
  SCHEME_WHITELIST = ::T.let(nil, ::T.untyped)
end

module Rack::Request::Helpers
  DEFAULT_PORTS = ::T.let(nil, ::T.untyped)
  FORM_DATA_MEDIA_TYPES = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_FOR = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_HOST = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_PORT = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_PROTO = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_SCHEME = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_SSL = ::T.let(nil, ::T.untyped)
  PARSEABLE_DATA_MEDIA_TYPES = ::T.let(nil, ::T.untyped)
end

class Rack::Response
  CHUNKED = ::T.let(nil, ::T.untyped)
  STATUS_WITH_NO_ENTITY_BODY = ::T.let(nil, ::T.untyped)
end

class Rack::Runtime
  FORMAT_STRING = ::T.let(nil, ::T.untyped)
  HEADER_NAME = ::T.let(nil, ::T.untyped)
end

class Rack::Session::Abstract::Persisted
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Rack::Session::Abstract::SessionHash
  Unspecified = ::T.let(nil, ::T.untyped)
end

class Rack::Session::Cookie::SessionId
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Rack::Session::Dalli
  def destroy_session(env, session_id, options); end

  def find_session(req, sid); end

  def get_session(env, sid); end

  def mutex(); end

  def pool(); end

  def set_session(env, session_id, new_session, options); end
  DEFAULT_DALLI_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Rack::Session::Dalli
end

Rack::Session::Memcache = Rack::Session::Dalli

class Rack::Session::Pool
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Rack::Session::SessionId
  ID_VERSION = ::T.let(nil, ::T.untyped)
end

class Rack::ShowExceptions
  CONTEXT = ::T.let(nil, ::T.untyped)
  TEMPLATE = ::T.let(nil, ::T.untyped)
end

class Rack::ShowStatus
  TEMPLATE = ::T.let(nil, ::T.untyped)
end

module Rack::Test
  DEFAULT_HOST = ::T.let(nil, ::T.untyped)
  MULTIPART_BOUNDARY = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Rack::Test::CookieJar
  DELIMITER = ::T.let(nil, ::T.untyped)
end

module Rack::Test::Methods
  METHODS = ::T.let(nil, ::T.untyped)
end

module Rack::Utils
  COMMON_SEP = ::T.let(nil, ::T.untyped)
  DEFAULT_SEP = ::T.let(nil, ::T.untyped)
  ESCAPE_HTML = ::T.let(nil, ::T.untyped)
  ESCAPE_HTML_PATTERN = ::T.let(nil, ::T.untyped)
  HTTP_STATUS_CODES = ::T.let(nil, ::T.untyped)
  NULL_BYTE = ::T.let(nil, ::T.untyped)
  PATH_SEPS = ::T.let(nil, ::T.untyped)
  STATUS_WITH_NO_ENTITY_BODY = ::T.let(nil, ::T.untyped)
  SYMBOL_TO_STATUS_CODE = ::T.let(nil, ::T.untyped)
end

Rack::Utils::InvalidParameterError = Rack::QueryParser::InvalidParameterError

Rack::Utils::KeySpaceConstrainedParams = Rack::QueryParser::Params

Rack::Utils::ParameterTypeError = Rack::QueryParser::ParameterTypeError

class Rails::Application
  def asset_precompiled?(logical_path); end

  def assets_manifest(); end

  def assets_manifest=(assets_manifest); end

  def precompiled_assets(clear_cache=T.unsafe(nil)); end
  INITIAL_VARIABLES = ::T.let(nil, ::T.untyped)
end

class Rails::ApplicationController
end

class Rails::ApplicationController
end

module Rails::Command
  HELP_MAPPINGS = ::T.let(nil, ::T.untyped)
end

module Rails::Command::Actions
  def load_generators(); end

  def load_tasks(); end

  def require_application!(); end

  def require_application_and_environment!(); end

  def require_environment!(); end

  def set_application_directory!(); end
end

module Rails::Command::Actions
end

class Rails::Command::Base
  include ::Rails::Command::Actions
  def help(); end
end

class Rails::Command::Base::Error
end

class Rails::Command::Base::Error
end

class Rails::Command::Base
  def self.banner(*_); end

  def self.base_name(); end

  def self.command_name(); end

  def self.default_command_root(); end

  def self.desc(usage=T.unsafe(nil), description=T.unsafe(nil), options=T.unsafe(nil)); end

  def self.engine?(); end

  def self.executable(); end

  def self.hide_command!(); end

  def self.inherited(base); end

  def self.perform(command, args, config); end

  def self.printing_commands(); end

  def self.usage_path(); end
end

module Rails::Generators
  DEFAULT_ALIASES = ::T.let(nil, ::T.untyped)
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

module Rails::Generators::Actions
  def add_source(source, options=T.unsafe(nil), &block); end

  def after_bundle(&block); end

  def application(data=T.unsafe(nil), options=T.unsafe(nil)); end

  def capify!(); end

  def environment(data=T.unsafe(nil), options=T.unsafe(nil)); end

  def gem(*args); end

  def gem_group(*names, &block); end

  def generate(what, *args); end

  def git(commands=T.unsafe(nil)); end

  def initialize(*_); end

  def initializer(filename, data=T.unsafe(nil)); end

  def lib(filename, data=T.unsafe(nil)); end

  def rails_command(command, options=T.unsafe(nil)); end

  def rake(command, options=T.unsafe(nil)); end

  def rakefile(filename, data=T.unsafe(nil)); end

  def readme(path); end

  def route(routing_code); end

  def vendor(filename, data=T.unsafe(nil)); end
end

class Rails::Generators::Actions::CreateMigration
  def existing_migration(); end

  def migration_dir(); end

  def migration_file_name(); end

  def relative_existing_migration(); end
end

class Rails::Generators::Actions::CreateMigration
end

module Rails::Generators::Actions
end

class Rails::Generators::ActiveModel
  def destroy(); end

  def errors(); end

  def initialize(name); end

  def name(); end

  def save(); end

  def update(params=T.unsafe(nil)); end
end

class Rails::Generators::ActiveModel
  def self.all(klass); end

  def self.build(klass, params=T.unsafe(nil)); end

  def self.find(klass, params=T.unsafe(nil)); end
end

class Rails::Generators::Base
  include ::Thor::Actions
  include ::Rails::Generators::Actions
end

class Rails::Generators::Base
  def self.add_shebang_option!(); end

  def self.base_name(); end

  def self.base_root(); end

  def self.default_aliases_for_option(name, options); end

  def self.default_for_option(config, name, options, default); end

  def self.default_generator_root(); end

  def self.default_source_root(); end

  def self.default_value_for_option(name, options); end

  def self.generator_name(); end

  def self.hide!(); end

  def self.hook_for(*names, &block); end

  def self.hooks(); end

  def self.inherited(base); end

  def self.prepare_for_invocation(name, value); end

  def self.remove_hook_for(*names); end

  def self.usage_path(); end
end

module Rails::Generators::Migration
  def create_migration(destination, data, config=T.unsafe(nil), &block); end

  def migration_class_name(); end

  def migration_file_name(); end

  def migration_number(); end

  def migration_template(source, destination, config=T.unsafe(nil)); end

  def set_migration_assigns!(destination); end
end

module Rails::Generators::Migration::ClassMethods
  def current_migration_number(dirname); end

  def migration_exists?(dirname, file_name); end

  def migration_lookup_at(dirname); end

  def next_migration_number(dirname); end
end

module Rails::Generators::Migration::ClassMethods
end

module Rails::Generators::Migration
  extend ::ActiveSupport::Concern
end

class Rails::Generators::NamedBase
  def file_name(); end

  def initialize(args, *options); end

  def js_template(source, destination); end

  def name(); end

  def name=(name); end
end

class Rails::Generators::NamedBase
  def self.check_class_collision(options=T.unsafe(nil)); end
end

module Rails::Generators::ResourceHelpers
  def controller_file_name(); end

  def controller_name(); end

  def initialize(*args); end
end

module Rails::Generators::ResourceHelpers
  def self.included(base); end
end

class Rails::Generators::TestCase
  include ::FileUtils::StreamUtils_
end

module Rails::Html
  XPATHS_TO_REMOVE = ::T.let(nil, ::T.untyped)
end

class Rails::Html::Sanitizer
  VERSION = ::T.let(nil, ::T.untyped)
end

Rails::Html::WhiteListSanitizer = Rails::Html::SafeListSanitizer

module Rails::Info
  def properties(); end

  def properties=(obj); end
end

module Rails::Info
  def self.properties(); end

  def self.properties=(obj); end

  def self.property(name, value=T.unsafe(nil)); end

  def self.to_html(); end
end

class Rails::InfoController
  def _layout_from_proc(); end

  def index(); end

  def properties(); end

  def routes(); end
end

class Rails::InfoController
end

class Rails::MailersController
  def index(); end

  def preview(); end
end

class Rails::MailersController
end

class Rails::Rack::Logger
  def call(env); end

  def initialize(app, taggers=T.unsafe(nil)); end
end

class Rails::Railtie
  ABSTRACT_RAILTIES = ::T.let(nil, ::T.untyped)
end

module Rails::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

class Rails::WelcomeController
  def index(); end
end

class Rails::WelcomeController
end

module Rake
  EARLY = ::T.let(nil, ::T.untyped)
  EMPTY_TASK_ARGS = ::T.let(nil, ::T.untyped)
  LATE = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Rake::Application
  DEFAULT_RAKEFILES = ::T.let(nil, ::T.untyped)
end

module Rake::Backtrace
  SUPPRESSED_PATHS = ::T.let(nil, ::T.untyped)
  SUPPRESSED_PATHS_RE = ::T.let(nil, ::T.untyped)
  SUPPRESS_PATTERN = ::T.let(nil, ::T.untyped)
  SYS_KEYS = ::T.let(nil, ::T.untyped)
  SYS_PATHS = ::T.let(nil, ::T.untyped)
end

module Rake::DSL
  include ::FileUtils::StreamUtils_
end

class Rake::FileList
  ARRAY_METHODS = ::T.let(nil, ::T.untyped)
  DEFAULT_IGNORE_PATTERNS = ::T.let(nil, ::T.untyped)
  DEFAULT_IGNORE_PROCS = ::T.let(nil, ::T.untyped)
  DELEGATING_METHODS = ::T.let(nil, ::T.untyped)
  GLOB_PATTERN = ::T.let(nil, ::T.untyped)
  MUST_DEFINE = ::T.let(nil, ::T.untyped)
  MUST_NOT_DEFINE = ::T.let(nil, ::T.untyped)
  SPECIAL_RETURN = ::T.let(nil, ::T.untyped)
end

module Rake::FileUtilsExt
  include ::FileUtils::StreamUtils_
  DEFAULT = ::T.let(nil, ::T.untyped)
end

module Rake::FileUtilsExt
  extend ::FileUtils::StreamUtils_
end

class Rake::InvocationChain
  EMPTY = ::T.let(nil, ::T.untyped)
end

class Rake::LinkedList
  EMPTY = ::T.let(nil, ::T.untyped)
end

class Rake::Promise
  NOT_SET = ::T.let(nil, ::T.untyped)
end

class Rake::Scope
  EMPTY = ::T.let(nil, ::T.untyped)
end

module Rake::Version
  BUILD = ::T.let(nil, ::T.untyped)
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  NUMBERS = ::T.let(nil, ::T.untyped)
  OTHER = ::T.let(nil, ::T.untyped)
end

module Rake
  extend ::FileUtils::StreamUtils_
end

RakeFileUtils = Rake::FileUtilsExt

class Range
  include ::ActiveSupport::RangeWithFormat
  include ::ActiveSupport::CompareWithRange
  include ::ActiveSupport::IncludeTimeWithZone
  include ::ActiveSupport::EachTimeWithZone
end

module Ransack
  SUPPORTS_ATTRIBUTE_ALIAS = ::T.let(nil, ::T.untyped)
end

module Ransack::Adapters
end

module Ransack::Adapters::ActiveRecord
end

module Ransack::Adapters::ActiveRecord::Base
  def ransack(params=T.unsafe(nil), options=T.unsafe(nil)); end

  def ransack_alias(new_name, old_name); end

  def ransackable_associations(auth_object=T.unsafe(nil)); end

  def ransackable_attributes(auth_object=T.unsafe(nil)); end

  def ransackable_scopes(auth_object=T.unsafe(nil)); end

  def ransackable_scopes_skip_sanitize_args(); end

  def ransacker(name, opts=T.unsafe(nil), &block); end

  def ransortable_attributes(auth_object=T.unsafe(nil)); end

  def search(params=T.unsafe(nil), options=T.unsafe(nil)); end
end

module Ransack::Adapters::ActiveRecord::Base
  def self.extended(base); end
end

class Ransack::Adapters::ActiveRecord::Context
  def alias_tracker(); end

  def attribute_method?(str, klass=T.unsafe(nil)); end

  def build_correlated_subquery(association); end

  def evaluate(search, opts=T.unsafe(nil)); end

  def join_sources(); end

  def lock_association(association); end

  def primary_key(); end

  def relation_for(object); end

  def remove_association(association); end

  def table_for(parent); end

  def type_for(attr); end
end

class Ransack::Adapters::ActiveRecord::Context
end

module Ransack::Adapters::ActiveRecord
end

class Ransack::Adapters::ActiveRecordAdapter
  def require_adapter(); end

  def require_constants(); end

  def require_context(); end

  def require_nodes(); end

  def require_search(); end
end

class Ransack::Adapters::ActiveRecordAdapter
end

class Ransack::Adapters::MongoidAdapter
  def require_adapter(); end

  def require_constants(); end

  def require_context(); end

  def require_nodes(); end

  def require_search(); end
end

class Ransack::Adapters::MongoidAdapter
end

module Ransack::Adapters
  def self.instantiate_object_mapper(); end

  def self.object_mapper(); end
end

module Ransack::ClassMethods
  def i18n_scope(); end

  def model_name(); end
end

module Ransack::ClassMethods
end

module Ransack::Configuration
  def add_predicate(name, opts=T.unsafe(nil)); end

  def arel_predicate_with_suffix(arel_predicate, suffix); end

  def configure(); end

  def custom_arrows=(opts=T.unsafe(nil)); end

  def hide_sort_order_indicators=(boolean); end

  def ignore_unknown_conditions=(boolean); end

  def options(); end

  def options=(obj); end

  def predicates(); end

  def predicates=(obj); end

  def sanitize_custom_scope_booleans=(boolean); end

  def search_key=(name); end
end

class Ransack::Configuration::PredicateCollection
  def [](*args, &block); end

  def []=(key, value); end

  def has_key?(*args, &block); end

  def keys(*args, &block); end

  def sorted_names_with_underscores(); end
end

class Ransack::Configuration::PredicateCollection
end

module Ransack::Configuration
  def self.options(); end

  def self.options=(obj); end

  def self.predicates(); end

  def self.predicates=(obj); end
end

module Ransack::Constants
  AND = ::T.let(nil, ::T.untyped)
  AND_OR = ::T.let(nil, ::T.untyped)
  AREL_PREDICATES = ::T.let(nil, ::T.untyped)
  ASSOCIATION_JOIN = ::T.let(nil, ::T.untyped)
  ATTRIBUTE = ::T.let(nil, ::T.untyped)
  ATTRIBUTES = ::T.let(nil, ::T.untyped)
  A_S_I = ::T.let(nil, ::T.untyped)
  BOOLEAN_VALUES = ::T.let(nil, ::T.untyped)
  CAP_SEARCH = ::T.let(nil, ::T.untyped)
  COMBINATOR = ::T.let(nil, ::T.untyped)
  CONT = ::T.let(nil, ::T.untyped)
  DERIVED_PREDICATES = ::T.let(nil, ::T.untyped)
  DISTINCT = ::T.let(nil, ::T.untyped)
  DOT_ASTERIX = ::T.let(nil, ::T.untyped)
  EQ = ::T.let(nil, ::T.untyped)
  EQ_ANY = ::T.let(nil, ::T.untyped)
  FALSE_VALUES = ::T.let(nil, ::T.untyped)
  I = ::T.let(nil, ::T.untyped)
  IN_NOT_IN = ::T.let(nil, ::T.untyped)
  JOIN_NODE = ::T.let(nil, ::T.untyped)
  LEFT_PARENTHESIS = ::T.let(nil, ::T.untyped)
  NOT_EQ = ::T.let(nil, ::T.untyped)
  NOT_EQ_ALL = ::T.let(nil, ::T.untyped)
  OR = ::T.let(nil, ::T.untyped)
  Q = ::T.let(nil, ::T.untyped)
  RAILS_6_0 = ::T.let(nil, ::T.untyped)
  RANSACK_SLASH_SEARCHES = ::T.let(nil, ::T.untyped)
  RANSACK_SLASH_SEARCHES_SLASH_SEARCH = ::T.let(nil, ::T.untyped)
  SEARCH = ::T.let(nil, ::T.untyped)
  SEARCHES = ::T.let(nil, ::T.untyped)
  STASHED_JOIN = ::T.let(nil, ::T.untyped)
  STRING_JOIN = ::T.let(nil, ::T.untyped)
  SUFFIXES = ::T.let(nil, ::T.untyped)
  TRUE_VALUES = ::T.let(nil, ::T.untyped)
  TWO_COLONS = ::T.let(nil, ::T.untyped)
  UNDERSCORE = ::T.let(nil, ::T.untyped)
end

module Ransack::Constants
  def self.escape_wildcards(unescaped); end
end

class Ransack::Context
  def arel_visitor(); end

  def association_path(str, base=T.unsafe(nil)); end

  def auth_object(); end

  def auth_object=(auth_object); end

  def base(); end

  def bind(object, str); end

  def bind_pair_for(key); end

  def chain_scope(scope, args); end

  def contextualize(str); end

  def engine(); end

  def initialize(object, options=T.unsafe(nil)); end

  def klass(); end

  def klassify(obj); end

  def object(); end

  def ransackable_alias(str); end

  def ransackable_association?(str, klass); end

  def ransackable_attribute?(str, klass); end

  def ransackable_scope?(str, klass); end

  def ransackable_scope_skip_sanitize_args?(str, klass); end

  def scope_arity(scope); end

  def search(); end

  def search_key(); end

  def search_key=(search_key); end

  def searchable_associations(str=T.unsafe(nil)); end

  def searchable_attributes(str=T.unsafe(nil)); end

  def sortable_attributes(str=T.unsafe(nil)); end

  def traverse(str, base=T.unsafe(nil)); end

  def unpolymorphize_association(str); end
end

class Ransack::Context
  def self.for(object, options=T.unsafe(nil)); end

  def self.for_class(klass, options=T.unsafe(nil)); end

  def self.for_object(object, options=T.unsafe(nil)); end
end

module Ransack::Helpers
end

class Ransack::Helpers::FormBuilder
  def attribute_fields(*args, &block); end

  def attribute_select(options=T.unsafe(nil), html_options=T.unsafe(nil), action=T.unsafe(nil)); end

  def combinator_select(options=T.unsafe(nil), html_options=T.unsafe(nil)); end

  def condition_fields(*args, &block); end

  def grouping_fields(*args, &block); end

  def label(method, *args, &block); end

  def predicate_fields(*args, &block); end

  def predicate_select(options=T.unsafe(nil), html_options=T.unsafe(nil)); end

  def search_fields(name, args, block); end

  def sort_direction_select(options=T.unsafe(nil), html_options=T.unsafe(nil)); end

  def sort_fields(*args, &block); end

  def sort_link(attribute, *args); end

  def sort_select(options=T.unsafe(nil), html_options=T.unsafe(nil)); end

  def sort_url(attribute, *args); end

  def value_fields(*args, &block); end
end

class Ransack::Helpers::FormBuilder
end

module Ransack::Helpers::FormHelper
  def search_form_for(record, options=T.unsafe(nil), &proc); end

  def sort_link(search_object, attribute, *args, &block); end

  def sort_url(search_object, attribute, *args); end
end

class Ransack::Helpers::FormHelper::SortLink
  def default_arrow(); end

  def down_arrow(); end

  def html_options(args); end

  def initialize(search, attribute, args, params); end

  def name(); end

  def up_arrow(); end

  def url_options(); end
end

class Ransack::Helpers::FormHelper::SortLink
end

module Ransack::Helpers::FormHelper
end

module Ransack::Helpers
end

class Ransack::Name
  def cache_key(); end

  def collection(); end

  def element(); end

  def human(); end

  def i18n_key(); end

  def initialize(); end

  def param_key(); end

  def partial_path(); end

  def plural(); end

  def route_key(); end

  def singular(); end
end

class Ransack::Name
end

module Ransack::Naming
  def model_name(); end

  def persisted?(); end

  def to_key(); end

  def to_model(); end

  def to_param(); end
end

module Ransack::Naming
  def self.included(base); end
end

module Ransack::Nodes
end

class Ransack::Nodes::Attribute
  include ::Ransack::Nodes::Bindable
  def ==(other); end

  def associated_collection?(); end

  def blank?(*args, &block); end

  def engine(*args, &block); end

  def eql?(other); end

  def initialize(context, name=T.unsafe(nil), ransacker_args=T.unsafe(nil)); end

  def name(); end

  def name=(name); end

  def persisted?(); end

  def present?(*args, &block); end

  def ransacker_args(); end

  def type(); end

  def valid?(); end
end

class Ransack::Nodes::Attribute
end

module Ransack::Nodes::Bindable
  def arel_attribute(); end

  def attr(); end

  def attr_name(); end

  def attr_name=(attr_name); end

  def bound?(); end

  def klass(); end

  def parent(); end

  def parent=(parent); end

  def ransacker(); end

  def reset_binding!(); end
end

module Ransack::Nodes::Bindable
end

class Ransack::Nodes::Condition
  def ==(other); end

  def a(); end

  def a=(args); end

  def arel_predicate(); end

  def arel_predicate_for_attribute(attr); end

  def attr_value_for_attribute(attr); end

  def attributes(); end

  def attributes=(args); end

  def build(params); end

  def build_attribute(name=T.unsafe(nil), ransacker_args=T.unsafe(nil)); end

  def build_value(val=T.unsafe(nil)); end

  def casted_values_for_attribute(attr); end

  def combinator(); end

  def combinator=(val); end

  def default_type(); end

  def eql?(other); end

  def formatted_values_for_attribute(attr); end

  def key(); end

  def m(); end

  def m=(val); end

  def negative?(); end

  def p(); end

  def p=(name); end

  def persisted?(); end

  def predicate(); end

  def predicate=(predicate); end

  def predicate_name(); end

  def predicate_name=(name); end

  def v(); end

  def v=(args); end

  def valid?(); end

  def valid_arity?(); end

  def validated_values(); end

  def value(); end

  def values(); end

  def values=(args); end
end

class Ransack::Nodes::Condition
  def self.extract(context, key, values); end
end

class Ransack::Nodes::Grouping
  def [](key); end

  def []=(key, value); end

  def attribute_method?(name); end

  def build(params); end

  def build_condition(opts=T.unsafe(nil)); end

  def build_grouping(params=T.unsafe(nil)); end

  def c(); end

  def c=(conditions); end

  def combinator(); end

  def combinator=(combinator); end

  def conditions(); end

  def conditions=(conditions); end

  def each(*args, &block); end

  def g(); end

  def g=(groupings); end

  def groupings(); end

  def groupings=(groupings); end

  def initialize(context, combinator=T.unsafe(nil)); end

  def m(); end

  def m=(m); end

  def method_missing(method_id, *args); end

  def new_condition(opts=T.unsafe(nil)); end

  def new_grouping(params=T.unsafe(nil)); end

  def persisted?(); end

  def respond_to?(method_id); end

  def values(); end
end

class Ransack::Nodes::Grouping
end

class Ransack::Nodes::Node
  def context(); end

  def contextualize(*args, &block); end

  def i18n_aliases(); end

  def i18n_aliases=(val); end

  def i18n_aliases?(); end

  def i18n_words(); end

  def i18n_words=(val); end

  def i18n_words?(); end

  def initialize(context); end

  def translate(key, options=T.unsafe(nil)); end
end

class Ransack::Nodes::Node
  def self.i18n_alias(opts=T.unsafe(nil)); end

  def self.i18n_aliases(); end

  def self.i18n_aliases=(val); end

  def self.i18n_aliases?(); end

  def self.i18n_word(*args); end

  def self.i18n_words(); end

  def self.i18n_words=(val); end

  def self.i18n_words?(); end
end

class Ransack::Nodes::Sort
  include ::Ransack::Nodes::Bindable
  def build(params); end

  def dir(); end

  def dir=(dir); end

  def name(); end

  def name=(name); end

  def ransacker_args(); end

  def ransacker_args=(ransack_args); end

  def valid?(); end
end

class Ransack::Nodes::Sort
  def self.extract(context, str); end
end

class Ransack::Nodes::Value
  def ==(other); end

  def array_of_arrays?(val); end

  def blank?(*args, &block); end

  def cast(type); end

  def cast_to_boolean(val); end

  def cast_to_date(val); end

  def cast_to_decimal(val); end

  def cast_to_float(val); end

  def cast_to_integer(val); end

  def cast_to_money(val); end

  def cast_to_string(val); end

  def cast_to_time(val); end

  def eql?(other); end

  def initialize(context, value=T.unsafe(nil)); end

  def persisted?(); end

  def present?(*args, &block); end

  def value(); end

  def value=(value); end
end

class Ransack::Nodes::Value
end

module Ransack::Nodes
end

class Ransack::Predicate
  def ==(other); end

  def arel_predicate(); end

  def case_insensitive(); end

  def compound(); end

  def eql?(other); end

  def format(val); end

  def formatter(); end

  def initialize(opts=T.unsafe(nil)); end

  def name(); end

  def negative?(); end

  def type(); end

  def validate(vals, type=T.unsafe(nil)); end

  def validator(); end

  def wants_array(); end
end

class Ransack::Predicate
  def self.detect_and_strip_from_string!(str); end

  def self.detect_from_string(str, chomp: T.unsafe(nil)); end

  def self.named(name); end

  def self.names(); end
end

class Ransack::Ransacker
  def args(); end

  def attr_from(bindable); end

  def call(*args, &block); end

  def formatter(); end

  def initialize(klass, name, opts=T.unsafe(nil), &block); end

  def name(); end

  def type(); end
end

class Ransack::Ransacker
end

class Ransack::Search
  include ::Ransack::Naming
  def base(); end

  def build(params); end

  def build_condition(*args, &block); end

  def build_grouping(*args, &block); end

  def build_sort(opts=T.unsafe(nil)); end

  def context(); end

  def initialize(object, params=T.unsafe(nil), options=T.unsafe(nil)); end

  def klass(*args, &block); end

  def method_missing(method_id, *args); end

  def new_condition(*args, &block); end

  def new_grouping(*args, &block); end

  def new_sort(opts=T.unsafe(nil)); end

  def object(*args, &block); end

  def result(opts=T.unsafe(nil)); end

  def s(); end

  def s=(args); end

  def sorts(); end

  def sorts=(args); end

  def translate(*args, &block); end
end

class Ransack::Search
  extend ::Ransack::ClassMethods
end

module Ransack::Translate
end

module Ransack::Translate
  def self.association(key, options=T.unsafe(nil)); end

  def self.attribute(key, options=T.unsafe(nil)); end

  def self.i18n_key(klass); end

  def self.predicate(key, options=T.unsafe(nil)); end

  def self.word(key, options=T.unsafe(nil)); end
end

class Ransack::UntraversableAssociationError
end

class Ransack::UntraversableAssociationError
end

class Ransack::Visitor
  def accept(object); end

  def can_accept?(object); end

  def quoted?(object); end

  def visit(object); end

  def visit_Array(object); end

  def visit_Ransack_Nodes_Condition(object); end

  def visit_Ransack_Nodes_Grouping(object); end

  def visit_Ransack_Nodes_Sort(object); end

  def visit_and(object); end

  def visit_or(object); end
  DISPATCH = ::T.let(nil, ::T.untyped)
end

class Ransack::Visitor
end

module Ransack
  extend ::Ransack::Configuration
end

module Raven
  AVAILABLE_INTEGRATIONS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Raven::Backtrace
  APP_DIRS_PATTERN = ::T.let(nil, ::T.untyped)
end

class Raven::Backtrace::Line
  JAVA_INPUT_FORMAT = ::T.let(nil, ::T.untyped)
  RB_EXTENSION = ::T.let(nil, ::T.untyped)
  RUBY_INPUT_FORMAT = ::T.let(nil, ::T.untyped)
end

class Raven::Client
  CONTENT_TYPE = ::T.let(nil, ::T.untyped)
  PROTOCOL_VERSION = ::T.let(nil, ::T.untyped)
  USER_AGENT = ::T.let(nil, ::T.untyped)
end

class Raven::Configuration
  DEFAULT_PROCESSORS = ::T.let(nil, ::T.untyped)
  HEROKU_DYNO_METADATA_MESSAGE = ::T.let(nil, ::T.untyped)
  IGNORE_DEFAULT = ::T.let(nil, ::T.untyped)
  LOG_PREFIX = ::T.let(nil, ::T.untyped)
  MODULE_SEPARATOR = ::T.let(nil, ::T.untyped)
end

class Raven::Event
  MAX_MESSAGE_SIZE_IN_BYTES = ::T.let(nil, ::T.untyped)
  SDK = ::T.let(nil, ::T.untyped)
end

class Raven::Logger
  LOG_PREFIX = ::T.let(nil, ::T.untyped)
  PROGNAME = ::T.let(nil, ::T.untyped)
end

class Raven::Processor
  INT_MASK = ::T.let(nil, ::T.untyped)
  REGEX_SPECIAL_CHARACTERS = ::T.let(nil, ::T.untyped)
  STRING_MASK = ::T.let(nil, ::T.untyped)
end

class Raven::Processor::HTTPHeaders
  DEFAULT_FIELDS = ::T.let(nil, ::T.untyped)
end

class Raven::Processor::SanitizeData
  CREDIT_CARD_RE = ::T.let(nil, ::T.untyped)
  DEFAULT_FIELDS = ::T.let(nil, ::T.untyped)
  JSON_STARTS_WITH = ::T.let(nil, ::T.untyped)
  QUERY_STRING = ::T.let(nil, ::T.untyped)
end

class Raven::Processor::UTF8Conversion
  REPLACE = ::T.let(nil, ::T.untyped)
end

module Raven::Rails::ActiveJobExtensions
  ALREADY_SUPPORTED_SENTRY_ADAPTERS = ::T.let(nil, ::T.untyped)
end

class Raven::Utils::RealIp
  LOCAL_ADDRESSES = ::T.let(nil, ::T.untyped)
end

module RbConfig
  def self.expand(val, config=T.unsafe(nil)); end

  def self.ruby(); end
end

class Recipe
  def after_add_for_recipe_steps(); end

  def after_add_for_recipe_steps=(val); end

  def after_add_for_recipe_steps?(); end

  def after_add_for_step_inputs(); end

  def after_add_for_step_inputs=(val); end

  def after_add_for_step_inputs?(); end

  def after_remove_for_recipe_steps(); end

  def after_remove_for_recipe_steps=(val); end

  def after_remove_for_recipe_steps?(); end

  def after_remove_for_step_inputs(); end

  def after_remove_for_step_inputs=(val); end

  def after_remove_for_step_inputs?(); end

  def autosave_associated_records_for_recipe_steps(*args); end

  def autosave_associated_records_for_step_inputs(*args); end

  def before_add_for_recipe_steps(); end

  def before_add_for_recipe_steps=(val); end

  def before_add_for_recipe_steps?(); end

  def before_add_for_step_inputs(); end

  def before_add_for_step_inputs=(val); end

  def before_add_for_step_inputs?(); end

  def before_remove_for_recipe_steps(); end

  def before_remove_for_recipe_steps=(val); end

  def before_remove_for_recipe_steps?(); end

  def before_remove_for_step_inputs(); end

  def before_remove_for_step_inputs=(val); end

  def before_remove_for_step_inputs?(); end

  def validate_associated_records_for_recipe_steps(*args); end

  def validate_associated_records_for_step_inputs(*args); end
end

class Recipe::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Recipe::GeneratedRelationMethods
end

class Recipe::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Recipe::GeneratedRelationMethods
end

class Recipe::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Recipe::GeneratedRelationMethods
end

module Recipe::GeneratedAssociationMethods
  def recipe_step_ids=(ids); end

  def step_input_ids=(ids); end
end

module Recipe::GeneratedRelationMethods
end

module Recipe::GeneratedRelationMethods
end

class Recipe
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
  def self.after_add_for_recipe_steps(); end

  def self.after_add_for_recipe_steps=(val); end

  def self.after_add_for_recipe_steps?(); end

  def self.after_add_for_step_inputs(); end

  def self.after_add_for_step_inputs=(val); end

  def self.after_add_for_step_inputs?(); end

  def self.after_remove_for_recipe_steps(); end

  def self.after_remove_for_recipe_steps=(val); end

  def self.after_remove_for_recipe_steps?(); end

  def self.after_remove_for_step_inputs(); end

  def self.after_remove_for_step_inputs=(val); end

  def self.after_remove_for_step_inputs?(); end

  def self.before_add_for_recipe_steps(); end

  def self.before_add_for_recipe_steps=(val); end

  def self.before_add_for_recipe_steps?(); end

  def self.before_add_for_step_inputs(); end

  def self.before_add_for_step_inputs=(val); end

  def self.before_add_for_step_inputs?(); end

  def self.before_remove_for_recipe_steps(); end

  def self.before_remove_for_recipe_steps=(val); end

  def self.before_remove_for_recipe_steps?(); end

  def self.before_remove_for_step_inputs(); end

  def self.before_remove_for_step_inputs=(val); end

  def self.before_remove_for_step_inputs?(); end
end

class RecipeStep
  def after_add_for_detailed_instructions(); end

  def after_add_for_detailed_instructions=(val); end

  def after_add_for_detailed_instructions?(); end

  def after_add_for_inputs(); end

  def after_add_for_inputs=(val); end

  def after_add_for_inputs?(); end

  def after_add_for_recipesteps_detailed_instructions(); end

  def after_add_for_recipesteps_detailed_instructions=(val); end

  def after_add_for_recipesteps_detailed_instructions?(); end

  def after_add_for_recipesteps_tools(); end

  def after_add_for_recipesteps_tools=(val); end

  def after_add_for_recipesteps_tools?(); end

  def after_add_for_step_inputs(); end

  def after_add_for_step_inputs=(val); end

  def after_add_for_step_inputs?(); end

  def after_add_for_tools(); end

  def after_add_for_tools=(val); end

  def after_add_for_tools?(); end

  def after_remove_for_detailed_instructions(); end

  def after_remove_for_detailed_instructions=(val); end

  def after_remove_for_detailed_instructions?(); end

  def after_remove_for_inputs(); end

  def after_remove_for_inputs=(val); end

  def after_remove_for_inputs?(); end

  def after_remove_for_recipesteps_detailed_instructions(); end

  def after_remove_for_recipesteps_detailed_instructions=(val); end

  def after_remove_for_recipesteps_detailed_instructions?(); end

  def after_remove_for_recipesteps_tools(); end

  def after_remove_for_recipesteps_tools=(val); end

  def after_remove_for_recipesteps_tools?(); end

  def after_remove_for_step_inputs(); end

  def after_remove_for_step_inputs=(val); end

  def after_remove_for_step_inputs?(); end

  def after_remove_for_tools(); end

  def after_remove_for_tools=(val); end

  def after_remove_for_tools?(); end

  def autosave_associated_records_for_detailed_instructions(*args); end

  def autosave_associated_records_for_inputs(*args); end

  def autosave_associated_records_for_recipe(*args); end

  def autosave_associated_records_for_recipesteps_detailed_instructions(*args); end

  def autosave_associated_records_for_recipesteps_tools(*args); end

  def autosave_associated_records_for_step_inputs(*args); end

  def autosave_associated_records_for_tools(*args); end

  def before_add_for_detailed_instructions(); end

  def before_add_for_detailed_instructions=(val); end

  def before_add_for_detailed_instructions?(); end

  def before_add_for_inputs(); end

  def before_add_for_inputs=(val); end

  def before_add_for_inputs?(); end

  def before_add_for_recipesteps_detailed_instructions(); end

  def before_add_for_recipesteps_detailed_instructions=(val); end

  def before_add_for_recipesteps_detailed_instructions?(); end

  def before_add_for_recipesteps_tools(); end

  def before_add_for_recipesteps_tools=(val); end

  def before_add_for_recipesteps_tools?(); end

  def before_add_for_step_inputs(); end

  def before_add_for_step_inputs=(val); end

  def before_add_for_step_inputs?(); end

  def before_add_for_tools(); end

  def before_add_for_tools=(val); end

  def before_add_for_tools?(); end

  def before_remove_for_detailed_instructions(); end

  def before_remove_for_detailed_instructions=(val); end

  def before_remove_for_detailed_instructions?(); end

  def before_remove_for_inputs(); end

  def before_remove_for_inputs=(val); end

  def before_remove_for_inputs?(); end

  def before_remove_for_recipesteps_detailed_instructions(); end

  def before_remove_for_recipesteps_detailed_instructions=(val); end

  def before_remove_for_recipesteps_detailed_instructions?(); end

  def before_remove_for_recipesteps_tools(); end

  def before_remove_for_recipesteps_tools=(val); end

  def before_remove_for_recipesteps_tools?(); end

  def before_remove_for_step_inputs(); end

  def before_remove_for_step_inputs=(val); end

  def before_remove_for_step_inputs?(); end

  def before_remove_for_tools(); end

  def before_remove_for_tools=(val); end

  def before_remove_for_tools?(); end

  def belongs_to_counter_cache_after_update(reflection); end

  def validate_associated_records_for_detailed_instructions(*args); end

  def validate_associated_records_for_inputs(*args); end

  def validate_associated_records_for_recipesteps_detailed_instructions(*args); end

  def validate_associated_records_for_recipesteps_tools(*args); end

  def validate_associated_records_for_step_inputs(*args); end

  def validate_associated_records_for_tools(*args); end
end

class RecipeStep::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::RecipeStep::GeneratedRelationMethods
  def name(*args, &block); end
end

class RecipeStep::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::RecipeStep::GeneratedRelationMethods
end

class RecipeStep::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::RecipeStep::GeneratedRelationMethods
end

module RecipeStep::GeneratedAssociationMethods
  def build_recipe(*args, &block); end

  def create_recipe(*args, &block); end

  def create_recipe!(*args, &block); end

  def detailed_instruction_ids=(ids); end

  def input_ids=(ids); end

  def reload_recipe(); end

  def step_input_ids=(ids); end

  def tool_ids=(ids); end
end

module RecipeStep::GeneratedRelationMethods
end

module RecipeStep::GeneratedRelationMethods
end

class RecipeStep
  def self.after_add_for_detailed_instructions(); end

  def self.after_add_for_detailed_instructions=(val); end

  def self.after_add_for_detailed_instructions?(); end

  def self.after_add_for_inputs(); end

  def self.after_add_for_inputs=(val); end

  def self.after_add_for_inputs?(); end

  def self.after_add_for_recipesteps_detailed_instructions(); end

  def self.after_add_for_recipesteps_detailed_instructions=(val); end

  def self.after_add_for_recipesteps_detailed_instructions?(); end

  def self.after_add_for_recipesteps_tools(); end

  def self.after_add_for_recipesteps_tools=(val); end

  def self.after_add_for_recipesteps_tools?(); end

  def self.after_add_for_step_inputs(); end

  def self.after_add_for_step_inputs=(val); end

  def self.after_add_for_step_inputs?(); end

  def self.after_add_for_tools(); end

  def self.after_add_for_tools=(val); end

  def self.after_add_for_tools?(); end

  def self.after_remove_for_detailed_instructions(); end

  def self.after_remove_for_detailed_instructions=(val); end

  def self.after_remove_for_detailed_instructions?(); end

  def self.after_remove_for_inputs(); end

  def self.after_remove_for_inputs=(val); end

  def self.after_remove_for_inputs?(); end

  def self.after_remove_for_recipesteps_detailed_instructions(); end

  def self.after_remove_for_recipesteps_detailed_instructions=(val); end

  def self.after_remove_for_recipesteps_detailed_instructions?(); end

  def self.after_remove_for_recipesteps_tools(); end

  def self.after_remove_for_recipesteps_tools=(val); end

  def self.after_remove_for_recipesteps_tools?(); end

  def self.after_remove_for_step_inputs(); end

  def self.after_remove_for_step_inputs=(val); end

  def self.after_remove_for_step_inputs?(); end

  def self.after_remove_for_tools(); end

  def self.after_remove_for_tools=(val); end

  def self.after_remove_for_tools?(); end

  def self.before_add_for_detailed_instructions(); end

  def self.before_add_for_detailed_instructions=(val); end

  def self.before_add_for_detailed_instructions?(); end

  def self.before_add_for_inputs(); end

  def self.before_add_for_inputs=(val); end

  def self.before_add_for_inputs?(); end

  def self.before_add_for_recipesteps_detailed_instructions(); end

  def self.before_add_for_recipesteps_detailed_instructions=(val); end

  def self.before_add_for_recipesteps_detailed_instructions?(); end

  def self.before_add_for_recipesteps_tools(); end

  def self.before_add_for_recipesteps_tools=(val); end

  def self.before_add_for_recipesteps_tools?(); end

  def self.before_add_for_step_inputs(); end

  def self.before_add_for_step_inputs=(val); end

  def self.before_add_for_step_inputs?(); end

  def self.before_add_for_tools(); end

  def self.before_add_for_tools=(val); end

  def self.before_add_for_tools?(); end

  def self.before_remove_for_detailed_instructions(); end

  def self.before_remove_for_detailed_instructions=(val); end

  def self.before_remove_for_detailed_instructions?(); end

  def self.before_remove_for_inputs(); end

  def self.before_remove_for_inputs=(val); end

  def self.before_remove_for_inputs?(); end

  def self.before_remove_for_recipesteps_detailed_instructions(); end

  def self.before_remove_for_recipesteps_detailed_instructions=(val); end

  def self.before_remove_for_recipesteps_detailed_instructions?(); end

  def self.before_remove_for_recipesteps_tools(); end

  def self.before_remove_for_recipesteps_tools=(val); end

  def self.before_remove_for_recipesteps_tools?(); end

  def self.before_remove_for_step_inputs(); end

  def self.before_remove_for_step_inputs=(val); end

  def self.before_remove_for_step_inputs?(); end

  def self.before_remove_for_tools(); end

  def self.before_remove_for_tools=(val); end

  def self.before_remove_for_tools?(); end
end

module Responders
end

module Responders::CollectionResponder
  def navigation_location(); end
end

module Responders::CollectionResponder
end

module Responders::ControllerMethod
  def responders(*responders); end
end

module Responders::ControllerMethod
end

module Responders::FlashResponder
  def controller_interpolation_options(); end

  def flash_defaults_by_namespace(status); end

  def initialize(controller, resources, options=T.unsafe(nil)); end

  def mount_i18n_options(status); end

  def resource_name(); end

  def set_flash(key, value); end

  def set_flash_message!(); end

  def set_flash_message?(); end

  def set_flash_now?(); end

  def to_html(); end

  def to_js(); end
end

module Responders::FlashResponder
  def self.flash_keys(); end

  def self.flash_keys=(flash_keys); end

  def self.helper(); end

  def self.helper=(helper); end

  def self.namespace_lookup(); end

  def self.namespace_lookup=(namespace_lookup); end
end

module Responders::HttpCacheResponder
  def do_http_cache!(); end

  def do_http_cache?(); end

  def initialize(controller, resources, options=T.unsafe(nil)); end

  def persisted?(); end

  def to_format(); end
end

module Responders::HttpCacheResponder
end

module Responders::LocationResponder
end

module Responders::LocationResponder
  def self.included(_base); end
end

class Responders::Railtie
end

class Responders::Railtie
end

module Responders
end

module RubyDep
  PROJECT_URL = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class RubyDep::NullLogger
  LOG_LEVELS = ::T.let(nil, ::T.untyped)
end

class RubyDep::RubyVersion
  VERSION_INFO = ::T.let(nil, ::T.untyped)
end

class RubyDep::Travis::RubyVersion
  REGEXP = ::T.let(nil, ::T.untyped)
end

class RubyDep::Warning
  DISABLING_ENVIRONMENT_VAR = ::T.let(nil, ::T.untyped)
  NOTICE_BUGGY_ALTERNATIVE = ::T.let(nil, ::T.untyped)
  NOTICE_HOW_TO_DISABLE = ::T.let(nil, ::T.untyped)
  NOTICE_OPEN_ISSUE = ::T.let(nil, ::T.untyped)
  NOTICE_RECOMMENDATION = ::T.let(nil, ::T.untyped)
  PREFIX = ::T.let(nil, ::T.untyped)
  WARNING = ::T.let(nil, ::T.untyped)
end

class RubyLex
  include ::RubyToken
  def Fail(err=T.unsafe(nil), *rest); end

  def Raise(err=T.unsafe(nil), *rest); end

  def char_no(); end

  def each_top_level_statement(); end

  def eof?(); end

  def exception_on_syntax_error(); end

  def exception_on_syntax_error=(exception_on_syntax_error); end

  def get_readed(); end

  def getc(); end

  def getc_of_rests(); end

  def gets(); end

  def identify_comment(); end

  def identify_gvar(); end

  def identify_here_document(); end

  def identify_identifier(); end

  def identify_number(); end

  def identify_quotation(); end

  def identify_string(ltype, quoted=T.unsafe(nil)); end

  def identify_string_dvar(); end

  def indent(); end

  def initialize_input(); end

  def lex(); end

  def lex_init(); end

  def lex_int2(); end

  def line_no(); end

  def peek(i=T.unsafe(nil)); end

  def peek_equal?(str); end

  def peek_match?(regexp); end

  def prompt(); end

  def read_escape(); end

  def readed_auto_clean_up(); end

  def readed_auto_clean_up=(readed_auto_clean_up); end

  def seek(); end

  def set_input(io, p=T.unsafe(nil), &block); end

  def set_prompt(p=T.unsafe(nil), &block); end

  def skip_space(); end

  def skip_space=(skip_space); end

  def token(); end

  def ungetc(c=T.unsafe(nil)); end
  DEINDENT_CLAUSE = ::T.let(nil, ::T.untyped)
  DLtype2Token = ::T.let(nil, ::T.untyped)
  ENINDENT_CLAUSE = ::T.let(nil, ::T.untyped)
  Ltype2Token = ::T.let(nil, ::T.untyped)
  PERCENT_LTYPE = ::T.let(nil, ::T.untyped)
  PERCENT_PAREN = ::T.let(nil, ::T.untyped)
end

class RubyLex::AlreadyDefinedToken
end

class RubyLex::AlreadyDefinedToken
end

class RubyLex::SyntaxError
end

class RubyLex::SyntaxError
end

class RubyLex::TerminateLineInput
end

class RubyLex::TerminateLineInput
end

class RubyLex::TkReading2TokenDuplicateError
end

class RubyLex::TkReading2TokenDuplicateError
end

class RubyLex::TkReading2TokenNoKey
end

class RubyLex::TkReading2TokenNoKey
end

class RubyLex::TkSymbol2TokenNoKey
end

class RubyLex::TkSymbol2TokenNoKey
end

class RubyLex
  extend ::Exception2MessageMapper
  def self.debug?(); end

  def self.debug_level(); end

  def self.debug_level=(debug_level); end

  def self.included(mod); end
end

module RubyToken
  def Token(token, value=T.unsafe(nil)); end
  EXPR_ARG = ::T.let(nil, ::T.untyped)
  EXPR_BEG = ::T.let(nil, ::T.untyped)
  EXPR_CLASS = ::T.let(nil, ::T.untyped)
  EXPR_DOT = ::T.let(nil, ::T.untyped)
  EXPR_END = ::T.let(nil, ::T.untyped)
  EXPR_FNAME = ::T.let(nil, ::T.untyped)
  EXPR_MID = ::T.let(nil, ::T.untyped)
  TkReading2Token = ::T.let(nil, ::T.untyped)
  TkSymbol2Token = ::T.let(nil, ::T.untyped)
  TokenDefinitions = ::T.let(nil, ::T.untyped)
end

class RubyToken::TkALIAS
end

class RubyToken::TkALIAS
end

class RubyToken::TkAMPER
end

class RubyToken::TkAMPER
end

class RubyToken::TkAND
end

class RubyToken::TkAND
end

class RubyToken::TkANDOP
end

class RubyToken::TkANDOP
end

class RubyToken::TkAREF
end

class RubyToken::TkAREF
end

class RubyToken::TkASET
end

class RubyToken::TkASET
end

class RubyToken::TkASSIGN
end

class RubyToken::TkASSIGN
end

class RubyToken::TkASSOC
end

class RubyToken::TkASSOC
end

class RubyToken::TkAT
end

class RubyToken::TkAT
end

class RubyToken::TkBACKQUOTE
end

class RubyToken::TkBACKQUOTE
end

class RubyToken::TkBACKSLASH
end

class RubyToken::TkBACKSLASH
end

class RubyToken::TkBACK_REF
end

class RubyToken::TkBACK_REF
end

class RubyToken::TkBEGIN
end

class RubyToken::TkBEGIN
end

class RubyToken::TkBITAND
end

class RubyToken::TkBITAND
end

class RubyToken::TkBITNOT
end

class RubyToken::TkBITNOT
end

class RubyToken::TkBITOR
end

class RubyToken::TkBITOR
end

class RubyToken::TkBITXOR
end

class RubyToken::TkBITXOR
end

class RubyToken::TkBREAK
end

class RubyToken::TkBREAK
end

class RubyToken::TkCASE
end

class RubyToken::TkCASE
end

class RubyToken::TkCLASS
end

class RubyToken::TkCLASS
end

class RubyToken::TkCMP
end

class RubyToken::TkCMP
end

class RubyToken::TkCOLON
end

class RubyToken::TkCOLON
end

class RubyToken::TkCOLON2
end

class RubyToken::TkCOLON2
end

class RubyToken::TkCOLON3
end

class RubyToken::TkCOLON3
end

class RubyToken::TkCOMMA
end

class RubyToken::TkCOMMA
end

class RubyToken::TkCOMMENT
end

class RubyToken::TkCOMMENT
end

class RubyToken::TkCONSTANT
end

class RubyToken::TkCONSTANT
end

class RubyToken::TkCVAR
end

class RubyToken::TkCVAR
end

class RubyToken::TkDEF
end

class RubyToken::TkDEF
end

class RubyToken::TkDEFINED
end

class RubyToken::TkDEFINED
end

class RubyToken::TkDIV
end

class RubyToken::TkDIV
end

class RubyToken::TkDO
end

class RubyToken::TkDO
end

class RubyToken::TkDOLLAR
end

class RubyToken::TkDOLLAR
end

class RubyToken::TkDOT
end

class RubyToken::TkDOT
end

class RubyToken::TkDOT2
end

class RubyToken::TkDOT2
end

class RubyToken::TkDOT3
end

class RubyToken::TkDOT3
end

class RubyToken::TkDREGEXP
end

class RubyToken::TkDREGEXP
end

class RubyToken::TkDSTRING
end

class RubyToken::TkDSTRING
end

class RubyToken::TkDXSTRING
end

class RubyToken::TkDXSTRING
end

class RubyToken::TkELSE
end

class RubyToken::TkELSE
end

class RubyToken::TkELSIF
end

class RubyToken::TkELSIF
end

class RubyToken::TkEND
end

class RubyToken::TkEND
end

class RubyToken::TkEND_OF_SCRIPT
end

class RubyToken::TkEND_OF_SCRIPT
end

class RubyToken::TkENSURE
end

class RubyToken::TkENSURE
end

class RubyToken::TkEQ
end

class RubyToken::TkEQ
end

class RubyToken::TkEQQ
end

class RubyToken::TkEQQ
end

class RubyToken::TkError
end

class RubyToken::TkError
end

class RubyToken::TkFALSE
end

class RubyToken::TkFALSE
end

class RubyToken::TkFID
end

class RubyToken::TkFID
end

class RubyToken::TkFLOAT
end

class RubyToken::TkFLOAT
end

class RubyToken::TkFOR
end

class RubyToken::TkFOR
end

class RubyToken::TkGEQ
end

class RubyToken::TkGEQ
end

class RubyToken::TkGT
end

class RubyToken::TkGT
end

class RubyToken::TkGVAR
end

class RubyToken::TkGVAR
end

class RubyToken::TkIDENTIFIER
end

class RubyToken::TkIDENTIFIER
end

class RubyToken::TkIF
end

class RubyToken::TkIF
end

class RubyToken::TkIF_MOD
end

class RubyToken::TkIF_MOD
end

class RubyToken::TkIN
end

class RubyToken::TkIN
end

class RubyToken::TkINTEGER
end

class RubyToken::TkINTEGER
end

class RubyToken::TkIVAR
end

class RubyToken::TkIVAR
end

class RubyToken::TkId
  def initialize(seek, line_no, char_no, name); end

  def name(); end
end

class RubyToken::TkId
end

class RubyToken::TkLBRACE
end

class RubyToken::TkLBRACE
end

class RubyToken::TkLBRACK
end

class RubyToken::TkLBRACK
end

class RubyToken::TkLEQ
end

class RubyToken::TkLEQ
end

class RubyToken::TkLPAREN
end

class RubyToken::TkLPAREN
end

class RubyToken::TkLSHFT
end

class RubyToken::TkLSHFT
end

class RubyToken::TkLT
end

class RubyToken::TkLT
end

class RubyToken::TkMATCH
end

class RubyToken::TkMATCH
end

class RubyToken::TkMINUS
end

class RubyToken::TkMINUS
end

class RubyToken::TkMOD
end

class RubyToken::TkMOD
end

class RubyToken::TkMODULE
end

class RubyToken::TkMODULE
end

class RubyToken::TkMULT
end

class RubyToken::TkMULT
end

class RubyToken::TkNEQ
end

class RubyToken::TkNEQ
end

class RubyToken::TkNEXT
end

class RubyToken::TkNEXT
end

class RubyToken::TkNIL
end

class RubyToken::TkNIL
end

class RubyToken::TkNL
end

class RubyToken::TkNL
end

class RubyToken::TkNMATCH
end

class RubyToken::TkNMATCH
end

class RubyToken::TkNOT
end

class RubyToken::TkNOT
end

class RubyToken::TkNOTOP
end

class RubyToken::TkNOTOP
end

class RubyToken::TkNTH_REF
end

class RubyToken::TkNTH_REF
end

class RubyToken::TkNode
  def node(); end
end

class RubyToken::TkNode
end

class RubyToken::TkOPASGN
  def initialize(seek, line_no, char_no, op); end

  def op(); end
end

class RubyToken::TkOPASGN
end

class RubyToken::TkOR
end

class RubyToken::TkOR
end

class RubyToken::TkOROP
end

class RubyToken::TkOROP
end

class RubyToken::TkOp
  def name(); end

  def name=(name); end
end

class RubyToken::TkOp
end

class RubyToken::TkPLUS
end

class RubyToken::TkPLUS
end

class RubyToken::TkPOW
end

class RubyToken::TkPOW
end

class RubyToken::TkQUESTION
end

class RubyToken::TkQUESTION
end

class RubyToken::TkRBRACE
end

class RubyToken::TkRBRACE
end

class RubyToken::TkRBRACK
end

class RubyToken::TkRBRACK
end

class RubyToken::TkRD_COMMENT
end

class RubyToken::TkRD_COMMENT
end

class RubyToken::TkREDO
end

class RubyToken::TkREDO
end

class RubyToken::TkREGEXP
end

class RubyToken::TkREGEXP
end

class RubyToken::TkRESCUE
end

class RubyToken::TkRESCUE
end

class RubyToken::TkRETRY
end

class RubyToken::TkRETRY
end

class RubyToken::TkRETURN
end

class RubyToken::TkRETURN
end

class RubyToken::TkRPAREN
end

class RubyToken::TkRPAREN
end

class RubyToken::TkRSHFT
end

class RubyToken::TkRSHFT
end

class RubyToken::TkSELF
end

class RubyToken::TkSELF
end

class RubyToken::TkSEMICOLON
end

class RubyToken::TkSEMICOLON
end

class RubyToken::TkSPACE
end

class RubyToken::TkSPACE
end

class RubyToken::TkSTAR
end

class RubyToken::TkSTAR
end

class RubyToken::TkSTRING
end

class RubyToken::TkSTRING
end

class RubyToken::TkSUPER
end

class RubyToken::TkSUPER
end

class RubyToken::TkSYMBEG
end

class RubyToken::TkSYMBEG
end

class RubyToken::TkSYMBOL
end

class RubyToken::TkSYMBOL
end

class RubyToken::TkTHEN
end

class RubyToken::TkTHEN
end

class RubyToken::TkTRUE
end

class RubyToken::TkTRUE
end

class RubyToken::TkUMINUS
end

class RubyToken::TkUMINUS
end

class RubyToken::TkUNDEF
end

class RubyToken::TkUNDEF
end

class RubyToken::TkUNLESS
end

class RubyToken::TkUNLESS
end

class RubyToken::TkUNLESS_MOD
end

class RubyToken::TkUNLESS_MOD
end

class RubyToken::TkUNTIL
end

class RubyToken::TkUNTIL
end

class RubyToken::TkUNTIL_MOD
end

class RubyToken::TkUNTIL_MOD
end

class RubyToken::TkUPLUS
end

class RubyToken::TkUPLUS
end

class RubyToken::TkUnknownChar
  def initialize(seek, line_no, char_no, id); end

  def name(); end
end

class RubyToken::TkUnknownChar
end

class RubyToken::TkVal
  def initialize(seek, line_no, char_no, value=T.unsafe(nil)); end

  def value(); end
end

class RubyToken::TkVal
end

class RubyToken::TkWHEN
end

class RubyToken::TkWHEN
end

class RubyToken::TkWHILE
end

class RubyToken::TkWHILE
end

class RubyToken::TkWHILE_MOD
end

class RubyToken::TkWHILE_MOD
end

class RubyToken::TkXSTRING
end

class RubyToken::TkXSTRING
end

class RubyToken::TkYIELD
end

class RubyToken::TkYIELD
end

class RubyToken::Tk__FILE__
end

class RubyToken::Tk__FILE__
end

class RubyToken::Tk__LINE__
end

class RubyToken::Tk__LINE__
end

class RubyToken::TkfLBRACE
end

class RubyToken::TkfLBRACE
end

class RubyToken::TkfLBRACK
end

class RubyToken::TkfLBRACK
end

class RubyToken::TkfLPAREN
end

class RubyToken::TkfLPAREN
end

class RubyToken::TklBEGIN
end

class RubyToken::TklBEGIN
end

class RubyToken::TklEND
end

class RubyToken::TklEND
end

class RubyToken::Token
  def char_no(); end

  def initialize(seek, line_no, char_no); end

  def line_no(); end

  def seek(); end
end

class RubyToken::Token
end

module RubyToken
  def self.def_token(token_n, super_token=T.unsafe(nil), reading=T.unsafe(nil), *opts); end
end

module SassC
  VERSION = ::T.let(nil, ::T.untyped)
end

class SassC::BaseError
end

class SassC::BaseError
end

class SassC::Dependency
  def filename(); end

  def initialize(filename); end

  def options(); end
end

class SassC::Dependency
  def self.from_filenames(filenames); end
end

class SassC::Engine
  def dependencies(); end

  def filename(); end

  def initialize(template, options=T.unsafe(nil)); end

  def options(); end

  def render(); end

  def source_map(); end

  def template(); end
  OUTPUT_STYLES = ::T.let(nil, ::T.untyped)
end

class SassC::Engine
end

class SassC::FunctionsHandler
  def initialize(options); end

  def setup(native_options, functions: T.unsafe(nil)); end
end

class SassC::FunctionsHandler
end

class SassC::ImportHandler
  def initialize(options); end

  def setup(native_options); end
end

class SassC::ImportHandler
end

class SassC::Importer
  def imports(path, parent_path); end

  def initialize(options); end

  def options(); end
end

class SassC::Importer::Import
  def initialize(path, source: T.unsafe(nil), source_map_path: T.unsafe(nil)); end

  def path(); end

  def path=(path); end

  def source(); end

  def source=(source); end

  def source_map_path(); end

  def source_map_path=(source_map_path); end
end

class SassC::Importer::Import
end

class SassC::Importer
end

class SassC::InvalidStyleError
end

class SassC::InvalidStyleError
end

module SassC::Native
  def _context_get_included_files(*_); end

  def _make_data_context(*_); end

  def boolean_get_value(*_); end

  def color_get_a(*_); end

  def color_get_b(*_); end

  def color_get_g(*_); end

  def color_get_r(*_); end

  def color_set_a(*_); end

  def color_set_b(*_); end

  def color_set_g(*_); end

  def color_set_r(*_); end

  def compile_data_context(*_); end

  def compile_file_context(*_); end

  def compiler_get_last_import(*_); end

  def context_get_error_column(*_); end

  def context_get_error_file(*_); end

  def context_get_error_json(*_); end

  def context_get_error_line(*_); end

  def context_get_error_message(*_); end

  def context_get_error_status(*_); end

  def context_get_options(*_); end

  def context_get_output_string(*_); end

  def context_get_source_map_string(*_); end

  def data_context_get_context(*_); end

  def data_context_get_options(*_); end

  def data_context_set_options(*_); end

  def delete_data_context(*_); end

  def delete_file_context(*_); end

  def error_get_message(*_); end

  def error_set_message(*_); end

  def file_context_get_context(*_); end

  def file_context_get_options(*_); end

  def file_context_set_options(*_); end

  def function_get_cookie(*_); end

  def function_get_function(*_); end

  def function_get_list_entry(*_); end

  def function_get_signature(*_); end

  def function_set_list_entry(*_); end

  def import_get_abs_path(*_); end

  def import_get_imp_path(*_); end

  def import_get_source(*_); end

  def import_set_list_entry(*_); end

  def list_get_length(*_); end

  def list_get_value(*_); end

  def list_set_value(*_); end

  def make_boolean(*_); end

  def make_color(*_); end

  def make_error(*_); end

  def make_file_context(*_); end

  def make_function(*_); end

  def make_function_list(*_); end

  def make_import_entry(*_); end

  def make_import_list(*_); end

  def make_importer(*_); end

  def make_list(*_); end

  def make_map(*_); end

  def make_number(*_); end

  def make_options(*_); end

  def make_qstring(*_); end

  def make_string(*_); end

  def map_get_key(*_); end

  def map_get_length(*_); end

  def map_get_value(*_); end

  def map_set_key(*_); end

  def map_set_value(*_); end

  def number_get_unit(*_); end

  def number_get_value(*_); end

  def option_get_c_functions(*_); end

  def option_get_include_path(*_); end

  def option_get_input_path(*_); end

  def option_get_is_indented_syntax_src(*_); end

  def option_get_omit_source_map_url(*_); end

  def option_get_output_path(*_); end

  def option_get_output_style(*_); end

  def option_get_precision(*_); end

  def option_get_source_comments(*_); end

  def option_get_source_map_contents(*_); end

  def option_get_source_map_embed(*_); end

  def option_get_source_map_file(*_); end

  def option_set_c_functions(*_); end

  def option_set_c_importers(*_); end

  def option_set_include_path(*_); end

  def option_set_input_path(*_); end

  def option_set_is_indented_syntax_src(*_); end

  def option_set_omit_source_map_url(*_); end

  def option_set_output_path(*_); end

  def option_set_output_style(*_); end

  def option_set_precision(*_); end

  def option_set_source_comments(*_); end

  def option_set_source_map_contents(*_); end

  def option_set_source_map_embed(*_); end

  def option_set_source_map_file(*_); end

  def sass2scss(*_); end

  def string_get_value(*_); end

  def string_is_quoted(*_); end

  def value_get_tag(*_); end

  def value_is_null(*_); end

  def version(*_); end
  SassInputStyle = ::T.let(nil, ::T.untyped)
  SassOutputStyle = ::T.let(nil, ::T.untyped)
  SassSeparator = ::T.let(nil, ::T.untyped)
  SassTag = ::T.let(nil, ::T.untyped)
end

class SassC::Native::SassBoolean
end

class SassC::Native::SassBoolean
end

class SassC::Native::SassColor
end

class SassC::Native::SassColor
end

class SassC::Native::SassError
end

class SassC::Native::SassError
end

class SassC::Native::SassList
end

class SassC::Native::SassList
end

class SassC::Native::SassMap
end

class SassC::Native::SassMap
end

class SassC::Native::SassMapPair
end

class SassC::Native::SassMapPair
end

class SassC::Native::SassNull
end

class SassC::Native::SassNull
end

class SassC::Native::SassNumber
end

class SassC::Native::SassNumber
end

class SassC::Native::SassString
end

class SassC::Native::SassString
end

class SassC::Native::SassUnknown
end

class SassC::Native::SassUnknown
end

class SassC::Native::SassValue
end

class SassC::Native::SassValue
end

class SassC::Native::SassWarning
end

class SassC::Native::SassWarning
end

class SassC::Native::StringList
end

class SassC::Native::StringList
end

module SassC::Native
  extend ::FFI::Library
  def self._context_get_included_files(*_); end

  def self._make_data_context(*_); end

  def self.attach_function(*args); end

  def self.boolean_get_value(*_); end

  def self.color_get_a(*_); end

  def self.color_get_b(*_); end

  def self.color_get_g(*_); end

  def self.color_get_r(*_); end

  def self.color_set_a(*_); end

  def self.color_set_b(*_); end

  def self.color_set_g(*_); end

  def self.color_set_r(*_); end

  def self.compile_data_context(*_); end

  def self.compile_file_context(*_); end

  def self.compiler_get_last_import(*_); end

  def self.context_get_error_column(*_); end

  def self.context_get_error_file(*_); end

  def self.context_get_error_json(*_); end

  def self.context_get_error_line(*_); end

  def self.context_get_error_message(*_); end

  def self.context_get_error_status(*_); end

  def self.context_get_included_files(*args); end

  def self.context_get_options(*_); end

  def self.context_get_output_string(*_); end

  def self.context_get_source_map_string(*_); end

  def self.data_context_get_context(*_); end

  def self.data_context_get_options(*_); end

  def self.data_context_set_options(*_); end

  def self.delete_data_context(*_); end

  def self.delete_file_context(*_); end

  def self.error_get_message(*_); end

  def self.error_set_message(*_); end

  def self.file_context_get_context(*_); end

  def self.file_context_get_options(*_); end

  def self.file_context_set_options(*_); end

  def self.function_get_cookie(*_); end

  def self.function_get_function(*_); end

  def self.function_get_list_entry(*_); end

  def self.function_get_signature(*_); end

  def self.function_set_list_entry(*_); end

  def self.import_get_abs_path(*_); end

  def self.import_get_imp_path(*_); end

  def self.import_get_source(*_); end

  def self.import_set_list_entry(*_); end

  def self.list_get_length(*_); end

  def self.list_get_value(*_); end

  def self.list_set_value(*_); end

  def self.make_boolean(*_); end

  def self.make_color(*_); end

  def self.make_data_context(data); end

  def self.make_error(*_); end

  def self.make_file_context(*_); end

  def self.make_function(*_); end

  def self.make_function_list(*_); end

  def self.make_import_entry(*_); end

  def self.make_import_list(*_); end

  def self.make_importer(*_); end

  def self.make_list(*_); end

  def self.make_map(*_); end

  def self.make_number(*_); end

  def self.make_options(*_); end

  def self.make_qstring(*_); end

  def self.make_string(*_); end

  def self.map_get_key(*_); end

  def self.map_get_length(*_); end

  def self.map_get_value(*_); end

  def self.map_set_key(*_); end

  def self.map_set_value(*_); end

  def self.native_string(string); end

  def self.number_get_unit(*_); end

  def self.number_get_value(*_); end

  def self.option_get_c_functions(*_); end

  def self.option_get_include_path(*_); end

  def self.option_get_input_path(*_); end

  def self.option_get_is_indented_syntax_src(*_); end

  def self.option_get_omit_source_map_url(*_); end

  def self.option_get_output_path(*_); end

  def self.option_get_output_style(*_); end

  def self.option_get_precision(*_); end

  def self.option_get_source_comments(*_); end

  def self.option_get_source_map_contents(*_); end

  def self.option_get_source_map_embed(*_); end

  def self.option_get_source_map_file(*_); end

  def self.option_set_c_functions(*_); end

  def self.option_set_c_importers(*_); end

  def self.option_set_include_path(*_); end

  def self.option_set_input_path(*_); end

  def self.option_set_is_indented_syntax_src(*_); end

  def self.option_set_omit_source_map_url(*_); end

  def self.option_set_output_path(*_); end

  def self.option_set_output_style(*_); end

  def self.option_set_precision(*_); end

  def self.option_set_source_comments(*_); end

  def self.option_set_source_map_contents(*_); end

  def self.option_set_source_map_embed(*_); end

  def self.option_set_source_map_file(*_); end

  def self.return_string_array(ptr); end

  def self.sass2scss(*_); end

  def self.string_get_type(native_value); end

  def self.string_get_value(*_); end

  def self.string_is_quoted(*_); end

  def self.value_get_tag(*_); end

  def self.value_is_null(*_); end

  def self.version(*_); end
end

class SassC::NotRenderedError
end

class SassC::NotRenderedError
end

module SassC::Rails
  VERSION = ::T.let(nil, ::T.untyped)
end

class SassC::Rails::Importer
  EXTENSIONS = ::T.let(nil, ::T.untyped)
  GLOB = ::T.let(nil, ::T.untyped)
  PREFIXS = ::T.let(nil, ::T.untyped)
end

class SassC::Rails::Importer::CSSExtension
  def import_for(full_path, parent_dir, options); end

  def postfix(); end
end

class SassC::Rails::Importer::CSSExtension
end

class SassC::Rails::Importer::CssSassExtension
end

class SassC::Rails::Importer::CssSassExtension
end

class SassC::Rails::Importer::CssScssExtension
end

class SassC::Rails::Importer::CssScssExtension
end

class SassC::Rails::Importer::ERBExtension
end

class SassC::Rails::Importer::ERBExtension
end

class SassC::Rails::Importer::Extension
  def import_for(full_path, parent_dir, options); end

  def initialize(postfix=T.unsafe(nil)); end

  def postfix(); end
end

class SassC::Rails::Importer::Extension
end

class SassC::Rails::Importer::SassERBExtension
end

class SassC::Rails::Importer::SassERBExtension
end

class SassC::Rails::Importer
end

class SassC::Rails::Railtie
end

class SassC::Rails::Railtie
end

class SassC::Rails::SassTemplate
  def config_options(); end

  def line_comments?(); end

  def load_paths(); end

  def safe_merge(_key, left, right); end

  def sass_style(); end
end

module SassC::Rails::SassTemplate::Functions
  def asset_data_url(path); end

  def asset_path(path, options=T.unsafe(nil)); end

  def asset_url(path, options=T.unsafe(nil)); end
end

module SassC::Rails::SassTemplate::Functions
end

class SassC::Rails::SassTemplate
end

class SassC::Rails::ScssTemplate
end

class SassC::Rails::ScssTemplate
end

module SassC::Rails
end

class SassC::Sass2Scss
end

class SassC::Sass2Scss
  def self.convert(sass); end
end

module SassC::Script
end

module SassC::Script::Functions
  include ::Sprockets::SassProcessor::Functions
end

module SassC::Script::Functions
end

class SassC::Script::Value
  def ==(other); end

  def _perform(environment); end

  def assert_int!(); end

  def bracketed(); end

  def eql?(other); end

  def initialize(value=T.unsafe(nil)); end

  def null?(); end

  def options(); end

  def options=(options); end

  def separator(); end

  def source_range(); end

  def source_range=(source_range); end

  def to_a(); end

  def to_bool(); end

  def to_h(); end

  def to_i(); end

  def to_s(opts=T.unsafe(nil)); end

  def to_sass(opts=T.unsafe(nil)); end

  def value(); end

  def with_contents(contents, separator: T.unsafe(nil), bracketed: T.unsafe(nil)); end
end

class SassC::Script::Value::Bool
  FALSE = ::T.let(nil, ::T.untyped)
  TRUE = ::T.let(nil, ::T.untyped)
end

class SassC::Script::Value::Bool
  def self.new(value); end
end

class SassC::Script::Value::Color
  def ==(other_color); end

  def alpha(); end

  def alpha_string(); end

  def blue(); end

  def eql?(other_color); end

  def green(); end

  def hlsa?(); end

  def hue(); end

  def initialize(red: T.unsafe(nil), green: T.unsafe(nil), blue: T.unsafe(nil), hue: T.unsafe(nil), saturation: T.unsafe(nil), lightness: T.unsafe(nil), alpha: T.unsafe(nil)); end

  def lightness(); end

  def red(); end

  def rgba?(); end

  def saturation(); end

  def to_s(); end
end

class SassC::Script::Value::Color
end

class SassC::Script::Value::List
  def eq(other); end

  def initialize(value, separator: T.unsafe(nil), bracketed: T.unsafe(nil)); end

  def options=(options); end
end

class SassC::Script::Value::List
  def self.assert_valid_index(list, n); end
end

class SassC::Script::Value::Map
  def eq(other); end

  def initialize(hash); end

  def inspect(opts=T.unsafe(nil)); end

  def options=(options); end
end

class SassC::Script::Value::Map
end

class SassC::Script::Value::Number
  def coerce(num_units, den_units); end

  def comparable_to?(other); end

  def denominator_units(); end

  def initialize(value, numerator_units=T.unsafe(nil), denominator_units=T.unsafe(nil)); end

  def inspect(opts=T.unsafe(nil)); end

  def int?(); end

  def is_unit?(unit); end

  def legal_units?(); end

  def numerator_units(); end

  def original(); end

  def original=(original); end

  def unit_str(); end

  def unitless?(); end
  CONVERSION_TABLE = ::T.let(nil, ::T.untyped)
  MUTUALLY_CONVERTIBLE = ::T.let(nil, ::T.untyped)
  NO_UNITS = ::T.let(nil, ::T.untyped)
  OPERATIONS = ::T.let(nil, ::T.untyped)
end

class SassC::Script::Value::Number
  def self.basically_equal?(num1, num2); end

  def self.epsilon(); end

  def self.precision(); end

  def self.precision=(digits); end

  def self.precision_factor(); end

  def self.round(num); end
end

class SassC::Script::Value::String
  def initialize(value, type=T.unsafe(nil)); end

  def plus(other); end

  def type(); end
end

class SassC::Script::Value::String
  def self.quote(contents, opts=T.unsafe(nil)); end
end

class SassC::Script::Value
end

module SassC::Script::ValueConversion
  SEPARATORS = ::T.let(nil, ::T.untyped)
end

class SassC::Script::ValueConversion::Base
  def initialize(value); end
end

class SassC::Script::ValueConversion::Base
end

class SassC::Script::ValueConversion::Bool
  def to_native(); end
end

class SassC::Script::ValueConversion::Bool
end

class SassC::Script::ValueConversion::Color
  def to_native(); end
end

class SassC::Script::ValueConversion::Color
end

class SassC::Script::ValueConversion::List
  def to_native(); end
end

class SassC::Script::ValueConversion::List
end

class SassC::Script::ValueConversion::Map
  def to_native(); end
end

class SassC::Script::ValueConversion::Map
end

class SassC::Script::ValueConversion::Number
  def to_native(); end
end

class SassC::Script::ValueConversion::Number
end

class SassC::Script::ValueConversion::String
  def to_native(opts=T.unsafe(nil)); end
end

class SassC::Script::ValueConversion::String
end

module SassC::Script::ValueConversion
  def self.from_native(native_value, options); end

  def self.to_native(value); end
end

module SassC::Script
  def self.custom_functions(functions: T.unsafe(nil)); end

  def self.formatted_function_name(function_name, functions: T.unsafe(nil)); end
end

class SassC::SyntaxError
  def initialize(message, filename: T.unsafe(nil), line: T.unsafe(nil)); end

  def sass_backtrace(); end
end

class SassC::SyntaxError
end

class SassC::UnsupportedValue
end

class SassC::UnsupportedValue
end

module SassC::Util
  RUBY_ENGINE = ::T.let(nil, ::T.untyped)
  RUBY_VERSION_COMPONENTS = ::T.let(nil, ::T.untyped)
end

class SassC::Util::NormalizedMap
  def [](k); end

  def []=(k, v); end

  def as_stored(); end

  def delete(k); end

  def denormalize(key); end

  def each(&blk); end

  def empty?(); end

  def has_key?(k); end

  def initialize(map=T.unsafe(nil)); end

  def keys(); end

  def map(); end

  def method_missing(method, *args, &block); end

  def normalize(key); end

  def size(); end

  def sort_by(); end

  def to_a(); end

  def to_hash(); end

  def update(map); end

  def values(); end
end

class SassC::Util::NormalizedMap
end

module SassC::Util
  extend ::SassC::Util
end

module SassC
  def self.load_paths(); end
end

ScanError = StringScanner::Error

module SecureRandom
  BASE58_ALPHABET = ::T.let(nil, ::T.untyped)
end

module Server
end

class Server::Application
end

class Server::Application
end

module Server
end

class Set
  def ==(other); end

  def ===(o); end

  def compare_by_identity(); end

  def compare_by_identity?(); end

  def divide(&func); end

  def eql?(o); end

  def flatten_merge(set, seen=T.unsafe(nil)); end

  def pretty_print(pp); end

  def pretty_print_cycle(pp); end

  def reset(); end
  InspectKey = ::T.let(nil, ::T.untyped)
end

class SimpleDelegator
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

module Singleton
  def _dump(depth=T.unsafe(nil)); end

  def clone(); end

  def dup(); end
end

module Singleton::SingletonClassMethods
  def _load(str); end

  def clone(); end
end

module Singleton
  def self.__init__(klass); end
end

module Skylight
  CATEGORY_REGEX = ::T.let(nil, ::T.untyped)
  DEFAULT_CATEGORY = ::T.let(nil, ::T.untyped)
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
  LOCK = ::T.let(nil, ::T.untyped)
  TIERS = ::T.let(nil, ::T.untyped)
  TIER_REGEX = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Skylight::CLI
end

class Skylight::CLI::Base
  include ::Skylight::CLI::Helpers
  def disable_dev_warning(); end

  def disable_env_warning(); end

  def doctor(*args); end

  def merge(*args); end

  def setup(token); end
end

class Skylight::CLI::Base
end

class Skylight::CLI::Doctor
  include ::Skylight::CLI::Helpers
  def check_config(); end

  def check_daemon(); end

  def check_native(); end

  def check_rails(); end

  def check_ssl(); end

  def wrap_up(); end
end

class Skylight::CLI::Doctor
end

module Skylight::CLI::Helpers
end

module Skylight::CLI::Helpers
end

class Skylight::CLI::Merger
  include ::Skylight::CLI::Helpers
  def ask_for_child_app(); end

  def ask_for_child_env(); end

  def ask_for_parent_app(); end

  def confirm_child(); end

  def confirm_child_env(); end

  def confirm_everything(); end

  def confirm_parent(); end

  def do_confirm(); end

  def fetch_apps(); end

  def merge_token(); end

  def merge_token=(merge_token); end

  def print_new_config_instructions(); end

  def welcome(); end
  STRINGS = ::T.let(nil, ::T.untyped)
end

class Skylight::CLI::Merger
end

module Skylight::CLI
end

module Skylight::Core
  DEPRECATOR = ::T.let(nil, ::T.untyped)
  SKYLIGHT_GEM_ROOT = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Config
  MUTEX = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::GC
  MAX_COUNT = ::T.let(nil, ::T.untyped)
  MAX_TIME = ::T.let(nil, ::T.untyped)
  METHODS = ::T.let(nil, ::T.untyped)
  TH_KEY = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Instrumenter
  KEY = ::T.let(nil, ::T.untyped)
  TOO_MANY_UNIQUES = ::T.let(nil, ::T.untyped)
end

module Skylight::Core::Normalizers
  DEFAULT = ::T.let(nil, ::T.untyped)
end

module Skylight::Core::Normalizers::ActionController
end

class Skylight::Core::Normalizers::ActionController::ProcessAction
  def normalize(trace, _name, payload); end

  def normalize_after(trace, _span, _name, payload); end
  CAT = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Normalizers::ActionController::ProcessAction
end

class Skylight::Core::Normalizers::ActionController::SendFile
  def initialize(*_); end
  ATTACHMENT = ::T.let(nil, ::T.untyped)
  CAT = ::T.let(nil, ::T.untyped)
  OCTET_STREAM = ::T.let(nil, ::T.untyped)
  TITLE = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Normalizers::ActionController::SendFile
end

module Skylight::Core::Normalizers::ActionController
end

module Skylight::Core::Normalizers::ActionDispatch
end

class Skylight::Core::Normalizers::ActionDispatch::ProcessMiddleware
  def normalize(trace, _name, payload); end
  ANONYMOUS = ::T.let(nil, ::T.untyped)
  ANONYMOUS_MIDDLEWARE = ::T.let(nil, ::T.untyped)
  CAT = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Normalizers::ActionDispatch::ProcessMiddleware
end

module Skylight::Core::Normalizers::ActionDispatch
end

module Skylight::Core::Normalizers::ActionView
end

class Skylight::Core::Normalizers::ActionView::RenderCollection
  def normalize(_trace, _name, payload); end
  CAT = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Normalizers::ActionView::RenderCollection
end

class Skylight::Core::Normalizers::ActionView::RenderPartial
  def normalize(_trace, _name, payload); end
  CAT = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Normalizers::ActionView::RenderPartial
end

class Skylight::Core::Normalizers::ActionView::RenderTemplate
  def normalize(_trace, _name, payload); end
  CAT = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Normalizers::ActionView::RenderTemplate
end

module Skylight::Core::Normalizers::ActionView
end

module Skylight::Core::Normalizers::ActiveJob
end

class Skylight::Core::Normalizers::ActiveJob::Perform
  def normalize(trace, _name, payload); end

  def normalize_after(trace, _span, _name, payload); end
  CAT = ::T.let(nil, ::T.untyped)
  DELAYED_JOB_WRAPPER = ::T.let(nil, ::T.untyped)
  DELIVERY_JOB = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Normalizers::ActiveJob::Perform
  def self.normalize_title(job_instance); end
end

module Skylight::Core::Normalizers::ActiveJob
end

module Skylight::Core::Normalizers::ActiveModelSerializers
end

class Skylight::Core::Normalizers::ActiveModelSerializers::Render
  def normalize(_trace, _name, payload); end
  ANONYMOUS = ::T.let(nil, ::T.untyped)
  CAT = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Normalizers::ActiveModelSerializers::Render
end

module Skylight::Core::Normalizers::ActiveModelSerializers
end

module Skylight::Core::Normalizers::ActiveRecord
end

class Skylight::Core::Normalizers::ActiveRecord::Instantiation
  def normalize(_trace, _name, payload); end
  CAT = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Normalizers::ActiveRecord::Instantiation
end

class Skylight::Core::Normalizers::ActiveRecord::SQL
end

class Skylight::Core::Normalizers::ActiveRecord::SQL
end

module Skylight::Core::Normalizers::ActiveRecord
end

class Skylight::Core::Normalizers::ActiveStorage
  def normalize(_trace, name, _payload); end
  TITLES = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Normalizers::ActiveStorage
end

module Skylight::Core::Normalizers::ActiveSupport
end

class Skylight::Core::Normalizers::ActiveSupport::Cache
end

class Skylight::Core::Normalizers::ActiveSupport::Cache
end

class Skylight::Core::Normalizers::ActiveSupport::CacheClear
  CAT = ::T.let(nil, ::T.untyped)
  TITLE = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Normalizers::ActiveSupport::CacheClear
end

class Skylight::Core::Normalizers::ActiveSupport::CacheDecrement
  CAT = ::T.let(nil, ::T.untyped)
  TITLE = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Normalizers::ActiveSupport::CacheDecrement
end

class Skylight::Core::Normalizers::ActiveSupport::CacheDelete
  CAT = ::T.let(nil, ::T.untyped)
  TITLE = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Normalizers::ActiveSupport::CacheDelete
end

class Skylight::Core::Normalizers::ActiveSupport::CacheExist
  CAT = ::T.let(nil, ::T.untyped)
  TITLE = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Normalizers::ActiveSupport::CacheExist
end

class Skylight::Core::Normalizers::ActiveSupport::CacheFetchHit
  CAT = ::T.let(nil, ::T.untyped)
  TITLE = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Normalizers::ActiveSupport::CacheFetchHit
end

class Skylight::Core::Normalizers::ActiveSupport::CacheGenerate
  CAT = ::T.let(nil, ::T.untyped)
  TITLE = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Normalizers::ActiveSupport::CacheGenerate
end

class Skylight::Core::Normalizers::ActiveSupport::CacheIncrement
  CAT = ::T.let(nil, ::T.untyped)
  TITLE = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Normalizers::ActiveSupport::CacheIncrement
end

class Skylight::Core::Normalizers::ActiveSupport::CacheRead
  CAT = ::T.let(nil, ::T.untyped)
  TITLE = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Normalizers::ActiveSupport::CacheRead
end

class Skylight::Core::Normalizers::ActiveSupport::CacheReadMulti
  CAT = ::T.let(nil, ::T.untyped)
  TITLE = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Normalizers::ActiveSupport::CacheReadMulti
end

class Skylight::Core::Normalizers::ActiveSupport::CacheWrite
  CAT = ::T.let(nil, ::T.untyped)
  TITLE = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Normalizers::ActiveSupport::CacheWrite
end

module Skylight::Core::Normalizers::ActiveSupport
end

module Skylight::Core::Normalizers::Coach
end

class Skylight::Core::Normalizers::Coach::HandlerFinish
  def normalize(trace, _name, payload); end

  def normalize_after(trace, _span, _name, payload); end
  CAT = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Normalizers::Coach::HandlerFinish
end

class Skylight::Core::Normalizers::Coach::MiddlewareFinish
  def normalize(trace, _name, payload); end
  CAT = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Normalizers::Coach::MiddlewareFinish
end

module Skylight::Core::Normalizers::Coach
end

class Skylight::Core::Normalizers::Container
  def initialize(normalizers); end

  def keys(); end

  def normalize(trace, name, payload); end

  def normalize_after(trace, span, name, payload); end

  def normalizer_for(name); end
end

class Skylight::Core::Normalizers::Container
end

module Skylight::Core::Normalizers::CouchPotato
end

class Skylight::Core::Normalizers::CouchPotato::Query
  def normalize(_trace, name, payload); end
  CAT = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Normalizers::CouchPotato::Query
end

module Skylight::Core::Normalizers::CouchPotato
end

module Skylight::Core::Normalizers::DataMapper
end

class Skylight::Core::Normalizers::DataMapper::SQL
end

class Skylight::Core::Normalizers::DataMapper::SQL
end

module Skylight::Core::Normalizers::DataMapper
end

class Skylight::Core::Normalizers::Default
  def normalize(_trace, name, payload); end
end

class Skylight::Core::Normalizers::Default
end

module Skylight::Core::Normalizers::Elasticsearch
end

class Skylight::Core::Normalizers::Elasticsearch::Request
  def normalize(_trace, _name, payload); end
  CAT = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Normalizers::Elasticsearch::Request
end

module Skylight::Core::Normalizers::Elasticsearch
end

module Skylight::Core::Normalizers::Faraday
end

class Skylight::Core::Normalizers::Faraday::Request
  def disabled?(); end

  def normalize(_trace, _name, payload); end
  DISABLED_KEY = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Normalizers::Faraday::Request
  def self.disable(); end
end

module Skylight::Core::Normalizers::Faraday
end

module Skylight::Core::Normalizers::Grape
end

class Skylight::Core::Normalizers::Grape::Endpoint
end

class Skylight::Core::Normalizers::Grape::Endpoint
end

class Skylight::Core::Normalizers::Grape::EndpointRender
  def normalize(_trace, _name, payload); end
  CAT = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Normalizers::Grape::EndpointRender
end

class Skylight::Core::Normalizers::Grape::EndpointRun
  def normalize(trace, _name, payload); end
end

class Skylight::Core::Normalizers::Grape::EndpointRun
end

class Skylight::Core::Normalizers::Grape::EndpointRunFilters
  def normalize(_trace, _name, payload); end
  CAT = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Normalizers::Grape::EndpointRunFilters
end

class Skylight::Core::Normalizers::Grape::FormatResponse
  def normalize(_trace, _name, payload); end
  CAT = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Normalizers::Grape::FormatResponse
end

module Skylight::Core::Normalizers::Grape
end

module Skylight::Core::Normalizers::GraphQL
end

class Skylight::Core::Normalizers::GraphQL::AnalyzeQuery
  KEY = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Normalizers::GraphQL::AnalyzeQuery
end

class Skylight::Core::Normalizers::GraphQL::Base
  ANONYMOUS = ::T.let(nil, ::T.untyped)
  CAT = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Normalizers::GraphQL::Base
  def self.inherited(klass); end

  def self.key(); end

  def self.register_graphql(); end
end

class Skylight::Core::Normalizers::GraphQL::ExecuteMultiplex
  def normalize_after(trace, _span, _name, payload); end
  KEY = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Normalizers::GraphQL::ExecuteMultiplex
end

class Skylight::Core::Normalizers::GraphQL::ExecuteQuery
  def normalize(trace, _name, payload); end
  KEY = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Normalizers::GraphQL::ExecuteQuery
end

class Skylight::Core::Normalizers::GraphQL::ExecuteQueryLazy
  KEY = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Normalizers::GraphQL::ExecuteQueryLazy
end

class Skylight::Core::Normalizers::GraphQL::Lex
  KEY = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Normalizers::GraphQL::Lex
end

class Skylight::Core::Normalizers::GraphQL::Parse
  KEY = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Normalizers::GraphQL::Parse
end

class Skylight::Core::Normalizers::GraphQL::Validate
  KEY = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Normalizers::GraphQL::Validate
end

module Skylight::Core::Normalizers::GraphQL
end

module Skylight::Core::Normalizers::Graphiti
end

class Skylight::Core::Normalizers::Graphiti::Render
  def normalize(_trace, _name, payload); end
  ANONYMOUS = ::T.let(nil, ::T.untyped)
  CAT = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Normalizers::Graphiti::Render
end

class Skylight::Core::Normalizers::Graphiti::Resolve
  def normalize(_trace, _name, payload); end
  ANONYMOUS_ADAPTER = ::T.let(nil, ::T.untyped)
  ANONYMOUS_RESOURCE = ::T.let(nil, ::T.untyped)
  CAT = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Normalizers::Graphiti::Resolve
end

module Skylight::Core::Normalizers::Graphiti
end

module Skylight::Core::Normalizers::Moped
end

class Skylight::Core::Normalizers::Moped::Query
  def normalize(_trace, _name, payload); end
  CAT = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Normalizers::Moped::Query
end

module Skylight::Core::Normalizers::Moped
end

class Skylight::Core::Normalizers::Normalizer
  def config(); end

  def initialize(config); end

  def normalize(_trace, _name, _payload); end

  def normalize_after(trace, span, name, payload); end
end

class Skylight::Core::Normalizers::Normalizer
  def self.register(name, opts=T.unsafe(nil)); end
end

class Skylight::Core::Normalizers::RenderNormalizer
  include ::Skylight::Core::Util::AllocationFree
  def normalize_render(category, payload); end

  def relative_path(path); end

  def setup(); end
  SEPARATOR_BYTE = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Normalizers::RenderNormalizer
end

class Skylight::Core::Normalizers::SQL
  def normalize(trace, name, payload); end
  CAT = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Normalizers::SQL
end

module Skylight::Core::Normalizers::Sequel
end

class Skylight::Core::Normalizers::Sequel::SQL
end

class Skylight::Core::Normalizers::Sequel::SQL
end

module Skylight::Core::Normalizers::Sequel
end

module Skylight::Core::Normalizers
  def self.build(config); end

  def self.disable(*names); end

  def self.enable(*names, enabled: T.unsafe(nil)); end

  def self.register(name, klass, opts=T.unsafe(nil)); end

  def self.registry(); end

  def self.unregister(name); end
end

class Skylight::Core::Probes::ActiveJob::EnqueueProbe
  CAT = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Probes::Middleware::Probe
  DISABLED_KEY = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Probes::NetHTTP::Probe
  DISABLED_KEY = ::T.let(nil, ::T.untyped)
end

class Skylight::Core::Trace
  GC_CAT = ::T.let(nil, ::T.untyped)
end

class Skylight::Util::Component
  DEFAULT_ENVIRONMENT = ::T.let(nil, ::T.untyped)
  DEFAULT_NAME = ::T.let(nil, ::T.untyped)
  NAME_FORMAT = ::T.let(nil, ::T.untyped)
  WORKER_NAME = ::T.let(nil, ::T.untyped)
end

module Skylight::Util::Deploy
  DEPLOY_TYPES = ::T.let(nil, ::T.untyped)
end

class Skylight::Util::HTTP
  ACCEPT = ::T.let(nil, ::T.untyped)
  APPLICATION_JSON = ::T.let(nil, ::T.untyped)
  AUTHORIZATION = ::T.let(nil, ::T.untyped)
  CONTENT_ENCODING = ::T.let(nil, ::T.untyped)
  CONTENT_LENGTH = ::T.let(nil, ::T.untyped)
  CONTENT_TYPE = ::T.let(nil, ::T.untyped)
  DEFLATE = ::T.let(nil, ::T.untyped)
  GZIP = ::T.let(nil, ::T.untyped)
  READ_EXCEPTIONS = ::T.let(nil, ::T.untyped)
  X_VERSION_HDR = ::T.let(nil, ::T.untyped)
end

module Skylight::Util::Platform
  ARCH = ::T.let(nil, ::T.untyped)
  LIBEXT = ::T.let(nil, ::T.untyped)
  OS = ::T.let(nil, ::T.untyped)
  TUPLE = ::T.let(nil, ::T.untyped)
end

class Skylight::Util::SSL
  DEFAULT_CA_FILE = ::T.let(nil, ::T.untyped)
end

class Socket
  AF_CCITT = ::T.let(nil, ::T.untyped)
  AF_CHAOS = ::T.let(nil, ::T.untyped)
  AF_CNT = ::T.let(nil, ::T.untyped)
  AF_COIP = ::T.let(nil, ::T.untyped)
  AF_DATAKIT = ::T.let(nil, ::T.untyped)
  AF_DLI = ::T.let(nil, ::T.untyped)
  AF_E164 = ::T.let(nil, ::T.untyped)
  AF_ECMA = ::T.let(nil, ::T.untyped)
  AF_HYLINK = ::T.let(nil, ::T.untyped)
  AF_IMPLINK = ::T.let(nil, ::T.untyped)
  AF_ISO = ::T.let(nil, ::T.untyped)
  AF_LAT = ::T.let(nil, ::T.untyped)
  AF_LINK = ::T.let(nil, ::T.untyped)
  AF_NATM = ::T.let(nil, ::T.untyped)
  AF_NDRV = ::T.let(nil, ::T.untyped)
  AF_NETBIOS = ::T.let(nil, ::T.untyped)
  AF_NS = ::T.let(nil, ::T.untyped)
  AF_OSI = ::T.let(nil, ::T.untyped)
  AF_PPP = ::T.let(nil, ::T.untyped)
  AF_PUP = ::T.let(nil, ::T.untyped)
  AF_SIP = ::T.let(nil, ::T.untyped)
  AF_SYSTEM = ::T.let(nil, ::T.untyped)
  AI_DEFAULT = ::T.let(nil, ::T.untyped)
  AI_MASK = ::T.let(nil, ::T.untyped)
  AI_V4MAPPED_CFG = ::T.let(nil, ::T.untyped)
  EAI_BADHINTS = ::T.let(nil, ::T.untyped)
  EAI_MAX = ::T.let(nil, ::T.untyped)
  EAI_PROTOCOL = ::T.let(nil, ::T.untyped)
  IFF_ALTPHYS = ::T.let(nil, ::T.untyped)
  IFF_LINK0 = ::T.let(nil, ::T.untyped)
  IFF_LINK1 = ::T.let(nil, ::T.untyped)
  IFF_LINK2 = ::T.let(nil, ::T.untyped)
  IFF_OACTIVE = ::T.let(nil, ::T.untyped)
  IFF_SIMPLEX = ::T.let(nil, ::T.untyped)
  IPPROTO_EON = ::T.let(nil, ::T.untyped)
  IPPROTO_GGP = ::T.let(nil, ::T.untyped)
  IPPROTO_HELLO = ::T.let(nil, ::T.untyped)
  IPPROTO_MAX = ::T.let(nil, ::T.untyped)
  IPPROTO_ND = ::T.let(nil, ::T.untyped)
  IPPROTO_XTP = ::T.let(nil, ::T.untyped)
  IPV6_DONTFRAG = ::T.let(nil, ::T.untyped)
  IPV6_PATHMTU = ::T.let(nil, ::T.untyped)
  IPV6_RECVPATHMTU = ::T.let(nil, ::T.untyped)
  IPV6_USE_MIN_MTU = ::T.let(nil, ::T.untyped)
  IP_PORTRANGE = ::T.let(nil, ::T.untyped)
  IP_RECVDSTADDR = ::T.let(nil, ::T.untyped)
  IP_RECVIF = ::T.let(nil, ::T.untyped)
  LOCAL_PEERCRED = ::T.let(nil, ::T.untyped)
  MSG_EOF = ::T.let(nil, ::T.untyped)
  MSG_FLUSH = ::T.let(nil, ::T.untyped)
  MSG_HAVEMORE = ::T.let(nil, ::T.untyped)
  MSG_HOLD = ::T.let(nil, ::T.untyped)
  MSG_RCVMORE = ::T.let(nil, ::T.untyped)
  MSG_SEND = ::T.let(nil, ::T.untyped)
  PF_CCITT = ::T.let(nil, ::T.untyped)
  PF_CHAOS = ::T.let(nil, ::T.untyped)
  PF_CNT = ::T.let(nil, ::T.untyped)
  PF_COIP = ::T.let(nil, ::T.untyped)
  PF_DATAKIT = ::T.let(nil, ::T.untyped)
  PF_DLI = ::T.let(nil, ::T.untyped)
  PF_ECMA = ::T.let(nil, ::T.untyped)
  PF_HYLINK = ::T.let(nil, ::T.untyped)
  PF_IMPLINK = ::T.let(nil, ::T.untyped)
  PF_ISO = ::T.let(nil, ::T.untyped)
  PF_LAT = ::T.let(nil, ::T.untyped)
  PF_LINK = ::T.let(nil, ::T.untyped)
  PF_NATM = ::T.let(nil, ::T.untyped)
  PF_NDRV = ::T.let(nil, ::T.untyped)
  PF_NETBIOS = ::T.let(nil, ::T.untyped)
  PF_NS = ::T.let(nil, ::T.untyped)
  PF_OSI = ::T.let(nil, ::T.untyped)
  PF_PIP = ::T.let(nil, ::T.untyped)
  PF_PPP = ::T.let(nil, ::T.untyped)
  PF_PUP = ::T.let(nil, ::T.untyped)
  PF_RTIP = ::T.let(nil, ::T.untyped)
  PF_SIP = ::T.let(nil, ::T.untyped)
  PF_SYSTEM = ::T.let(nil, ::T.untyped)
  PF_XTP = ::T.let(nil, ::T.untyped)
  SCM_CREDS = ::T.let(nil, ::T.untyped)
  SO_DONTTRUNC = ::T.let(nil, ::T.untyped)
  SO_NKE = ::T.let(nil, ::T.untyped)
  SO_NOSIGPIPE = ::T.let(nil, ::T.untyped)
  SO_NREAD = ::T.let(nil, ::T.untyped)
  SO_USELOOPBACK = ::T.let(nil, ::T.untyped)
  SO_WANTMORE = ::T.let(nil, ::T.untyped)
  SO_WANTOOBFLAG = ::T.let(nil, ::T.untyped)
  TCP_NOOPT = ::T.let(nil, ::T.untyped)
  TCP_NOPUSH = ::T.let(nil, ::T.untyped)
end

module Socket::Constants
  AF_CCITT = ::T.let(nil, ::T.untyped)
  AF_CHAOS = ::T.let(nil, ::T.untyped)
  AF_CNT = ::T.let(nil, ::T.untyped)
  AF_COIP = ::T.let(nil, ::T.untyped)
  AF_DATAKIT = ::T.let(nil, ::T.untyped)
  AF_DLI = ::T.let(nil, ::T.untyped)
  AF_E164 = ::T.let(nil, ::T.untyped)
  AF_ECMA = ::T.let(nil, ::T.untyped)
  AF_HYLINK = ::T.let(nil, ::T.untyped)
  AF_IMPLINK = ::T.let(nil, ::T.untyped)
  AF_ISO = ::T.let(nil, ::T.untyped)
  AF_LAT = ::T.let(nil, ::T.untyped)
  AF_LINK = ::T.let(nil, ::T.untyped)
  AF_NATM = ::T.let(nil, ::T.untyped)
  AF_NDRV = ::T.let(nil, ::T.untyped)
  AF_NETBIOS = ::T.let(nil, ::T.untyped)
  AF_NS = ::T.let(nil, ::T.untyped)
  AF_OSI = ::T.let(nil, ::T.untyped)
  AF_PPP = ::T.let(nil, ::T.untyped)
  AF_PUP = ::T.let(nil, ::T.untyped)
  AF_SIP = ::T.let(nil, ::T.untyped)
  AF_SYSTEM = ::T.let(nil, ::T.untyped)
  AI_DEFAULT = ::T.let(nil, ::T.untyped)
  AI_MASK = ::T.let(nil, ::T.untyped)
  AI_V4MAPPED_CFG = ::T.let(nil, ::T.untyped)
  EAI_BADHINTS = ::T.let(nil, ::T.untyped)
  EAI_MAX = ::T.let(nil, ::T.untyped)
  EAI_PROTOCOL = ::T.let(nil, ::T.untyped)
  IFF_ALTPHYS = ::T.let(nil, ::T.untyped)
  IFF_LINK0 = ::T.let(nil, ::T.untyped)
  IFF_LINK1 = ::T.let(nil, ::T.untyped)
  IFF_LINK2 = ::T.let(nil, ::T.untyped)
  IFF_OACTIVE = ::T.let(nil, ::T.untyped)
  IFF_SIMPLEX = ::T.let(nil, ::T.untyped)
  IPPROTO_EON = ::T.let(nil, ::T.untyped)
  IPPROTO_GGP = ::T.let(nil, ::T.untyped)
  IPPROTO_HELLO = ::T.let(nil, ::T.untyped)
  IPPROTO_MAX = ::T.let(nil, ::T.untyped)
  IPPROTO_ND = ::T.let(nil, ::T.untyped)
  IPPROTO_XTP = ::T.let(nil, ::T.untyped)
  IPV6_DONTFRAG = ::T.let(nil, ::T.untyped)
  IPV6_PATHMTU = ::T.let(nil, ::T.untyped)
  IPV6_RECVPATHMTU = ::T.let(nil, ::T.untyped)
  IPV6_USE_MIN_MTU = ::T.let(nil, ::T.untyped)
  IP_PORTRANGE = ::T.let(nil, ::T.untyped)
  IP_RECVDSTADDR = ::T.let(nil, ::T.untyped)
  IP_RECVIF = ::T.let(nil, ::T.untyped)
  LOCAL_PEERCRED = ::T.let(nil, ::T.untyped)
  MSG_EOF = ::T.let(nil, ::T.untyped)
  MSG_FLUSH = ::T.let(nil, ::T.untyped)
  MSG_HAVEMORE = ::T.let(nil, ::T.untyped)
  MSG_HOLD = ::T.let(nil, ::T.untyped)
  MSG_RCVMORE = ::T.let(nil, ::T.untyped)
  MSG_SEND = ::T.let(nil, ::T.untyped)
  PF_CCITT = ::T.let(nil, ::T.untyped)
  PF_CHAOS = ::T.let(nil, ::T.untyped)
  PF_CNT = ::T.let(nil, ::T.untyped)
  PF_COIP = ::T.let(nil, ::T.untyped)
  PF_DATAKIT = ::T.let(nil, ::T.untyped)
  PF_DLI = ::T.let(nil, ::T.untyped)
  PF_ECMA = ::T.let(nil, ::T.untyped)
  PF_HYLINK = ::T.let(nil, ::T.untyped)
  PF_IMPLINK = ::T.let(nil, ::T.untyped)
  PF_ISO = ::T.let(nil, ::T.untyped)
  PF_LAT = ::T.let(nil, ::T.untyped)
  PF_LINK = ::T.let(nil, ::T.untyped)
  PF_NATM = ::T.let(nil, ::T.untyped)
  PF_NDRV = ::T.let(nil, ::T.untyped)
  PF_NETBIOS = ::T.let(nil, ::T.untyped)
  PF_NS = ::T.let(nil, ::T.untyped)
  PF_OSI = ::T.let(nil, ::T.untyped)
  PF_PIP = ::T.let(nil, ::T.untyped)
  PF_PPP = ::T.let(nil, ::T.untyped)
  PF_PUP = ::T.let(nil, ::T.untyped)
  PF_RTIP = ::T.let(nil, ::T.untyped)
  PF_SIP = ::T.let(nil, ::T.untyped)
  PF_SYSTEM = ::T.let(nil, ::T.untyped)
  PF_XTP = ::T.let(nil, ::T.untyped)
  SCM_CREDS = ::T.let(nil, ::T.untyped)
  SO_DONTTRUNC = ::T.let(nil, ::T.untyped)
  SO_NKE = ::T.let(nil, ::T.untyped)
  SO_NOSIGPIPE = ::T.let(nil, ::T.untyped)
  SO_NREAD = ::T.let(nil, ::T.untyped)
  SO_USELOOPBACK = ::T.let(nil, ::T.untyped)
  SO_WANTMORE = ::T.let(nil, ::T.untyped)
  SO_WANTOOBFLAG = ::T.let(nil, ::T.untyped)
  TCP_NOOPT = ::T.let(nil, ::T.untyped)
  TCP_NOPUSH = ::T.let(nil, ::T.untyped)
end

SorbetRails::ModelPlugins::Base::Parameter = Parlour::RbiGenerator::Parameter

module SorbetRails
  extend ::T::Private::Methods::SingletonMethodHooks
end

class SortedSet
  def initialize(*args, &block); end
end

class SortedSet
  def self.setup(); end
end

module Sprockets
  VERSION = ::T.let(nil, ::T.untyped)
end

class Sprockets::AddSourceMapCommentToAssetProcessor
end

class Sprockets::AddSourceMapCommentToAssetProcessor
  def self.call(input); end
end

class Sprockets::ArgumentError
end

class Sprockets::ArgumentError
end

class Sprockets::Asset
  def ==(other); end

  def base64digest(); end

  def bytesize(); end

  def charset(); end

  def content_type(); end

  def digest(); end

  def digest_path(); end

  def each(&blk); end

  def environment_version(); end

  def eql?(other); end

  def etag(); end

  def filename(); end

  def full_digest_path(); end

  def hexdigest(); end

  def id(); end

  def initialize(attributes=T.unsafe(nil)); end

  def integrity(); end

  def length(); end

  def links(); end

  def logical_path(); end

  def metadata(); end

  def source(); end

  def to_hash(); end

  def uri(); end

  def write_to(filename); end
end

class Sprockets::Asset
end

module Sprockets::Autoload
end

Sprockets::Autoload::SassC = SassC

module Sprockets::Autoload
end

class Sprockets::BabelProcessor
  def cache_key(); end

  def call(input); end

  def initialize(options=T.unsafe(nil)); end
  VERSION = ::T.let(nil, ::T.untyped)
end

class Sprockets::BabelProcessor
  def self.cache_key(); end

  def self.call(input); end

  def self.instance(); end
end

class Sprockets::Base
  include ::Sprockets::SourceMapUtils
  include ::Sprockets::Configuration
  include ::Sprockets::Dependencies
  include ::Sprockets::Compressing
  include ::Sprockets::Exporting
  include ::Sprockets::Server
  include ::Sprockets::Loader
  include ::Sprockets::DigestUtils
  include ::Sprockets::Transformers
  include ::Sprockets::Resolve
  include ::Sprockets::PathDependencyUtils
  include ::Sprockets::PathUtils
  include ::Sprockets::Processing
  include ::Sprockets::Mime
  include ::Sprockets::Paths
  include ::Sprockets::Utils
  include ::Sprockets::URIUtils
  include ::Sprockets::PathDigestUtils
  include ::Sprockets::ProcessorUtils
  include ::Sprockets::HTTPUtils
  include ::Sprockets::Bower
  include ::Sprockets::Npm
  def [](*args, **options); end

  def cache(); end

  def cache=(cache); end

  def cached(); end

  def compress_from_root(uri); end

  def expand_from_root(uri); end

  def find_all_linked_assets(*args); end

  def find_asset(*args, **options); end

  def find_asset!(*args); end

  def index(); end
end

class Sprockets::Base
end

module Sprockets::Bower
  def read_bower_main(dirname, filename); end

  def resolve_alternates(load_path, logical_path); end
  POSSIBLE_BOWER_JSONS = ::T.let(nil, ::T.untyped)
end

module Sprockets::Bower
end

class Sprockets::Bundle
end

class Sprockets::Bundle
  def self.call(input); end

  def self.dedup(required); end

  def self.process_bundle_reducers(input, assets, reducers); end
end

class Sprockets::Cache
  def clear(options=T.unsafe(nil)); end

  def fetch(key); end

  def get(key, local=T.unsafe(nil)); end

  def initialize(cache=T.unsafe(nil), logger=T.unsafe(nil)); end

  def set(key, value, local=T.unsafe(nil)); end
  PEEK_SIZE = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Sprockets::Cache::FileStore
  def clear(options=T.unsafe(nil)); end

  def get(key); end

  def initialize(root, max_size=T.unsafe(nil), logger=T.unsafe(nil)); end

  def set(key, value); end
  DEFAULT_MAX_SIZE = ::T.let(nil, ::T.untyped)
  EXCLUDED_DIRS = ::T.let(nil, ::T.untyped)
  GITKEEP_FILES = ::T.let(nil, ::T.untyped)
end

class Sprockets::Cache::FileStore
  def self.default_logger(); end
end

class Sprockets::Cache::GetWrapper
  def clear(options=T.unsafe(nil)); end

  def get(key); end

  def set(key, value); end
end

class Sprockets::Cache::GetWrapper
end

class Sprockets::Cache::HashWrapper
  def clear(options=T.unsafe(nil)); end

  def get(key); end

  def set(key, value); end
end

class Sprockets::Cache::HashWrapper
end

class Sprockets::Cache::MemoryStore
  def clear(options=T.unsafe(nil)); end

  def get(key); end

  def initialize(max_size=T.unsafe(nil)); end

  def set(key, value); end
  DEFAULT_MAX_SIZE = ::T.let(nil, ::T.untyped)
end

class Sprockets::Cache::MemoryStore
end

class Sprockets::Cache::NullStore
  def clear(options=T.unsafe(nil)); end

  def get(key); end

  def set(key, value); end
end

class Sprockets::Cache::NullStore
end

class Sprockets::Cache::ReadWriteWrapper
  def clear(options=T.unsafe(nil)); end

  def get(key); end

  def set(key, value); end
end

class Sprockets::Cache::ReadWriteWrapper
end

class Sprockets::Cache::Wrapper
end

class Sprockets::Cache::Wrapper
end

class Sprockets::Cache
  def self.default_logger(); end
end

class Sprockets::CachedEnvironment
  def initialize(environment); end

  def processor_cache_key(str); end
end

class Sprockets::CachedEnvironment
end

class Sprockets::ClosureCompressor
  def cache_key(); end

  def call(input); end

  def initialize(options=T.unsafe(nil)); end
  VERSION = ::T.let(nil, ::T.untyped)
end

class Sprockets::ClosureCompressor
  def self.cache_key(); end

  def self.call(input); end

  def self.instance(); end
end

module Sprockets::CoffeeScriptProcessor
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets::CoffeeScriptProcessor
  def self.cache_key(); end

  def self.call(input); end
end

module Sprockets::Compressing
  include ::Sprockets::Utils
  def compressors(); end

  def css_compressor(); end

  def css_compressor=(compressor); end

  def gzip=(gzip); end

  def gzip?(); end

  def js_compressor(); end

  def js_compressor=(compressor); end

  def register_compressor(mime_type, sym, klass); end

  def skip_gzip?(); end
end

module Sprockets::Compressing
end

module Sprockets::Configuration
  include ::Sprockets::Dependencies
  include ::Sprockets::Compressing
  include ::Sprockets::Exporting
  include ::Sprockets::Processing
  include ::Sprockets::Transformers
  include ::Sprockets::Mime
  include ::Sprockets::Paths
  include ::Sprockets::Utils
  include ::Sprockets::URIUtils
  include ::Sprockets::PathDigestUtils
  include ::Sprockets::ProcessorUtils
  include ::Sprockets::HTTPUtils
  include ::Sprockets::PathUtils
  include ::Sprockets::DigestUtils
  def config(); end

  def config=(config); end

  def context_class(); end

  def digest_class(); end

  def digest_class=(klass); end

  def initialize_configuration(parent); end

  def logger(); end

  def logger=(logger); end

  def version(); end

  def version=(version); end
end

module Sprockets::Configuration
end

class Sprockets::ContentTypeMismatch
end

class Sprockets::ContentTypeMismatch
end

class Sprockets::Context
  def asset_data_uri(path); end

  def asset_path(path, options=T.unsafe(nil)); end

  def audio_path(path); end

  def base64_asset_data_uri(asset); end

  def content_type(); end

  def depend_on(path); end

  def depend_on_asset(path); end

  def depend_on_env(key); end

  def env_proxy(); end

  def environment(); end

  def filename(); end

  def font_path(path); end

  def image_path(path); end

  def initialize(input); end

  def javascript_path(path); end

  def link_asset(path); end

  def load(uri); end

  def load_path(); end

  def logical_path(); end

  def metadata(); end

  def optimize_quoted_uri_escapes!(escaped); end

  def optimize_svg_for_uri_escaping!(svg); end

  def require_asset(path); end

  def resolve(path, **kargs); end

  def root_path(); end

  def stub_asset(path); end

  def stylesheet_path(path); end

  def svg_asset_data_uri(asset); end

  def video_path(path); end
end

class Sprockets::Context::ENVProxy
  def [](key); end

  def fetch(key, *_); end

  def initialize(context); end
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Sprockets::Context::ENVProxy
end

class Sprockets::Context
end

class Sprockets::ConversionError
end

class Sprockets::ConversionError
end

module Sprockets::Dependencies
  include ::Sprockets::URIUtils
  include ::Sprockets::PathDigestUtils
  include ::Sprockets::PathUtils
  include ::Sprockets::DigestUtils
  def add_dependency(uri); end

  def depend_on(uri); end

  def dependencies(); end

  def dependency_resolvers(); end

  def register_dependency_resolver(scheme, &block); end

  def resolve_dependency(str); end
end

module Sprockets::Dependencies
end

module Sprockets::DigestUtils
  def detect_digest_class(bytes); end

  def digest(obj); end

  def digest_class(); end

  def hexdigest(obj); end

  def hexdigest_integrity_uri(hexdigest); end

  def integrity_uri(digest); end

  def pack_base64digest(bin); end

  def pack_hexdigest(bin); end

  def pack_urlsafe_base64digest(bin); end

  def unpack_hexdigest(hex); end
  DIGEST_SIZES = ::T.let(nil, ::T.untyped)
  HASH_ALGORITHMS = ::T.let(nil, ::T.untyped)
end

module Sprockets::DigestUtils
  extend ::Sprockets::DigestUtils
end

class Sprockets::DirectiveProcessor
  def _call(input); end

  def call(input); end

  def compile_header_pattern(comments); end

  def extract_directives(header); end

  def initialize(comments: T.unsafe(nil)); end

  def process_depend_on_asset_directive(path); end

  def process_depend_on_directive(path); end

  def process_directives(directives); end

  def process_link_directive(path); end

  def process_link_directory_directive(path=T.unsafe(nil), accept=T.unsafe(nil)); end

  def process_link_tree_directive(path=T.unsafe(nil), accept=T.unsafe(nil)); end

  def process_require_directive(path); end

  def process_require_directory_directive(path=T.unsafe(nil)); end

  def process_require_self_directive(); end

  def process_require_tree_directive(path=T.unsafe(nil)); end

  def process_source(source); end

  def process_stub_directive(path); end
  DIRECTIVE_PATTERN = ::T.let(nil, ::T.untyped)
end

class Sprockets::DirectiveProcessor
  def self.call(input); end

  def self.instance(); end
end

class Sprockets::DoubleLinkError
  def initialize(parent_filename:, logical_path:, last_filename:, filename:); end
end

class Sprockets::DoubleLinkError
end

class Sprockets::ERBProcessor
  def call(input); end

  def initialize(&block); end
end

class Sprockets::ERBProcessor
  def self.call(input); end

  def self.instance(); end
end

module Sprockets::EcoProcessor
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets::EcoProcessor
  def self.cache_key(); end

  def self.call(input); end
end

module Sprockets::EjsProcessor
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets::EjsProcessor
  def self.cache_key(); end

  def self.call(input); end
end

module Sprockets::EncodingUtils
  def base64(str); end

  def charlock_detect(str); end

  def deflate(str); end

  def detect(str); end

  def detect_css(str); end

  def detect_html(str); end

  def detect_unicode(str); end

  def detect_unicode_bom(str); end

  def gzip(str); end

  def scan_css_charset(str); end

  def unmarshaled_deflated(str, window_bits=T.unsafe(nil)); end
  BOM = ::T.let(nil, ::T.untyped)
  CHARSET_DETECT = ::T.let(nil, ::T.untyped)
  CHARSET_SIZE = ::T.let(nil, ::T.untyped)
  CHARSET_START = ::T.let(nil, ::T.untyped)
end

module Sprockets::EncodingUtils
  extend ::Sprockets::EncodingUtils
end

class Sprockets::Environment
  def find_all_linked_assets(*args, &block); end

  def initialize(root=T.unsafe(nil)); end

  def load(*args); end
end

class Sprockets::Environment
end

class Sprockets::Error
end

class Sprockets::Error
end

module Sprockets::Exporters
end

class Sprockets::Exporters::Base
  def asset(); end

  def call(); end

  def directory(); end

  def environment(); end

  def initialize(asset: T.unsafe(nil), environment: T.unsafe(nil), directory: T.unsafe(nil)); end

  def setup(); end

  def skip?(logger); end

  def target(); end

  def write(filename=T.unsafe(nil)); end
end

class Sprockets::Exporters::Base
end

class Sprockets::Exporters::FileExporter
end

class Sprockets::Exporters::FileExporter
end

class Sprockets::Exporters::ZlibExporter
end

class Sprockets::Exporters::ZlibExporter
end

class Sprockets::Exporters::ZopfliExporter
end

class Sprockets::Exporters::ZopfliExporter
end

module Sprockets::Exporters
end

module Sprockets::Exporting
  def export_concurrent(); end

  def export_concurrent=(export_concurrent); end

  def exporters(); end

  def register_exporter(mime_types, klass=T.unsafe(nil)); end

  def unregister_exporter(mime_types, exporter=T.unsafe(nil)); end
end

module Sprockets::Exporting
end

class Sprockets::FileNotFound
end

class Sprockets::FileNotFound
end

class Sprockets::FileOutsidePaths
end

class Sprockets::FileOutsidePaths
end

class Sprockets::FileReader
end

class Sprockets::FileReader
  def self.call(input); end
end

module Sprockets::HTTPUtils
  def find_best_mime_type_match(q_value_header, available); end

  def find_best_q_match(q_values, available, &matcher); end

  def find_mime_type_matches(q_value_header, available); end

  def find_q_matches(q_values, available, &matcher); end

  def match_mime_type?(value, matcher); end

  def match_mime_type_keys(hash, mime_type); end

  def parse_q_values(values); end
end

module Sprockets::HTTPUtils
  extend ::Sprockets::HTTPUtils
end

class Sprockets::JSMincCompressor
  def cache_key(); end

  def call(input); end

  def initialize(options=T.unsafe(nil)); end
  VERSION = ::T.let(nil, ::T.untyped)
end

class Sprockets::JSMincCompressor
  def self.cache_key(); end

  def self.call(input); end

  def self.instance(); end
end

class Sprockets::JstProcessor
  def call(input); end

  def initialize(namespace: T.unsafe(nil)); end
end

class Sprockets::JstProcessor
  def self.call(input); end

  def self.default_namespace(); end

  def self.instance(); end
end

module Sprockets::Loader
  include ::Sprockets::DigestUtils
  include ::Sprockets::Transformers
  include ::Sprockets::Resolve
  include ::Sprockets::PathDependencyUtils
  include ::Sprockets::PathUtils
  include ::Sprockets::Processing
  include ::Sprockets::Mime
  include ::Sprockets::Utils
  include ::Sprockets::URIUtils
  include ::Sprockets::ProcessorUtils
  include ::Sprockets::HTTPUtils
  def load(uri); end
end

module Sprockets::Loader
end

class Sprockets::Manifest
  include ::Sprockets::ManifestUtils
  def assets(); end

  def clean(count=T.unsafe(nil), age=T.unsafe(nil)); end

  def clobber(); end

  def compile(*args); end

  def dir(); end

  def directory(); end

  def environment(); end

  def filename(); end

  def files(); end

  def find(*args); end

  def find_sources(*args); end

  def initialize(*args); end

  def path(); end

  def remove(filename); end

  def save(); end
end

class Sprockets::Manifest
end

module Sprockets::ManifestUtils
  def find_directory_manifest(dirname, logger=T.unsafe(nil)); end

  def generate_manifest_path(); end
  MANIFEST_RE = ::T.let(nil, ::T.untyped)
end

module Sprockets::ManifestUtils
  extend ::Sprockets::ManifestUtils
end

module Sprockets::Mime
  include ::Sprockets::Utils
  include ::Sprockets::HTTPUtils
  def mime_exts(); end

  def mime_type_charset_detecter(mime_type); end

  def mime_types(); end

  def read_file(filename, content_type=T.unsafe(nil)); end

  def register_mime_type(mime_type, extensions: T.unsafe(nil), charset: T.unsafe(nil)); end
end

module Sprockets::Mime
end

class Sprockets::NotFound
end

class Sprockets::NotFound
end

class Sprockets::NotImplementedError
end

class Sprockets::NotImplementedError
end

module Sprockets::Npm
  def read_package_directives(dirname, filename); end

  def resolve_alternates(load_path, logical_path); end
end

module Sprockets::Npm
end

module Sprockets::PathDependencyUtils
  include ::Sprockets::PathUtils
  include ::Sprockets::URIUtils
  def entries_with_dependencies(path); end

  def stat_directory_with_dependencies(dir); end

  def stat_sorted_tree_with_dependencies(dir); end
end

module Sprockets::PathDependencyUtils
end

module Sprockets::PathDigestUtils
  include ::Sprockets::PathUtils
  include ::Sprockets::DigestUtils
  def file_digest(path); end

  def files_digest(paths); end

  def stat_digest(path, stat); end
end

module Sprockets::PathDigestUtils
end

module Sprockets::PathUtils
  def absolute_path?(path); end

  def atomic_write(filename); end

  def directory?(path); end

  def entries(path); end

  def file?(path); end

  def find_matching_path_for_extensions(path, basename, extensions); end

  def find_upwards(basename, path, root=T.unsafe(nil)); end

  def join(base, path); end

  def match_path_extname(path, extensions); end

  def path_extnames(path); end

  def path_parents(path, root=T.unsafe(nil)); end

  def paths_split(paths, filename); end

  def relative_path?(path); end

  def relative_path_from(start, dest); end

  def set_pipeline(path, mime_exts, pipeline_exts, pipeline); end

  def split_subpath(path, subpath); end

  def stat(path); end

  def stat_directory(dir); end

  def stat_sorted_tree(dir, &block); end

  def stat_tree(dir, &block); end
  SEPARATOR_PATTERN = ::T.let(nil, ::T.untyped)
end

module Sprockets::PathUtils
  extend ::Sprockets::PathUtils
end

module Sprockets::Paths
  include ::Sprockets::Utils
  include ::Sprockets::PathUtils
  def append_path(path); end

  def clear_paths(); end

  def each_file(); end

  def paths(); end

  def prepend_path(path); end

  def root(); end
end

module Sprockets::Paths
end

module Sprockets::Preprocessors
end

class Sprockets::Preprocessors::DefaultSourceMap
  def call(input); end
end

class Sprockets::Preprocessors::DefaultSourceMap
end

module Sprockets::Preprocessors
end

module Sprockets::Processing
  include ::Sprockets::Utils
  include ::Sprockets::URIUtils
  include ::Sprockets::ProcessorUtils
  def build_processors_uri(type, file_type, pipeline); end

  def bundle_processors(); end

  def default_processors_for(type, file_type); end

  def pipelines(); end

  def postprocessors(); end

  def preprocessors(); end

  def processors(); end

  def processors_for(type, file_type, pipeline); end

  def register_bundle_metadata_reducer(mime_type, key, *args, &block); end

  def register_bundle_processor(*args, &block); end

  def register_pipeline(name, proc=T.unsafe(nil), &block); end

  def register_postprocessor(*args, &block); end

  def register_preprocessor(*args, &block); end

  def register_processor(*args, &block); end

  def resolve_processors_cache_key_uri(uri); end

  def self_processors_for(type, file_type); end

  def unregister_bundle_processor(*args); end

  def unregister_postprocessor(*args); end

  def unregister_preprocessor(*args); end

  def unregister_processor(*args); end
end

module Sprockets::Processing
end

module Sprockets::ProcessorUtils
  def call_processor(processor, input); end

  def call_processors(processors, input); end

  def compose_processors(*processors); end

  def processor_cache_key(processor); end

  def processors_cache_keys(processors); end

  def validate_processor_result!(result); end
  VALID_METADATA_COMPOUND_TYPES = ::T.let(nil, ::T.untyped)
  VALID_METADATA_COMPOUND_TYPES_HASH = ::T.let(nil, ::T.untyped)
  VALID_METADATA_TYPES = ::T.let(nil, ::T.untyped)
  VALID_METADATA_VALUE_TYPES = ::T.let(nil, ::T.untyped)
  VALID_METADATA_VALUE_TYPES_HASH = ::T.let(nil, ::T.untyped)
end

class Sprockets::ProcessorUtils::CompositeProcessor
  def cache_key(); end

  def call(input); end
  PLURAL = ::T.let(nil, ::T.untyped)
  SINGULAR = ::T.let(nil, ::T.untyped)
end

class Sprockets::ProcessorUtils::CompositeProcessor
  def self.create(processors); end
end

module Sprockets::ProcessorUtils
  extend ::Sprockets::ProcessorUtils
end

module Sprockets::Rails
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets::Rails::Context
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::AssetTagHelper
  include ::ActionView::Helpers::AssetUrlHelper
  def compute_asset_path(path, options=T.unsafe(nil)); end
end

module Sprockets::Rails::Context
  def self.included(klass); end
end

module Sprockets::Rails::Helper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::AssetTagHelper
  include ::ActionView::Helpers::AssetUrlHelper
  include ::Sprockets::Rails::Utils
  def asset_digest_path(path, options=T.unsafe(nil)); end

  def asset_integrity(path, options=T.unsafe(nil)); end

  def asset_resolver_strategies(); end

  def compute_asset_path(path, options=T.unsafe(nil)); end

  def compute_integrity?(options); end

  def javascript_include_tag(*sources); end

  def legacy_debug_path(path, debug); end

  def lookup_debug_asset(path, options=T.unsafe(nil)); end

  def path_with_extname(path, options); end

  def request_debug_assets?(); end

  def resolve_asset(); end

  def resolve_asset_path(path, allow_non_precompiled=T.unsafe(nil)); end

  def secure_subresource_integrity_context?(); end

  def stylesheet_link_tag(*sources); end
  VIEW_ACCESSORS = ::T.let(nil, ::T.untyped)
end

module Sprockets::Rails::Helper
  def self.extended(obj); end

  def self.included(klass); end
end

module Sprockets::Rails::HelperAssetResolvers
end

class Sprockets::Rails::HelperAssetResolvers::Environment
  def asset_path(path, digest, allow_non_precompiled=T.unsafe(nil)); end

  def digest_path(path, allow_non_precompiled=T.unsafe(nil)); end

  def find_debug_asset(path); end

  def initialize(view); end

  def integrity(path); end
end

class Sprockets::Rails::HelperAssetResolvers::Environment
end

class Sprockets::Rails::HelperAssetResolvers::Manifest
  def asset_path(path, digest, allow_non_precompiled=T.unsafe(nil)); end

  def digest_path(path, allow_non_precompiled=T.unsafe(nil)); end

  def find_debug_asset(path); end

  def initialize(view); end

  def integrity(path); end
end

class Sprockets::Rails::HelperAssetResolvers::Manifest
end

module Sprockets::Rails::HelperAssetResolvers
  def self.[](name); end
end

class Sprockets::Rails::QuietAssets
  def call(env); end

  def initialize(app); end
end

class Sprockets::Rails::QuietAssets
end

module Sprockets::Rails::RouteWrapper
  def internal?(); end

  def internal_assets_path?(); end
end

module Sprockets::Rails::RouteWrapper
  def self.included(klass); end
end

module Sprockets::Rails::Utils
  def using_sprockets4?(); end
end

module Sprockets::Rails::Utils
end

module Sprockets::Rails
end

class Sprockets::Railtie
  include ::Sprockets::Rails::Utils
  def build_environment(app, initialized=T.unsafe(nil)); end
  LOOSE_APP_ASSETS = ::T.let(nil, ::T.untyped)
end

class Sprockets::Railtie::ManifestNeededError
  def initialize(); end
end

class Sprockets::Railtie::ManifestNeededError
end

class Sprockets::Railtie::OrderedOptions
  def configure(&block); end
end

class Sprockets::Railtie::OrderedOptions
end

class Sprockets::Railtie
  def self.build_manifest(app); end
end

module Sprockets::Resolve
  include ::Sprockets::PathDependencyUtils
  include ::Sprockets::PathUtils
  include ::Sprockets::URIUtils
  include ::Sprockets::HTTPUtils
  def parse_accept_options(mime_type, explicit_type); end

  def resolve(path, load_paths: T.unsafe(nil), accept: T.unsafe(nil), pipeline: T.unsafe(nil), base_path: T.unsafe(nil)); end

  def resolve!(path, **kargs); end

  def resolve_absolute_path(paths, filename, accept); end

  def resolve_alternates(load_path, logical_name); end

  def resolve_alts_under_path(load_path, logical_name, mime_exts); end

  def resolve_asset_uri(uri); end

  def resolve_index_under_path(load_path, logical_name, mime_exts); end

  def resolve_logical_path(paths, logical_path, accept); end

  def resolve_main_under_path(load_path, logical_name, mime_exts); end

  def resolve_relative_path(paths, path, dirname, accept); end

  def resolve_under_paths(paths, logical_name, accepts); end
end

module Sprockets::Resolve
end

class Sprockets::SassCompressor
  def cache_key(); end

  def call(*args); end

  def evaluate(*args); end

  def initialize(options=T.unsafe(nil)); end
  VERSION = ::T.let(nil, ::T.untyped)
end

class Sprockets::SassCompressor
  def self.cache_key(); end

  def self.call(input); end

  def self.instance(); end
end

Sprockets::SassFunctions = Sprockets::SassProcessor::Functions

class Sprockets::SassProcessor
  def cache_key(); end

  def call(input); end

  def initialize(options=T.unsafe(nil), &block); end
end

module Sprockets::SassProcessor::Functions
  def asset_data_url(path); end

  def asset_path(path, options=T.unsafe(nil)); end

  def asset_url(path, options=T.unsafe(nil)); end

  def audio_path(path); end

  def audio_url(path); end

  def font_path(path); end

  def font_url(path); end

  def image_path(path); end

  def image_url(path); end

  def javascript_path(path); end

  def javascript_url(path); end

  def sprockets_context(); end

  def sprockets_dependencies(); end

  def sprockets_environment(); end

  def stylesheet_path(path); end

  def stylesheet_url(path); end

  def video_path(path); end

  def video_url(path); end
end

module Sprockets::SassProcessor::Functions
end

class Sprockets::SassProcessor
  def self.cache_key(); end

  def self.call(input); end

  def self.instance(); end

  def self.syntax(); end
end

class Sprockets::SasscCompressor
  def call(input); end

  def initialize(options=T.unsafe(nil)); end
end

class Sprockets::SasscCompressor
  def self.call(input); end

  def self.instance(); end
end

class Sprockets::SasscProcessor
  def cache_key(); end

  def call(input); end

  def initialize(options=T.unsafe(nil), &block); end
end

module Sprockets::SasscProcessor::Functions
  def asset_data_url(path); end

  def asset_path(path, options=T.unsafe(nil)); end

  def asset_url(path, options=T.unsafe(nil)); end

  def audio_path(path); end

  def audio_url(path); end

  def font_path(path); end

  def font_url(path); end

  def image_path(path); end

  def image_url(path); end

  def javascript_path(path); end

  def javascript_url(path); end

  def sprockets_context(); end

  def sprockets_dependencies(); end

  def sprockets_environment(); end

  def stylesheet_path(path); end

  def stylesheet_url(path); end

  def video_path(path); end

  def video_url(path); end
end

module Sprockets::SasscProcessor::Functions
end

class Sprockets::SasscProcessor
  def self.cache_key(); end

  def self.call(input); end

  def self.instance(); end

  def self.syntax(); end
end

class Sprockets::ScssProcessor
end

class Sprockets::ScssProcessor
end

class Sprockets::ScsscProcessor
end

class Sprockets::ScsscProcessor
end

module Sprockets::Server
  def call(env); end
  ALLOWED_REQUEST_METHODS = ::T.let(nil, ::T.untyped)
end

module Sprockets::Server
end

class Sprockets::SourceMapProcessor
end

class Sprockets::SourceMapProcessor
  def self.call(input); end

  def self.original_content_type(source_map_content_type, error_when_not_found: T.unsafe(nil)); end
end

module Sprockets::SourceMapUtils
  def bsearch_mappings(mappings, offset, from=T.unsafe(nil), to=T.unsafe(nil)); end

  def combine_source_maps(first, second); end

  def compare_source_offsets(a, b); end

  def concat_source_maps(a, b); end

  def decode_source_map(map); end

  def decode_vlq_mappings(str, sources: T.unsafe(nil), names: T.unsafe(nil)); end

  def encode_source_map(map); end

  def encode_vlq_mappings(mappings, sources: T.unsafe(nil), names: T.unsafe(nil)); end

  def format_source_map(map, input); end

  def make_index_map(map); end

  def vlq_decode(str); end

  def vlq_decode_mappings(str); end

  def vlq_encode(ary); end

  def vlq_encode_mappings(ary); end
  BASE64_DIGITS = ::T.let(nil, ::T.untyped)
  BASE64_VALUES = ::T.let(nil, ::T.untyped)
  VLQ_BASE = ::T.let(nil, ::T.untyped)
  VLQ_BASE_MASK = ::T.let(nil, ::T.untyped)
  VLQ_BASE_SHIFT = ::T.let(nil, ::T.untyped)
  VLQ_CONTINUATION_BIT = ::T.let(nil, ::T.untyped)
end

module Sprockets::SourceMapUtils
  extend ::Sprockets::SourceMapUtils
end

module Sprockets::Transformers
  include ::Sprockets::Utils
  include ::Sprockets::ProcessorUtils
  include ::Sprockets::HTTPUtils
  def compose_transformers(transformers, types, preprocessors, postprocessors); end

  def expand_transform_accepts(parsed_accepts); end

  def register_transformer(from, to, proc); end

  def register_transformer_suffix(types, type_format, extname, processor); end

  def resolve_transform_type(type, accept); end

  def transformers(); end
end

class Sprockets::Transformers::Transformer
  def from(); end

  def from=(_); end

  def proc=(_); end

  def to(); end

  def to=(_); end
end

class Sprockets::Transformers::Transformer
  def self.[](*_); end

  def self.members(); end
end

module Sprockets::Transformers
end

class Sprockets::URITar
  def absolute_path?(); end

  def compress(); end

  def compressed_path(); end

  def expand(); end

  def initialize(uri, env); end

  def path(); end

  def root(); end

  def scheme(); end
end

class Sprockets::URITar
end

module Sprockets::URIUtils
  def build_asset_uri(path, params=T.unsafe(nil)); end

  def build_file_digest_uri(path); end

  def encode_uri_query_params(params); end

  def join_file_uri(scheme, host, path, query); end

  def join_uri(scheme, userinfo, host, port, registry, path, opaque, query, fragment); end

  def parse_asset_uri(uri); end

  def parse_file_digest_uri(uri); end

  def parse_uri_query_params(query); end

  def split_file_uri(uri); end

  def split_uri(uri); end

  def valid_asset_uri?(str); end
end

module Sprockets::URIUtils
  extend ::Sprockets::URIUtils
end

class Sprockets::UglifierCompressor
  def cache_key(); end

  def call(input); end

  def initialize(options=T.unsafe(nil)); end
  VERSION = ::T.let(nil, ::T.untyped)
end

class Sprockets::UglifierCompressor
  def self.cache_key(); end

  def self.call(input); end

  def self.instance(); end
end

class Sprockets::UnloadedAsset
  def asset_key(); end

  def compressed_path(); end

  def dependency_history_key(); end

  def digest_key(digest); end

  def file_digest_key(stat); end

  def filename(); end

  def initialize(uri, env); end

  def params(); end

  def uri(); end
end

class Sprockets::UnloadedAsset
end

module Sprockets::Utils
  def concat_javascript_sources(buf, source); end

  def dfs(initial); end

  def dfs_paths(path); end

  def duplicable?(obj); end

  def hash_reassoc(hash, key_a, key_b=T.unsafe(nil), &block); end

  def hash_reassoc1(hash, key); end

  def module_include(base, mod); end

  def string_end_with_semicolon?(str); end
end

class Sprockets::Utils::Gzip
  def archiver(); end

  def can_compress?(); end

  def cannot_compress?(); end

  def charset(); end

  def compress(file, target); end

  def content_type(); end

  def initialize(asset, archiver: T.unsafe(nil)); end

  def source(); end
  COMPRESSABLE_MIME_TYPES = ::T.let(nil, ::T.untyped)
end

module Sprockets::Utils::Gzip::ZlibArchiver
end

module Sprockets::Utils::Gzip::ZlibArchiver
  def self.call(file, source, mtime); end
end

module Sprockets::Utils::Gzip::ZopfliArchiver
end

module Sprockets::Utils::Gzip::ZopfliArchiver
  def self.call(file, source, mtime); end
end

class Sprockets::Utils::Gzip
end

module Sprockets::Utils
  extend ::Sprockets::Utils
end

class Sprockets::YUICompressor
  def cache_key(); end

  def call(input); end

  def initialize(options=T.unsafe(nil)); end
  VERSION = ::T.let(nil, ::T.untyped)
end

class Sprockets::YUICompressor
  def self.cache_key(); end

  def self.call(input); end

  def self.instance(); end
end

module Sprockets
  extend ::Sprockets::Configuration
  extend ::Sprockets::Dependencies
  extend ::Sprockets::Compressing
  extend ::Sprockets::Exporting
  extend ::Sprockets::Processing
  extend ::Sprockets::Transformers
  extend ::Sprockets::Mime
  extend ::Sprockets::Paths
  extend ::Sprockets::Utils
  extend ::Sprockets::URIUtils
  extend ::Sprockets::PathDigestUtils
  extend ::Sprockets::ProcessorUtils
  extend ::Sprockets::HTTPUtils
  extend ::Sprockets::PathUtils
  extend ::Sprockets::DigestUtils
end

class StepInput
  def autosave_associated_records_for_inputable(*args); end

  def autosave_associated_records_for_recipe_step(*args); end

  def belongs_to_counter_cache_after_update(reflection); end
end

class StepInput::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::StepInput::GeneratedRelationMethods
end

class StepInput::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::StepInput::GeneratedRelationMethods
end

class StepInput::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::StepInput::GeneratedRelationMethods
end

module StepInput::GeneratedAssociationMethods
  def build_recipe_step(*args, &block); end

  def create_recipe_step(*args, &block); end

  def create_recipe_step!(*args, &block); end

  def reload_inputable(); end

  def reload_recipe_step(); end
end

module StepInput::GeneratedRelationMethods
end

module StepInput::GeneratedRelationMethods
end

class StepInput
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class String
  include ::JSON::Ext::Generator::GeneratorMethods::String
  def parse_csv(**options); end

  def shellescape(); end

  def shellsplit(); end
  BLANK_RE = ::T.let(nil, ::T.untyped)
  ENCODED_BLANKS = ::T.let(nil, ::T.untyped)
end

class StringScanner
  def bol?(); end

  def initialize(*_); end
  Id = ::T.let(nil, ::T.untyped)
  Version = ::T.let(nil, ::T.untyped)
end

Struct::Group = Etc::Group

Struct::Passwd = Etc::Passwd

Struct::Tms = Process::Tms

class SynchronizedDelegator
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

module TZInfo::RubyCoreSupport
  HALF_DAYS_IN_DAY = ::T.let(nil, ::T.untyped)
end

class TZInfo::ZoneinfoDataSource
  DEFAULT_ALTERNATE_ISO3166_TAB_SEARCH_PATH = ::T.let(nil, ::T.untyped)
  DEFAULT_SEARCH_PATH = ::T.let(nil, ::T.untyped)
end

class TZInfo::ZoneinfoTimezoneInfo
  MAX_TIMESTAMP = ::T.let(nil, ::T.untyped)
  MIN_TIMESTAMP = ::T.let(nil, ::T.untyped)
end

class Tempfile
  def _close(); end

  def inspect(); end
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Tempfile::Remover
  def call(*args); end

  def initialize(tmpfile); end
end

class Tempfile::Remover
end

class Thor
  HELP_MAPPINGS = ::T.let(nil, ::T.untyped)
  TEMPLATE_EXTNAME = ::T.let(nil, ::T.untyped)
  THOR_RESERVED_WORDS = ::T.let(nil, ::T.untyped)
end

module Thor::Actions
  WARNINGS = ::T.let(nil, ::T.untyped)
end

Thor::AmbiguousTaskError = Thor::AmbiguousCommandError

class Thor::Argument
  VALID_TYPES = ::T.let(nil, ::T.untyped)
end

class Thor::Arguments
  NUMERIC = ::T.let(nil, ::T.untyped)
end

class Thor::Command
  FILE_REGEXP = ::T.let(nil, ::T.untyped)
end

Thor::Correctable = DidYouMean::Correctable

Thor::DynamicTask = Thor::DynamicCommand

Thor::HiddenTask = Thor::HiddenCommand

class Thor::Option
  VALID_TYPES = ::T.let(nil, ::T.untyped)
end

class Thor::Options
  EQ_RE = ::T.let(nil, ::T.untyped)
  LONG_RE = ::T.let(nil, ::T.untyped)
  OPTS_END = ::T.let(nil, ::T.untyped)
  SHORT_NUM = ::T.let(nil, ::T.untyped)
  SHORT_RE = ::T.let(nil, ::T.untyped)
  SHORT_SQ_RE = ::T.let(nil, ::T.untyped)
end

module Thor::RakeCompat
  include ::Rake::DSL
  include ::Rake::FileUtilsExt
  include ::FileUtils
  include ::FileUtils::StreamUtils_
end

module Thor::RakeCompat
  def self.included(base); end

  def self.rake_classes(); end
end

module Thor::Shell
  SHELL_DELEGATED_METHODS = ::T.let(nil, ::T.untyped)
end

Thor::Task = Thor::Command

class Thor::UndefinedCommandError
  include ::DidYouMean::Correctable
end

Thor::UndefinedTaskError = Thor::UndefinedCommandError

class Thor::UnknownArgumentError
  include ::DidYouMean::Correctable
end

module ThreadSafe
  NULL = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

ThreadSafe::Array = Array

class ThreadSafe::AtomicReferenceCacheBackend
  def [](key); end

  def []=(key, value); end

  def clear(); end

  def compute(key); end

  def compute_if_absent(key); end

  def compute_if_present(key); end

  def delete(key); end

  def delete_pair(key, value); end

  def each_pair(); end

  def empty?(); end

  def get_and_set(key, value); end

  def get_or_default(key, else_value=T.unsafe(nil)); end

  def initialize(options=T.unsafe(nil)); end

  def key?(key); end

  def merge_pair(key, value); end

  def replace_if_exists(key, new_value); end

  def replace_pair(key, old_value, new_value); end

  def size(); end
  DEFAULT_CAPACITY = ::T.let(nil, ::T.untyped)
  HASH_BITS = ::T.let(nil, ::T.untyped)
  LOCKED = ::T.let(nil, ::T.untyped)
  MAX_CAPACITY = ::T.let(nil, ::T.untyped)
  MOVED = ::T.let(nil, ::T.untyped)
  NOW_RESIZING = ::T.let(nil, ::T.untyped)
  TRANSFER_BUFFER_SIZE = ::T.let(nil, ::T.untyped)
  WAITING = ::T.let(nil, ::T.untyped)
end

class ThreadSafe::AtomicReferenceCacheBackend::Node
  include ::ThreadSafe::Util::CheapLockable
  def initialize(hash, key, value, next_node=T.unsafe(nil)); end

  def key(); end

  def key?(key); end

  def locked?(); end

  def matches?(key, hash); end

  def pure_hash(); end

  def try_await_lock(table, i); end

  def try_lock_via_hash(node_hash=T.unsafe(nil)); end

  def unlock_via_hash(locked_hash, node_hash); end
  HASH_BITS = ::T.let(nil, ::T.untyped)
  LOCKED = ::T.let(nil, ::T.untyped)
  MOVED = ::T.let(nil, ::T.untyped)
  SPIN_LOCK_ATTEMPTS = ::T.let(nil, ::T.untyped)
  WAITING = ::T.let(nil, ::T.untyped)
end

class ThreadSafe::AtomicReferenceCacheBackend::Node
  extend ::ThreadSafe::Util::Volatile
  def self.locked_hash?(hash); end
end

class ThreadSafe::AtomicReferenceCacheBackend::Table
  def cas_new_node(i, hash, key, value); end

  def delete_node_at(i, node, predecessor_node); end

  def try_lock_via_hash(i, node, node_hash); end

  def try_to_cas_in_computed(i, hash, key); end
end

class ThreadSafe::AtomicReferenceCacheBackend::Table
end

class ThreadSafe::AtomicReferenceCacheBackend
  extend ::ThreadSafe::Util::Volatile
end

ThreadSafe::ConcurrentCacheBackend = ThreadSafe::MriCacheBackend

ThreadSafe::Hash = Hash

class ThreadSafe::MriCacheBackend
  WRITE_LOCK = ::T.let(nil, ::T.untyped)
end

class ThreadSafe::SynchronizedCacheBackend
  include ::Mutex_m
  def lock(); end

  def locked?(); end

  def synchronize(&block); end

  def try_lock(); end

  def unlock(); end
end

class ThreadSafe::SynchronizedCacheBackend
end

module ThreadSafe::Util
  CPU_COUNT = ::T.let(nil, ::T.untyped)
  FIXNUM_BIT_SIZE = ::T.let(nil, ::T.untyped)
  MAX_INT = ::T.let(nil, ::T.untyped)
end

class ThreadSafe::Util::Adder
  def add(x); end

  def decrement(); end

  def increment(); end

  def reset(); end

  def sum(); end
end

class ThreadSafe::Util::Adder
end

class ThreadSafe::Util::AtomicReference
  def compare_and_set(old_value, new_value); end

  def get(); end

  def initialize(value=T.unsafe(nil)); end

  def set(new_value); end

  def value(); end

  def value=(new_value); end
end

class ThreadSafe::Util::AtomicReference
end

module ThreadSafe::Util::CheapLockable
  def cas_mutex(old_value, new_value); end

  def compare_and_set_mutex(old_value, new_value); end

  def lazy_set_mutex(value); end

  def mutex(); end

  def mutex=(value); end
end

module ThreadSafe::Util::CheapLockable
  extend ::ThreadSafe::Util::Volatile
end

class ThreadSafe::Util::PowerOfTwoTuple
  def hash_to_index(hash); end

  def next_in_size_table(); end

  def volatile_get_by_hash(hash); end

  def volatile_set_by_hash(hash, value); end
end

class ThreadSafe::Util::PowerOfTwoTuple
end

class ThreadSafe::Util::Striped64
  def busy?(); end

  def initialize(); end

  def retry_update(x, hash_code, was_uncontended); end
  THREAD_LOCAL_KEY = ::T.let(nil, ::T.untyped)
end

class ThreadSafe::Util::Striped64::Cell
  def cas(old_value, new_value); end

  def cas_computed(); end

  def padding_(); end
end

class ThreadSafe::Util::Striped64::Cell
end

class ThreadSafe::Util::Striped64
  extend ::ThreadSafe::Util::Volatile
end

module ThreadSafe::Util::Volatile
  def attr_volatile(*attr_names); end
end

module ThreadSafe::Util::Volatile
end

class ThreadSafe::Util::VolatileTuple
  include ::Enumerable
  def cas(i, old_value, new_value); end

  def compare_and_set(i, old_value, new_value); end

  def each(&blk); end

  def initialize(size); end

  def size(); end

  def volatile_get(i); end

  def volatile_set(i, value); end
end

class ThreadSafe::Util::VolatileTuple
end

module ThreadSafe::Util::XorShiftRandom
  def get(); end

  def xorshift(x); end
  MAX_XOR_SHIFTABLE_INT = ::T.let(nil, ::T.untyped)
end

module ThreadSafe::Util::XorShiftRandom
  extend ::ThreadSafe::Util::XorShiftRandom
end

module ThreadSafe::Util
end

module Tilt
  LOCK = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Tilt::BuilderTemplate
  def precompiled_postamble(locals); end

  def precompiled_template(locals); end
end

class Tilt::BuilderTemplate
end

class Tilt::CSVTemplate
  def precompiled(locals); end

  def precompiled_template(locals); end
end

class Tilt::CSVTemplate
  def self.engine(); end
end

class Tilt::Cache
  def clear(); end

  def fetch(*key); end
end

class Tilt::Cache
end

module Tilt::CompiledTemplates
end

module Tilt::CompiledTemplates
end

class Tilt::Dummy
end

class Tilt::Dummy
end

class Tilt::ERBTemplate
  def precompiled(locals); end

  def precompiled_postamble(locals); end

  def precompiled_preamble(locals); end

  def precompiled_template(locals); end
  SUPPORTS_KVARGS = ::T.let(nil, ::T.untyped)
end

class Tilt::ERBTemplate
  def self.default_output_variable(); end

  def self.default_output_variable=(name); end
end

class Tilt::ErubiTemplate
  def precompiled_template(locals); end
end

class Tilt::ErubiTemplate
end

class Tilt::EtanniTemplate
  def precompiled(locals); end

  def precompiled_template(locals); end
end

class Tilt::EtanniTemplate
end

class Tilt::Mapping
  def [](file); end

  def extensions_for(template_class); end

  def lazy_map(); end

  def new(file, line=T.unsafe(nil), options=T.unsafe(nil), &block); end

  def register(template_class, *extensions); end

  def register_lazy(class_name, file, *extensions); end

  def registered?(ext); end

  def template_for(file); end

  def template_map(); end

  def templates_for(file); end
  AUTOLOAD_IS_BROKEN = ::T.let(nil, ::T.untyped)
  LOCK = ::T.let(nil, ::T.untyped)
end

class Tilt::Mapping
end

class Tilt::NokogiriTemplate
  def evaluate(scope, locals); end

  def precompiled_postamble(locals); end

  def precompiled_preamble(locals); end

  def precompiled_template(locals); end
  DOCUMENT_HEADER = ::T.let(nil, ::T.untyped)
end

class Tilt::NokogiriTemplate
end

class Tilt::PlainTemplate
end

class Tilt::PlainTemplate
end

class Tilt::RDocTemplate
  def allows_script?(); end

  def markup(); end
end

class Tilt::RDocTemplate
end

class Tilt::SassTemplate
  def allows_script?(); end
end

Tilt::SassTemplate::Sass = SassC

class Tilt::SassTemplate
end

class Tilt::ScssTemplate
end

class Tilt::ScssTemplate
end

class Tilt::SigilTemplate
  def allows_script?(); end
end

class Tilt::SigilTemplate
end

class Tilt::StringTemplate
  def precompiled(locals); end

  def precompiled_template(locals); end
end

class Tilt::StringTemplate
end

Tilt::TOPOBJECT = Tilt::CompiledTemplates

class Tilt::Template
  def basename(suffix=T.unsafe(nil)); end

  def data(); end

  def default_encoding(); end

  def eval_file(); end

  def evaluate(scope, locals, &block); end

  def file(); end

  def initialize(file=T.unsafe(nil), line=T.unsafe(nil), options=T.unsafe(nil), &block); end

  def line(); end

  def metadata(); end

  def name(); end

  def options(); end

  def precompiled(local_keys); end

  def precompiled_postamble(local_keys); end

  def precompiled_preamble(local_keys); end

  def precompiled_template(local_keys); end

  def prepare(); end

  def render(scope=T.unsafe(nil), locals=T.unsafe(nil), &block); end
end

class Tilt::Template
  def self.default_mime_type(); end

  def self.default_mime_type=(value); end

  def self.metadata(); end
end

module Tilt
  def self.[](file); end

  def self.current_template(); end

  def self.default_mapping(); end

  def self.lazy_map(); end

  def self.new(file, line=T.unsafe(nil), options=T.unsafe(nil), &block); end

  def self.prefer(template_class, *extensions); end

  def self.register(template_class, *extensions); end

  def self.register_lazy(class_name, file, *extensions); end

  def self.registered?(ext); end

  def self.template_for(file); end

  def self.templates_for(file); end
end

class Time
  COMMON_YEAR_DAYS_IN_MONTH = ::T.let(nil, ::T.untyped)
  DATE_FORMATS = ::T.let(nil, ::T.untyped)
end

class Tool
  def after_add_for_recipe_steps(); end

  def after_add_for_recipe_steps=(val); end

  def after_add_for_recipe_steps?(); end

  def after_add_for_tools_recipe_steps(); end

  def after_add_for_tools_recipe_steps=(val); end

  def after_add_for_tools_recipe_steps?(); end

  def after_remove_for_recipe_steps(); end

  def after_remove_for_recipe_steps=(val); end

  def after_remove_for_recipe_steps?(); end

  def after_remove_for_tools_recipe_steps(); end

  def after_remove_for_tools_recipe_steps=(val); end

  def after_remove_for_tools_recipe_steps?(); end

  def autosave_associated_records_for_recipe_steps(*args); end

  def autosave_associated_records_for_tools_recipe_steps(*args); end

  def before_add_for_recipe_steps(); end

  def before_add_for_recipe_steps=(val); end

  def before_add_for_recipe_steps?(); end

  def before_add_for_tools_recipe_steps(); end

  def before_add_for_tools_recipe_steps=(val); end

  def before_add_for_tools_recipe_steps?(); end

  def before_remove_for_recipe_steps(); end

  def before_remove_for_recipe_steps=(val); end

  def before_remove_for_recipe_steps?(); end

  def before_remove_for_tools_recipe_steps(); end

  def before_remove_for_tools_recipe_steps=(val); end

  def before_remove_for_tools_recipe_steps?(); end

  def validate_associated_records_for_recipe_steps(*args); end

  def validate_associated_records_for_tools_recipe_steps(*args); end
end

class Tool::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Tool::GeneratedRelationMethods
end

class Tool::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Tool::GeneratedRelationMethods
end

class Tool::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::Tool::GeneratedRelationMethods
end

module Tool::GeneratedAssociationMethods
  def recipe_step_ids=(ids); end
end

module Tool::GeneratedRelationMethods
end

module Tool::GeneratedRelationMethods
end

class Tool
  def self.after_add_for_recipe_steps(); end

  def self.after_add_for_recipe_steps=(val); end

  def self.after_add_for_recipe_steps?(); end

  def self.after_add_for_tools_recipe_steps(); end

  def self.after_add_for_tools_recipe_steps=(val); end

  def self.after_add_for_tools_recipe_steps?(); end

  def self.after_remove_for_recipe_steps(); end

  def self.after_remove_for_recipe_steps=(val); end

  def self.after_remove_for_recipe_steps?(); end

  def self.after_remove_for_tools_recipe_steps(); end

  def self.after_remove_for_tools_recipe_steps=(val); end

  def self.after_remove_for_tools_recipe_steps?(); end

  def self.before_add_for_recipe_steps(); end

  def self.before_add_for_recipe_steps=(val); end

  def self.before_add_for_recipe_steps?(); end

  def self.before_add_for_tools_recipe_steps(); end

  def self.before_add_for_tools_recipe_steps=(val); end

  def self.before_add_for_tools_recipe_steps?(); end

  def self.before_remove_for_recipe_steps(); end

  def self.before_remove_for_recipe_steps=(val); end

  def self.before_remove_for_recipe_steps?(); end

  def self.before_remove_for_tools_recipe_steps(); end

  def self.before_remove_for_tools_recipe_steps=(val); end

  def self.before_remove_for_tools_recipe_steps?(); end
end

class TrueClass
  include ::JSON::Ext::Generator::GeneratorMethods::TrueClass
end

module TypeCoerce::Configuration
  extend ::T::Private::Methods::SingletonMethodHooks
end

class TypeCoerce::Converter
  PRIMITIVE_TYPES = ::T.let(nil, ::T.untyped)
end

module URI
  include ::URI::RFC2396_REGEXP
end

class URI::FTP
  def self.new2(user, password, host, port, path, typecode=T.unsafe(nil), arg_check=T.unsafe(nil)); end
end

class URI::GID
  COMPONENT = ::T.let(nil, ::T.untyped)
  PATH_REGEXP = ::T.let(nil, ::T.untyped)
end

class URI::LDAP
  def attributes(); end

  def attributes=(val); end

  def dn(); end

  def dn=(val); end

  def extensions(); end

  def extensions=(val); end

  def filter(); end

  def filter=(val); end

  def initialize(*arg); end

  def scope(); end

  def scope=(val); end

  def set_attributes(val); end

  def set_dn(val); end

  def set_extensions(val); end

  def set_filter(val); end

  def set_scope(val); end
end

class URI::MailTo
  def initialize(*arg); end
end

URI::Parser = URI::RFC2396_Parser

URI::REGEXP = URI::RFC2396_REGEXP

class URI::RFC2396_Parser
  def initialize(opts=T.unsafe(nil)); end
end

class URI::RFC3986_Parser
  def join(*uris); end

  def parse(uri); end

  def regexp(); end

  def split(uri); end
  RFC3986_relative_ref = ::T.let(nil, ::T.untyped)
end

module URI::Util
  def self.make_components_hash(klass, array_hash); end
end

module URI
  extend ::URI::Escape
  def self.get_encoding(label); end
end

module UnicodeNormalize
end

module UnicodeNormalize
end

class UniformNotifier
  AVAILABLE_NOTIFIERS = ::T.let(nil, ::T.untyped)
  NOTIFIERS = ::T.let(nil, ::T.untyped)
end

class UniformNotifier::RollbarNotifier
  DEFAULT_LEVEL = ::T.let(nil, ::T.untyped)
end

class UniformNotifier::Slack
  POSSIBLE_OPTIONS = ::T.let(nil, ::T.untyped)
end

class User
  include ::User::GeneratedAssociationMethods
  include ::Devise::Models::Authenticatable
  include ::Devise::Models::DatabaseAuthenticatable
  include ::Devise::Models::Rememberable
  include ::Devise::Models::Recoverable
  include ::Devise::Models::Registerable
  include ::Devise::Models::Validatable
  include ::Devise::Models::Lockable
  include ::Devise::Models::Trackable
  def current_password(); end

  def devise_modules(); end

  def devise_modules?(); end

  def password(); end

  def password_confirmation(); end

  def password_confirmation=(password_confirmation); end
end

class User::ActiveRecord_AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::User::GeneratedRelationMethods
end

class User::ActiveRecord_Associations_CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::User::GeneratedRelationMethods
end

class User::ActiveRecord_Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  include ::User::GeneratedRelationMethods
end

module User::GeneratedAssociationMethods
end

module User::GeneratedAssociationMethods
end

module User::GeneratedRelationMethods
  def admin(*args, &block); end

  def user(*args, &block); end
end

module User::GeneratedRelationMethods
end

class User
  extend ::Devise::Models::Authenticatable::ClassMethods
  extend ::Devise::Models::DatabaseAuthenticatable::ClassMethods
  extend ::Devise::Models::Rememberable::ClassMethods
  extend ::Devise::Models::Recoverable::ClassMethods
  extend ::Devise::Models::Registerable::ClassMethods
  extend ::Devise::Models::Validatable::ClassMethods
  extend ::Devise::Models::Lockable::ClassMethods
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
  def self.devise_modules(); end

  def self.devise_modules=(val); end

  def self.devise_modules?(); end
end

module Warden
end

class Warden::Config
  def deep_dup(key, other); end

  def default_scope(); end

  def default_scope=(value); end

  def default_strategies(*strategies); end

  def failure_app(); end

  def failure_app=(value); end

  def initialize(other=T.unsafe(nil)); end

  def intercept_401(); end

  def intercept_401=(value); end

  def scope_defaults(scope, opts=T.unsafe(nil)); end

  def serialize_from_session(*args, &block); end

  def serialize_into_session(*args, &block); end

  def silence_missing_strategies!(); end

  def silence_missing_strategies?(); end

  def strategies(); end
end

class Warden::Config
  def self.hash_accessor(*names); end
end

module Warden::Hooks
  def _after_failed_fetch(); end

  def _after_set_user(); end

  def _before_failure(); end

  def _before_logout(); end

  def _on_request(); end

  def _run_callbacks(kind, *args); end

  def after_authentication(options=T.unsafe(nil), method=T.unsafe(nil), &block); end

  def after_failed_fetch(options=T.unsafe(nil), method=T.unsafe(nil), &block); end

  def after_fetch(options=T.unsafe(nil), method=T.unsafe(nil), &block); end

  def after_set_user(options=T.unsafe(nil), method=T.unsafe(nil), &block); end

  def before_failure(options=T.unsafe(nil), method=T.unsafe(nil), &block); end

  def before_logout(options=T.unsafe(nil), method=T.unsafe(nil), &block); end

  def on_request(options=T.unsafe(nil), method=T.unsafe(nil), &block); end

  def prepend_after_authentication(options=T.unsafe(nil), &block); end

  def prepend_after_fetch(options=T.unsafe(nil), &block); end

  def prepend_after_set_user(options=T.unsafe(nil), &block); end

  def prepend_before_failure(options=T.unsafe(nil), &block); end

  def prepend_before_logout(options=T.unsafe(nil), &block); end

  def prepend_on_request(options=T.unsafe(nil), &block); end
end

module Warden::Hooks
end

class Warden::Manager
  def _run_callbacks(*args); end

  def call(env); end

  def config(); end

  def config=(config); end

  def initialize(app, options=T.unsafe(nil)); end
end

class Warden::Manager
  extend ::Warden::Hooks
  def self.serialize_from_session(scope=T.unsafe(nil), &block); end

  def self.serialize_into_session(scope=T.unsafe(nil), &block); end
end

module Warden::Mixins
end

module Warden::Mixins::Common
  def cookies(); end

  def params(); end

  def raw_session(); end

  def request(); end

  def reset_session!(); end

  def session(); end

  def warden_cookies(); end
end

module Warden::Mixins::Common
end

module Warden::Mixins
end

class Warden::NotAuthenticated
end

class Warden::NotAuthenticated
end

class Warden::Proxy
  include ::Warden::Mixins::Common
  def asset_request?(); end

  def authenticate(*args); end

  def authenticate!(*args); end

  def authenticate?(*args); end

  def authenticated?(scope=T.unsafe(nil)); end

  def clear_strategies_cache!(*args); end

  def config(); end

  def custom_failure!(); end

  def custom_failure?(); end

  def custom_response(*args, &block); end

  def default_strategies(*args, &block); end

  def env(); end

  def errors(); end

  def headers(*args, &block); end

  def initialize(env, manager); end

  def inspect(*args); end

  def lock!(); end

  def logout(*scopes); end

  def manager(); end

  def message(); end

  def on_request(); end

  def result(); end

  def session(scope=T.unsafe(nil)); end

  def session_serializer(); end

  def set_user(user, opts=T.unsafe(nil)); end

  def status(*args, &block); end

  def to_s(*args); end

  def unauthenticated?(scope=T.unsafe(nil)); end

  def user(argument=T.unsafe(nil)); end

  def winning_strategies(); end

  def winning_strategy(); end

  def winning_strategy=(winning_strategy); end
  ENV_SESSION_OPTIONS = ::T.let(nil, ::T.untyped)
  ENV_WARDEN_ERRORS = ::T.let(nil, ::T.untyped)
end

class Warden::Proxy::Errors
  include ::Enumerable
  def add(field_name, message); end

  def clear!(); end

  def each(&blk); end

  def empty?(); end

  def full_messages(); end

  def method_missing(meth, *args, &block); end

  def on(field_name); end
end

class Warden::Proxy::Errors
end

class Warden::Proxy
  extend ::Forwardable
end

class Warden::SessionSerializer
  def delete(scope, user=T.unsafe(nil)); end

  def deserialize(key); end

  def env(); end

  def fetch(scope); end

  def initialize(env); end

  def key_for(scope); end

  def serialize(user); end

  def session(); end

  def store(user, scope); end

  def stored?(scope); end

  def user_deserialize(args); end

  def user_serialize(record); end
end

class Warden::SessionSerializer
end

module Warden::Strategies
end

class Warden::Strategies::Base
  include ::Warden::Mixins::Common
  def _run!(); end

  def clear!(); end

  def custom!(response); end

  def custom_response(); end

  def custom_response=(custom_response); end

  def env(); end

  def errors(); end

  def fail(message=T.unsafe(nil)); end

  def fail!(message=T.unsafe(nil)); end

  def halt!(); end

  def halted?(); end

  def headers(header=T.unsafe(nil)); end

  def initialize(env, scope=T.unsafe(nil)); end

  def message(); end

  def message=(message); end

  def pass(); end

  def performed?(); end

  def redirect!(url, params=T.unsafe(nil), opts=T.unsafe(nil)); end

  def result(); end

  def result=(result); end

  def scope(); end

  def status(); end

  def store?(); end

  def success!(user, message=T.unsafe(nil)); end

  def successful?(); end

  def user(); end

  def user=(user); end

  def valid?(); end
end

class Warden::Strategies::Base
end

module Warden::Strategies
  def self.[](label); end

  def self._strategies(); end

  def self.add(label, strategy=T.unsafe(nil), &block); end

  def self.clear!(); end

  def self.update(label, &block); end
end

module Warden::Test
end

module Warden::Test::Helpers
  def login_as(user, opts=T.unsafe(nil)); end

  def logout(*scopes); end
end

module Warden::Test::Helpers
  def self.included(_base); end
end

module Warden::Test::Mock
  def warden(); end
end

class Warden::Test::Mock::Session
  def app(); end

  def app=(app); end

  def call(e); end

  def initialize(app, _configs=T.unsafe(nil)); end
end

class Warden::Test::Mock::Session
end

module Warden::Test::Mock
  def self.included(_base); end
end

module Warden::Test::WardenHelpers
  def _on_next_request(); end

  def asset_paths(); end

  def asset_paths=(*vals); end

  def on_next_request(&blk); end

  def test_reset!(); end
end

module Warden::Test::WardenHelpers
end

module Warden::Test
end

class Warden::UserNotSet
end

class Warden::UserNotSet
end

module Warden
  def self.test_mode!(); end
end

module Warning
  extend ::Warning
end

class WebSocket::Driver
  BINARY = ::T.let(nil, ::T.untyped)
  MAX_LENGTH = ::T.let(nil, ::T.untyped)
  STATES = ::T.let(nil, ::T.untyped)
  UNICODE = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::Client
  def headers(); end

  def proxy(origin, options=T.unsafe(nil)); end

  def status(); end
  VALID_SCHEMES = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::Client
  def self.generate_key(); end
end

class WebSocket::Driver::Draft75
  def frame(buffer, type=T.unsafe(nil), error_type=T.unsafe(nil)); end

  def parse(chunk); end

  def version(); end
end

class WebSocket::Driver::Draft75
end

class WebSocket::Driver::Draft76
  BODY_SIZE = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::Draft76
end

class WebSocket::Driver::Headers
  def [](name); end

  def []=(name, value); end

  def clear(); end

  def initialize(received=T.unsafe(nil)); end

  def to_h(); end
  ALLOWED_DUPLICATES = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::Headers
end

class WebSocket::Driver::Hybi
  def frame(buffer, type=T.unsafe(nil), code=T.unsafe(nil)); end

  def parse(chunk); end

  def ping(message=T.unsafe(nil), &callback); end

  def pong(message=T.unsafe(nil)); end

  def version(); end
  BYTE = ::T.let(nil, ::T.untyped)
  DEFAULT_ERROR_CODE = ::T.let(nil, ::T.untyped)
  ERRORS = ::T.let(nil, ::T.untyped)
  ERROR_CODES = ::T.let(nil, ::T.untyped)
  FIN = ::T.let(nil, ::T.untyped)
  GUID = ::T.let(nil, ::T.untyped)
  LENGTH = ::T.let(nil, ::T.untyped)
  MASK = ::T.let(nil, ::T.untyped)
  MAX_RESERVED_ERROR = ::T.let(nil, ::T.untyped)
  MESSAGE_OPCODES = ::T.let(nil, ::T.untyped)
  MIN_RESERVED_ERROR = ::T.let(nil, ::T.untyped)
  OPCODE = ::T.let(nil, ::T.untyped)
  OPCODES = ::T.let(nil, ::T.untyped)
  OPCODE_CODES = ::T.let(nil, ::T.untyped)
  OPENING_OPCODES = ::T.let(nil, ::T.untyped)
  PACK_FORMATS = ::T.let(nil, ::T.untyped)
  RSV1 = ::T.let(nil, ::T.untyped)
  RSV2 = ::T.let(nil, ::T.untyped)
  RSV3 = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::Hybi::Frame
  def final(); end

  def final=(final); end

  def length(); end

  def length=(length); end

  def length_bytes(); end

  def length_bytes=(length_bytes); end

  def masked(); end

  def masked=(masked); end

  def masking_key(); end

  def masking_key=(masking_key); end

  def opcode(); end

  def opcode=(opcode); end

  def payload(); end

  def payload=(payload); end

  def rsv1(); end

  def rsv1=(rsv1); end

  def rsv2(); end

  def rsv2=(rsv2); end

  def rsv3(); end

  def rsv3=(rsv3); end
end

class WebSocket::Driver::Hybi::Frame
end

class WebSocket::Driver::Hybi::Message
  def <<(frame); end

  def data(); end

  def data=(data); end

  def opcode(); end

  def opcode=(opcode); end

  def rsv1(); end

  def rsv1=(rsv1); end

  def rsv2(); end

  def rsv2=(rsv2); end

  def rsv3(); end

  def rsv3=(rsv3); end
end

class WebSocket::Driver::Hybi::Message
end

class WebSocket::Driver::Hybi
  def self.generate_accept(key); end
end

class WebSocket::Driver::Proxy
  include ::WebSocket::Driver::EventEmitter
  def headers(); end

  def initialize(client, origin, options); end

  def parse(chunk); end

  def set_header(name, value); end

  def start(); end

  def status(); end
  PORTS = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::Proxy
end

class WebSocket::Driver::Server
  def add_extension(*args, &block); end

  def binary(*args, &block); end

  def close(*args, &block); end

  def env(); end

  def frame(*args, &block); end

  def parse(chunk); end

  def ping(*args, &block); end

  def set_header(*args, &block); end

  def start(*args, &block); end

  def text(*args, &block); end

  def url(); end

  def version(); end

  def write(buffer); end
  EVENTS = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::Server
end

class WebSocket::Driver::StreamReader
  def each_byte(); end

  def put(chunk); end

  def read(length); end
  MINIMUM_AUTOMATIC_PRUNE_OFFSET = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::StreamReader
end

class WebSocket::Extensions
  MESSAGE_OPCODES = ::T.let(nil, ::T.untyped)
end

class WebSocket::Extensions::Parser
  EXT = ::T.let(nil, ::T.untyped)
  EXT_LIST = ::T.let(nil, ::T.untyped)
  NOTOKEN = ::T.let(nil, ::T.untyped)
  NUMBER = ::T.let(nil, ::T.untyped)
  PARAM = ::T.let(nil, ::T.untyped)
  QUOTED = ::T.let(nil, ::T.untyped)
  TOKEN = ::T.let(nil, ::T.untyped)
end

class WebSocket::Extensions::Parser::ParseError
end

class WebSocket::Extensions::Parser::ParseError
end

class WebSocket::Extensions::Parser
  def self.parse_header(header); end

  def self.serialize_params(name, params); end
end

module WebSocket::HTTP
end

module WebSocket::HTTP::Headers
  def complete?(); end

  def error?(); end

  def headers(); end

  def initialize(); end

  def parse(chunk); end
  CR = ::T.let(nil, ::T.untyped)
  HEADER_LINE = ::T.let(nil, ::T.untyped)
  LF = ::T.let(nil, ::T.untyped)
  MAX_LINE_LENGTH = ::T.let(nil, ::T.untyped)
end

module WebSocket::HTTP::Headers
end

class WebSocket::HTTP::Request
  include ::WebSocket::HTTP::Headers
  def env(); end
  REQUEST_LINE = ::T.let(nil, ::T.untyped)
  REQUEST_TARGET = ::T.let(nil, ::T.untyped)
  RESERVED_HEADERS = ::T.let(nil, ::T.untyped)
end

class WebSocket::HTTP::Request
end

class WebSocket::HTTP::Response
  include ::WebSocket::HTTP::Headers
  def [](name); end

  def body(); end

  def code(); end
  STATUS_LINE = ::T.let(nil, ::T.untyped)
end

class WebSocket::HTTP::Response
end

module WebSocket::HTTP
  def self.normalize_header(name); end
end

class Zlib::Deflate
  def initialize(*_); end
end

class Zlib::GzipReader
  def initialize(*_); end
end

class Zlib::GzipWriter
  def initialize(*_); end
end

class Zlib::Inflate
  def initialize(*_); end
end
