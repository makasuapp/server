# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/net-scp/all/net-scp.rbi
#
# net-scp-3.0.0

module Net
end
class Net::SCP
  def await_response(channel, next_state); end
  def await_response_state(channel); end
  def download!(remote, local = nil, options = nil, &progress); end
  def download(remote, local, options = nil, &progress); end
  def finish_state(channel); end
  def initialize(session); end
  def progress_callback(channel, name, sent, total); end
  def scp_command(mode, options); end
  def self.download!(host, username, remote, local = nil, options = nil, &progress); end
  def self.start(host, username, options = nil); end
  def self.upload!(host, username, local, remote, options = nil, &progress); end
  def session; end
  def shellescape(path); end
  def start_command(mode, local, remote, options = nil, &callback); end
  def upload!(local, remote, options = nil, &progress); end
  def upload(local, remote, options = nil, &progress); end
  include Net::SCP::Upload
  include Net::SSH::Loggable
end
class Net::SCP::Error < RuntimeError
end
module Net::SCP::Upload
  def next_item_state(channel); end
  def preserve_attributes_if_requested(channel); end
  def send_data_state(channel); end
  def set_current(channel, path); end
  def upload_current_state(channel); end
  def upload_directory_state(channel); end
  def upload_file_state(channel); end
  def upload_start_state(channel); end
end
module Net::SCP::Download
  def download_start_state(channel); end
  def finish_read_state(channel); end
  def parse_directive(text); end
  def read_data_state(channel); end
  def read_directive_state(channel); end
  def read_directory(channel, directive); end
  def read_file(channel, directive); end
end
class Net::SSH::Connection::Session
  def scp; end
end
