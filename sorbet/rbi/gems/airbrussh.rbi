# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/airbrussh/all/airbrussh.rbi
#
# airbrussh-1.4.0

module Airbrussh
  def self.configuration(options = nil); end
  def self.configure; end
end
module Airbrussh::Colors
  def blue(string); end
  def gray(string); end
  def green(string); end
  def red(string); end
  def self.blue(string); end
  def self.gray(string); end
  def self.green(string); end
  def self.red(string); end
  def self.yellow(string); end
  def yellow(string); end
end
class Airbrussh::CommandFormatter < SimpleDelegator
  def abbreviated; end
  def exit_message; end
  def failure_message; end
  def format_output(line); end
  def initialize(command, position); end
  def number; end
  def runtime; end
  def start_message; end
  def success_message; end
  def user_at_host; end
  include Airbrussh::Colors
end
class Airbrussh::Console
  def <<(string); end
  def color_enabled?; end
  def config; end
  def console_width; end
  def initialize(output, config = nil); end
  def output; end
  def print_line(obj = nil); end
  def strip_ascii_color(string); end
  def to_utf8(string); end
  def truncate_to_console_width(string); end
  def utf8_supported?(string); end
  def write(string); end
end
module Airbrussh::Rake
end
class Airbrussh::Rake::Context
  def current_task_name; end
  def enabled?; end
  def history; end
  def initialize(config = nil); end
  def last_task_name; end
  def last_task_name=(arg0); end
  def position(command); end
  def register_new_command(command); end
  def reset_history_if_task_changed; end
  def self.current_task_name; end
  def self.current_task_name=(arg0); end
  def self.install_monkey_patch; end
end
class Airbrussh::ConsoleFormatter < SSHKit::Formatter::Abstract
  def <<(obj); end
  def clock; end
  def config; end
  def context; end
  def current_task_name(*args, &block); end
  def debug?(obj); end
  def decorate(command); end
  def format_log_message(log_message); end
  def initialize(io, config = nil); end
  def last_printed_task; end
  def last_printed_task=(arg0); end
  def log_and_clear_command_output(command, stream); end
  def log_command_data(command, stream_type, string); end
  def log_command_exit(command); end
  def log_command_start(command); end
  def print_indented_line(string, offset = nil); end
  def print_line(string); end
  def print_task_if_changed; end
  def register_new_command(*args, &block); end
  def write(obj); end
  def write_banner; end
  def write_log_message(log_message); end
  extend Forwardable
  include Airbrussh::Colors
end
class Airbrussh::LogFileFormatter < SimpleDelegator
  def ensure_directory_exists; end
  def initialize(path, formatter_class = nil); end
  def log_file_io; end
  def path; end
  def write_delimiter; end
end
class Airbrussh::Configuration
  def apply_options(options); end
  def banner; end
  def banner=(arg0); end
  def banner_message; end
  def color; end
  def color=(arg0); end
  def command_output; end
  def command_output=(arg0); end
  def context; end
  def context=(arg0); end
  def formatters(io); end
  def initialize; end
  def log_file; end
  def log_file=(arg0); end
  def monkey_patch_rake; end
  def monkey_patch_rake=(arg0); end
  def show_command_output?(sym); end
  def task_prefix; end
  def task_prefix=(arg0); end
  def truncate; end
  def truncate=(arg0); end
  def warn_unrecognized_key(key); end
end
class Airbrussh::DelegatingFormatter
  def <<(command_or_log_message); end
  def debug(*args); end
  def error(*args); end
  def fatal(*args); end
  def formatters; end
  def info(*args); end
  def initialize(formatters); end
  def log(*args); end
  def log_command_data(*args); end
  def log_command_exit(*args); end
  def log_command_start(*args); end
  def warn(*args); end
  def write(command_or_log_message); end
end
class Airbrussh::Formatter < Airbrussh::DelegatingFormatter
  def initialize(io, options_or_config_object = nil); end
end
